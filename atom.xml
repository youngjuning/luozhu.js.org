<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>洛竹的博客</title>
  
  <subtitle>真理无穷，一寸欢喜。</subtitle>
  <link href="https://youngjuning.js.org/atom.xml" rel="self"/>
  
  <link href="https://youngjuning.js.org/"/>
  <updated>2023-03-26T15:04:38.332Z</updated>
  <id>https://youngjuning.js.org/</id>
  
  <author>
    <name>洛竹</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「已解决」TypeError: moment().tz is not a function</title>
    <link href="https://youngjuning.js.org/3ee8e89b57ce/"/>
    <id>https://youngjuning.js.org/3ee8e89b57ce/</id>
    <published>2023-03-21T04:41:19.000Z</published>
    <updated>2023-03-26T15:04:38.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>迁移项目时下面的代码编译报错 <code>TypeError: moment().tz is not a function</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myDate = <span class="title function_">moment</span>().<span class="title function_">tz</span>(<span class="literal">undefined</span>, vm.<span class="property">timeZone</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法 1"></a>解决办法 1</h1><p>使用 <code>moment-timezone</code> 代替：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment-timezone&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法 2"></a>解决办法 2</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;moment-timezone&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;迁移项目时下面的代码编译报错 &lt;code&gt;TypeError: moment().tz is not a function&lt;/code&gt;：&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    <category term="issues" scheme="https://youngjuning.js.org/categories/issues/"/>
    
    <category term="moment" scheme="https://youngjuning.js.org/categories/issues/moment/"/>
    
    
    <category term="moment" scheme="https://youngjuning.js.org/tags/moment/"/>
    
    <category term="moment-timezone" scheme="https://youngjuning.js.org/tags/moment-timezone/"/>
    
    <category term="TypeError" scheme="https://youngjuning.js.org/tags/TypeError/"/>
    
    <category term="moment().tz" scheme="https://youngjuning.js.org/tags/moment-tz/"/>
    
  </entry>
  
  <entry>
    <title>2023 能赚钱的悬赏软件推荐</title>
    <link href="https://youngjuning.js.org/4dabea032500/"/>
    <id>https://youngjuning.js.org/4dabea032500/</id>
    <published>2023-03-20T03:51:45.000Z</published>
    <updated>2023-03-26T15:04:38.324Z</updated>
    
    <content type="html"><![CDATA[<p>悬赏软件是一种通过发布任务、悬赏金等方式吸引用户完成任务并获得奖励的应用程序。在这些平台上，用户可以发布各种各样的任务，如填写问卷、测试应用、写文章、翻译文本、拍照等等，其他用户可以接受这些任务并完成它们，获取相应的奖励。</p><h1 id="悬赏软件能赚到钱吗？"><a href="#悬赏软件能赚到钱吗？" class="headerlink" title="悬赏软件能赚到钱吗？"></a>悬赏软件能赚到钱吗？</h1><p>使用悬赏软件可以赚到一定的零花钱或者是收入，但具体赚多少取决于任务的类型和数量，以及自己的能力和时间投入。一些悬赏软件提供的任务奖励较低，而另一些则可能提供更高的奖励。除此之外，一些悬赏软件可能还会要求达到一定的任务数量或者质量才能提现，因此需要具体了解每个平台的规则和要求。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>在使用悬赏软件时，需要注意以下几点：</p><ol><li>不要盲目接受任务，要根据自己的能力和时间合理选择任务。</li><li>完成任务时要认真仔细，保证质量，否则可能会导致任务被拒绝或者扣除奖励。</li><li>注意个人信息和隐私保护，不要泄露个人敏感信息。</li><li>不要轻信一些涉及到付款或者转账的任务，避免上当受骗。</li></ol><p>总之，悬赏软件可以作为一种赚取零花钱或者收入的方式，但需要谨慎使用，选择正规、可信的平台，并根据自己的能力和时间合理选择任务。</p><h1 id="常见的悬赏软件"><a href="#常见的悬赏软件" class="headerlink" title="常见的悬赏软件"></a>常见的悬赏软件</h1><ul><li>百度天天领现金：签到领积分、吃饭补贴、睡觉补贴、0 元领水果、邀好友赚钱、做任务赚金币、看广告赚钱</li><li>悟空浏览器：最大特色是悟空自动赚积分，提现靠谱。</li><li>美团众包：提供各种任务包，如拍照、调研、晒单等，奖励方式多样。</li><li>微信读书：通过阅读完成任务，获得读书币，可以用于提现或换取各种奖励。</li><li>拼多多：提供签到、邀请好友、浏览商品等任务，奖励丰富。</li><li>任务猫：提供各种任务，如浏览网页、下载应用、完成问卷等，奖励较高。</li><li>小米有品：提供签到、分享、晒单等任务，奖励小米积分，可以兑换商品。</li><li>闲鱼：提供发布闲置物品、邀请好友等任务，奖励为闲鱼金币，可以用于购物。</li><li>任务行：提供各种任务，如拍照、录音、调查等，奖励方式多样。</li></ul><p>这些悬赏软件都有自己的特点和规则，用户在使用时要仔细阅读相关条款和规定，确保自己的权益得到保障。</p><h1 id="免手续费悬赏软件"><a href="#免手续费悬赏软件" class="headerlink" title="免手续费悬赏软件"></a>免手续费悬赏软件</h1><p>有网友表示，自己辛辛苦苦做任务赚钱，但每次提现都要扣手续费，让人很不舒服。问我有没有不需要提现手续费的任务应用程序。分享 2 款免手续费的赏金软件提现，纯干货。</p><h2 id="优赏吧"><a href="#优赏吧" class="headerlink" title="优赏吧"></a>优赏吧</h2><p>优赏吧也已经运营了几年。最低取款 1 元即付，不扣除取款手续费。即使它不是一个整数，所有的提款都可以一次完成。它是整个网络之中唯一的一个。。</p><p>它还具有分红树的功能。做任务的红包水果类似于种树的水果。时候到了，钱收了，工作也就完成了。。</p><p>不需要身份验证，界面干净，使用起来很舒服。</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1679284811377.png"></p><h2 id="赏帮"><a href="#赏帮" class="headerlink" title="赏帮"></a>赏帮</h2><p>赏帮的受欢迎程度是有目共睹的，也是一款提现不收手续费的打赏软件。最低1元开始，但需要是整数倍。</p><p>平台的操作更用心，更受欢迎。新手注册会给一个小红包，并且在排行榜之上有额外的奖励。它是非常稳定的，可以用于长期试验赚一点钱。</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1679285041134.png"></p><p>目前，这两款软件提现都不收取手续费。当然，趣闲大哥也可以做，但需要用积分兑换，这是多了一个步骤，很多人都不知道这个功能。对新手来说是很不友好的，所以我觉得应该排除。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;悬赏软件是一种通过发布任务、悬赏金等方式吸引用户完成任务并获得奖励的应用程序。在这些平台上，用户可以发布各种各样的任务，如填写问卷、测试应用、写文章、翻译文本、拍照等等，其他用户可以接受这些任务并完成它们，获取相应的奖励。&lt;/p&gt;
&lt;h1 id=&quot;悬赏软件能赚到钱吗？&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="副业" scheme="https://youngjuning.js.org/categories/%E5%89%AF%E4%B8%9A/"/>
    
    <category term="网赚" scheme="https://youngjuning.js.org/categories/%E5%89%AF%E4%B8%9A/%E7%BD%91%E8%B5%9A/"/>
    
    
    <category term="悬赏软件" scheme="https://youngjuning.js.org/tags/%E6%82%AC%E8%B5%8F%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="提现" scheme="https://youngjuning.js.org/tags/%E6%8F%90%E7%8E%B0/"/>
    
    <category term="手续费" scheme="https://youngjuning.js.org/tags/%E6%89%8B%E7%BB%AD%E8%B4%B9/"/>
    
    <category term="优赏吧" scheme="https://youngjuning.js.org/tags/%E4%BC%98%E8%B5%8F%E5%90%A7/"/>
    
    <category term="赏帮" scheme="https://youngjuning.js.org/tags/%E8%B5%8F%E5%B8%AE/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言系列教程の字符串</title>
    <link href="https://youngjuning.js.org/e17097ce4465/"/>
    <id>https://youngjuning.js.org/e17097ce4465/</id>
    <published>2023-03-19T07:14:00.000Z</published>
    <updated>2023-03-26T15:04:38.328Z</updated>
    
    <content type="html"><![CDATA[<p>在 Go 中，String 值得特别一提，因为与其他语言相比，它们在实现上有所不同。</p><h2 id="String-是什么？"><a href="#String-是什么？" class="headerlink" title="String 是什么？"></a>String 是什么？</h2><p><strong>在 Go 中，一个字符串是字节的一个切片。字符串可以通过将一组字符放在双引号内来创建</strong></p><p>让我们看看一个简单的例子，创建一个 <code>string</code> 并打印出来。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">    fmt.Println(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/o9OVDgEMU0">Run in playground</a></p><p>上述程序将打印 <code>Hello World</code>。</p><p>Go 中的字符串是 <a href="https://naveenr.net/unicode-character-set-and-utf-8-utf-16-utf-32-encoding/">符合 Unicode 标准</a> 并且是 <a href="https://naveenr.net/unicode-character-set-and-utf-8-utf-16-utf-32-encoding/">UTF-8 编码</a> 的。</p><h2 id="访问一个字符串的单个字节"><a href="#访问一个字符串的单个字节" class="headerlink" title="访问一个字符串的单个字节"></a>访问一个字符串的单个字节</h2><p>由于字符串是字节的一个切片，所以可以访问字符串的每个字节。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printBytes</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Bytes: &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;%x &quot;</span>, s[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  name := <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;String: %s\n&quot;</span>, name) <span class="comment">// 输入的字符串被打印出来</span></span><br><span class="line">    printBytes(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/B3KgBBQhiN9">Run in playground</a></p><p><code>%s</code> 是用于打印字符串的格式化标识符。<code>len(s)</code> 返回字符串中的字节数，我们使用 <code>for</code> 循环以十六进制符号打印这些字节。<code>%x</code> 是十六进制的格式指定符。上述程序的输出结果是：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String: Hello World</span><br><span class="line">Bytes: 48 65 6c 6c 6f 20 57 6f 72 6c 64</span><br></pre></td></tr></table></figure><p>这是 <code>Hello World</code> 的 <a href="https://mothereff.in/utf-8#Hello%20World">Unicode UT8 编码</a> 值. 为了更好地理解字符串，需要对 Unicode 和 UTF-8 有一个基本的了解。 我推荐阅读 <a href="https://naveenr.net/unicode-character-set-and-utf-8-utf-16-utf-32-encoding/">https://naveenr.net/unicode-character-set-and-utf-8-utf-16-utf-32-encoding/</a> 了解更多 Unicode 和 UTF-8 的知识。</p><h2 id="访问字符串的单个字符"><a href="#访问字符串的单个字符" class="headerlink" title="访问字符串的单个字符"></a>访问字符串的单个字符</h2><p>让我们对上述程序稍作修改，以打印字符串的字符。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printBytes</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Bytes: &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%x &quot;</span>, s[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printChars</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Characters: &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%c &quot;</span>, s[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;String: %s\n&quot;</span>, name)</span><br><span class="line">    printChars(name)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    printBytes(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/ZkXmyVNsqv7">Run in playground</a></p><p><code>%c</code> 格式化标识符用于打印 <code>printChars</code> 方法中字符串参数中的字符。该程序打印的是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String: Hello World</span><br><span class="line">Characters: H e l l o   W o r l d</span><br><span class="line">Bytes: 48 65 6c 6c 6f 20 57 6f 72 6c 64</span><br></pre></td></tr></table></figure><p>虽然上面的程序看起来是访问字符串的单个字符的合法方式，但这有一个严重的错误。让我们来看看这个错误是什么。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printBytes</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Bytes: &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%x &quot;</span>, s[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printChars</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Characters: &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%c &quot;</span>, s[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;String: %s\n&quot;</span>, name)</span><br><span class="line">    printChars(name)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    printBytes(name)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">    name = <span class="string">&quot;Señor&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;String: %s\n&quot;</span>, name)</span><br><span class="line">    printChars(name) <span class="comment">//</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    printBytes(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/2hyVf8l9fiO">Run in playground</a></p><p>上述程序的输出是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String: Hello World</span><br><span class="line">Characters: H e l l o   W o r l d</span><br><span class="line">Bytes: 48 65 6c 6c 6f 20 57 6f 72 6c 64</span><br><span class="line"></span><br><span class="line">String: Señor</span><br><span class="line">Characters: S e Ã ± o r</span><br><span class="line">Bytes: 53 65 c3 b1 6f 72</span><br></pre></td></tr></table></figure><p>我们试图打印 <strong>Señor</strong> 的字符，但它输出 <strong>S e Ã ± o r</strong>，这是错误的。为什么这个程序对 <code>Señor</code> 会出错，而对 <code>Hello World </code> 却能完全正常工作。原因是 <code>ñ</code> 的 Unicode 码位是 <code>U+00F1</code>，其 <a href="https://mothereff.in/utf-8#%C3%B1">UTF-8编码</a> 占用了 2 个字节 <code>c3</code> 和 <code>b1</code>。我们试图打印字符，假设每个代码点是一个字节，这是错误的。<strong>在 UTF-8 编码中，一个代码点可以占用 1个以上的字节。</strong>那么我们如何解决这个问题？这就需要 <strong>rune</strong> 拯救我们的地方了。</p><h2 id="Rune"><a href="#Rune" class="headerlink" title="Rune"></a>Rune</h2><p>Rune 是 Go 中的一个内置类型，它是 <code>int32</code> 的别名。Rune 在 Go 中代表一个 Unicode 代码点。不管这个代码点占用多少字节，它都可以用 Rune 来表示。让我们修改上面的程序，用 Rune 来打印字符。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printBytes</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Bytes: &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%x &quot;</span>, s[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printChars</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Characters: &quot;</span>)</span><br><span class="line">    runes := []<span class="type">rune</span>(s) <span class="comment">// 字符串被转换为 runes 的切片</span></span><br><span class="line">    <span class="comment">// 然后我们对其进行循环，并显示这些字符。</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(runes); i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%c &quot;</span>, runes[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;String: %s\n&quot;</span>, name)</span><br><span class="line">    printChars(name)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    printBytes(name)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">    name = <span class="string">&quot;Señor&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;String: %s\n&quot;</span>, name)</span><br><span class="line">    printChars(name)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    printBytes(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/n8rsfagm2SJ">Run in playground</a></p><p>上述程序打印出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String: Hello World</span><br><span class="line">Characters: H e l l o   W o r l d</span><br><span class="line">Bytes: 48 65 6c 6c 6f 20 57 6f 72 6c 64</span><br><span class="line"></span><br><span class="line">String: Señor</span><br><span class="line">Characters: S e ñ o r</span><br><span class="line">Bytes: 53 65 c3 b1 6f 72</span><br></pre></td></tr></table></figure><p>上述输出是完美的。只是我们想要的😀。</p><h2 id="使用-for-range-循环访问单个-Rune"><a href="#使用-for-range-循环访问单个-Rune" class="headerlink" title="使用 for range 循环访问单个 Rune"></a>使用 <code>for range</code> 循环访问单个 Rune</h2><p>上面的程序是一个完美的方式来迭代一个字符串的各个 Rune。但是 Go 为我们提供了一种更简单的方法，即使用 <code>for range</code> 循环来实现这一目的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">charsAndBytePosition</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用 for range 循环迭代 string</span></span><br><span class="line">    <span class="keyword">for</span> index, <span class="type">rune</span> := <span class="keyword">range</span> s &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%c starts at byte %d\n&quot;</span>, <span class="type">rune</span>, index)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;Señor&quot;</span></span><br><span class="line">    charsAndBytePosition(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/0ldNBeffjYI">Run in playground</a></p><p>循环返回 Rune 开始的字节的位置，同时返回 Rune 的位置。这个程序输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S starts at byte 0</span><br><span class="line">e starts at byte 1</span><br><span class="line">ñ starts at byte 2</span><br><span class="line">o starts at byte 4</span><br><span class="line">r starts at byte 5</span><br></pre></td></tr></table></figure><p>从上面的输出可以看出，<code>ñ</code> 占用了 2 个字节，因为下一个字符 <code>o</code> 是从第 4 字节开始的，而不是第 3 字节😀。</p><h2 id="从一个字节片中创建一个字符串"><a href="#从一个字节片中创建一个字符串" class="headerlink" title="从一个字节片中创建一个字符串"></a>从一个字节片中创建一个字符串</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    byteSlice := []<span class="type">byte</span>&#123;<span class="number">0x43</span>, <span class="number">0x61</span>, <span class="number">0x66</span>, <span class="number">0xC3</span>, <span class="number">0xA9</span>&#125;</span><br><span class="line">    str := <span class="type">string</span>(byteSlice)</span><br><span class="line">    fmt.Println(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/Vr9pf8X8xO">Run in playground</a></p><p><code>byteSlice</code> 包含字符串 <code>Café</code>的 <a href="https://mothereff.in/utf-8#Caf%C3%A9">UTF-8编码</a> 十六进制字节。该程序打印出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Café</span><br></pre></td></tr></table></figure><p>如果我们有相当于十六进制的十进制值，怎么办？上面的程序能工作吗？让我们来看看。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    byteSlice := []<span class="type">byte</span>&#123;<span class="number">67</span>, <span class="number">97</span>, <span class="number">102</span>, <span class="number">195</span>, <span class="number">169</span>&#125; <span class="comment">// 十进制相当于 &#123;&#x27;\x43&#x27;, &#x27;\x61&#x27;, &#x27;\x66&#x27;, &#x27;\xC3&#x27;, &#x27;\xA9&#x27;&#125;</span></span><br><span class="line">    str := <span class="type">string</span>(byteSlice)</span><br><span class="line">    fmt.Println(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/jgsRowW6XN">Run in playground</a></p><p>小数点值也可以，上述程序也会打印出 <code>Café</code>。</p><blockquote><p>原文地址 <a href="https://golangbot.com/strings/">Golang tutorial series Strings</a><br>原文作者：<a href="https://golangbot.com/about/">Naveen Ramanathan</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">在 Go 中，一个字符串是字节的一个切片。字符串可以通过将一组字符放在双引号内来创建</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/categories/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/categories/Golang/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Golang" scheme="https://youngjuning.js.org/tags/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/tags/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Go 字符串" scheme="https://youngjuning.js.org/tags/Go-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="Go String" scheme="https://youngjuning.js.org/tags/Go-String/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言系列教程のMap</title>
    <link href="https://youngjuning.js.org/b6214c116672/"/>
    <id>https://youngjuning.js.org/b6214c116672/</id>
    <published>2023-03-19T07:13:00.000Z</published>
    <updated>2023-03-26T15:04:38.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="map-是什么？"><a href="#map-是什么？" class="headerlink" title="map 是什么？"></a>map 是什么？</h2><p>map 是 Go 中的一个内置类型，用于存储键值对。让我们以一个有几个员工的创业公司为例。为了简单起见，我们假设所有这些员工的名字都是唯一的。我们正在寻找一个数据结构来存储每个员工的工资。对于这个用例来说，一个 map 将是一个完美的选择。员工的名字可以是键，工资可以是值。map 类似于其他语言中的字典，如 Python。</p><h2 id="如何创建-map"><a href="#如何创建-map" class="headerlink" title="如何创建 map"></a>如何创建 map</h2><p>通过向 <code>make</code> 函数传递键和值的类型，可以创建一个 map。下面是创建一个新 map 的语法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">type</span> of key]<span class="keyword">type</span> of value)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">employeeSalary := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br></pre></td></tr></table></figure><p>上面这行代码创建了一个名为 <code>employeeSalary</code> 的地图，它有 <code>string</code> 键和 <code>int</code> 值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    employeeSalary := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">    fmt.Println(employeeSalary)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/EoaQ_Xwz66Z">Run in Playground</a></p><p>上面的程序创建了一个名为 <code>employeeSalary</code> 的 map，有 <code>string</code> 键和 <code>int</code> 值。上面的程序将打印。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span>[]</span><br></pre></td></tr></table></figure><p>由于我们没有向 map 添加任何元素，所以它是空的。</p><h2 id="向-map-添加元素"><a href="#向-map-添加元素" class="headerlink" title="向 map 添加元素"></a>向 map 添加元素</h2><p>向 map 添加新元素的语法与数组的语法相同。下面的程序在 <code>employeeSalary</code> map 中增加了一些新雇员。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    employeeSalary := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">    employeeSalary[<span class="string">&quot;steve&quot;</span>] = <span class="number">12000</span></span><br><span class="line">    employeeSalary[<span class="string">&quot;jamie&quot;</span>] = <span class="number">15000</span></span><br><span class="line">    employeeSalary[<span class="string">&quot;mike&quot;</span>] = <span class="number">9000</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;employeeSalary map contents:&quot;</span>, employeeSalary)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/-IUSnvdgF2I">Run in playground</a></p><p>我们增加了三个雇员 <code>steve</code>、<code>jamie</code> 和 <code>mike</code> 以及他们相应的工资。</p><p>上述程序打印出来。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">employeeSalary map contents: map[steve:12000 jamie:15000 mike:9000]</span><br></pre></td></tr></table></figure><p>也可以在声明本身中初始化一个 map。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    employeeSalary := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span> &#123;</span><br><span class="line">        <span class="string">&quot;steve&quot;</span>: <span class="number">12000</span>,</span><br><span class="line">        <span class="string">&quot;jamie&quot;</span>: <span class="number">15000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    employeeSalary[<span class="string">&quot;mike&quot;</span>] = <span class="number">9000</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;employeeSalary map contents:&quot;</span>, employeeSalary)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/oR_j4jkJflf">Run in playground</a></p><p>上面的程序声明了 <code>employeeSalary</code>，并在声明本身中添加了两个元素。后来又增加了一个键为 <code>mike</code> 的元素。该程序打印出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">employeeSalary map contents: map[jamie:15000 mike:9000 steve:12000]</span><br></pre></td></tr></table></figure><p>不一定只有字符串类型才是键。所有可比较的类型，如布尔、整数、浮点、复数、字符串也可以是键。甚至用户定义的类型，如结构体也可以是键。如果你想了解更多关于可比较类型的信息，请访问 <a href="http://golang.org/ref/spec#Comparison_operators%E3%80%82">http://golang.org/ref/spec#Comparison_operators。</a></p><h2 id="map-的零值"><a href="#map-的零值" class="headerlink" title="map 的零值"></a>map 的零值</h2><p>map 的零值是 <code>nil</code>。如果你试图向一个 <code>nil</code> map 添加元素，将会发生运行时 <a href="https://golangbot.com/panic-and-recover/">panic</a>。因此，在添加元素之前，map 必须被初始化。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> employeeSalary <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">    employeeSalary[<span class="string">&quot;steve&quot;</span>] = <span class="number">12000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/DH8gJVjn6M2">Run in playground</a></p><p>在上面的程序中，<code>employeeSalary</code> 是 <code>nil</code>，我们试图在 map 中添加一个新的键。该程序将出现错误</p><p><code>panic: assignment to entry in nil map</code></p><h2 id="从-map-中检索一个键的值"><a href="#从-map-中检索一个键的值" class="headerlink" title="从 map 中检索一个键的值"></a>从 map 中检索一个键的值</h2><p>现在我们已经向 map 添加了一些元素，让我们来学习如何检索它们。<code>map[key]</code> 是检索 map 元素的语法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    employeeSalary := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;</span><br><span class="line">        <span class="string">&quot;steve&quot;</span>: <span class="number">12000</span>,</span><br><span class="line">        <span class="string">&quot;jamie&quot;</span>: <span class="number">15000</span>,</span><br><span class="line">        <span class="string">&quot;mike&quot;</span>: <span class="number">9000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    employee := <span class="string">&quot;jamie&quot;</span></span><br><span class="line">    salary := employeeSalary[employee]</span><br><span class="line">    fmt.Println(<span class="string">&quot;Salary of&quot;</span>, employee, <span class="string">&quot;is&quot;</span>, salary)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/qthGPQ6pj0Z">Run in playground</a></p><p>上面的程序是非常直接的。雇员 <code>jamie</code> 的工资被检索并打印出来。该程序打印了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Salary of jamie is 15000</span><br></pre></td></tr></table></figure><p>如果一个元素不存在，会发生什么？map 将返回该元素的类型的零值。在 <code>employeeSalary</code> 地图的例子中，如果我们试图访问一个不存在的元素，将返回 <code>int</code> 的零值，即 <code>0</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    employeeSalary := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;</span><br><span class="line">        <span class="string">&quot;steve&quot;</span>: <span class="number">12000</span>,</span><br><span class="line">        <span class="string">&quot;jamie&quot;</span>: <span class="number">15000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Salary of joe is&quot;</span>, employeeSalary[<span class="string">&quot;joe&quot;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/iVal_ll7iN7">Run in playground</a></p><p>上述程序的输出是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Salary of joe is 0</span><br></pre></td></tr></table></figure><p>上面的程序返回 joe 的工资为 <code>0</code>。当我们试图检索 map 中不存在的键的值时，将不会出现运行时错误。</p><h2 id="Checking-if-a-key-exists"><a href="#Checking-if-a-key-exists" class="headerlink" title="Checking if a key exists"></a>Checking if a key exists</h2><p>在上一节中我们了解到，当一个键不存在时，将返回该类型的零值。当我们想知道键是否真的存在于 map 中时，这并没有帮助。</p><p>例如，我们想知道一个键是否存在于 <code>employeeSalary</code> map 中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value, ok := <span class="keyword">map</span>[key]</span><br></pre></td></tr></table></figure><p>以上是查找一个特定的键是否存在于 map 中的语法。如果 <code>ok</code> 为真，那么该键就存在，其值也存在于变量 <code>value</code> 中，否则该键就不存在。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    employeeSalary := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;</span><br><span class="line">        <span class="string">&quot;steve&quot;</span>: <span class="number">12000</span>,</span><br><span class="line">        <span class="string">&quot;jamie&quot;</span>: <span class="number">15000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    newEmp := <span class="string">&quot;joe&quot;</span></span><br><span class="line">    value, ok := employeeSalary[newEmp]</span><br><span class="line">    <span class="keyword">if</span> ok == <span class="literal">true</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Salary of&quot;</span>, newEmp, <span class="string">&quot;is&quot;</span>, value)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(newEmp, <span class="string">&quot;not found&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/Y4n1p4yfdVi">Run in playground</a></p><p>在上述程序中，<code>ok</code> 将是假的，因为 <code>joe</code> 不存在。因此，该程序将打印。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">joe not found</span><br></pre></td></tr></table></figure><h2 id="遍历一个-map-中的所有元素"><a href="#遍历一个-map-中的所有元素" class="headerlink" title="遍历一个 map 中的所有元素"></a>遍历一个 map 中的所有元素</h2><p><code>for</code> 循环的 <code>range</code> 形式用于遍历一个 map 的所有元素。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    employeeSalary := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;</span><br><span class="line">        <span class="string">&quot;steve&quot;</span>: <span class="number">12000</span>,</span><br><span class="line">        <span class="string">&quot;jamie&quot;</span>: <span class="number">15000</span>,</span><br><span class="line">        <span class="string">&quot;mike&quot;</span>:  <span class="number">9000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Contents of the map&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> key, value := <span class="keyword">range</span> employeeSalary &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;employeeSalary[%s] = %dn&quot;</span>, key, value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/rz8U_g2slb0">Run in playground</a></p><p>上述程序的输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Contents of the map</span><br><span class="line">employeeSalary[mike] = 9000</span><br><span class="line">employeeSalary[steve] = 12000</span><br><span class="line">employeeSalary[jamie] = 15000</span><br></pre></td></tr></table></figure><blockquote><p>一个重要的事实是，当使用 <code>for range</code> 时，从 map 中检索数值的顺序不保证在程序的每次执行中都是一样的。它也和元素被添加到 map 中的顺序不一样</p></blockquote><h2 id="从-map-中删除元素"><a href="#从-map-中删除元素" class="headerlink" title="从 map 中删除元素"></a>从 map 中删除元素</h2><p><a href="https://golang.org/pkg/builtin/#delete">delete(map, key)</a> 是从 <code>map</code> 中删除 <code>key</code> 的语法。删除函数不返回任何值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    employeeSalary := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;</span><br><span class="line">        <span class="string">&quot;steve&quot;</span>: <span class="number">12000</span>,</span><br><span class="line">        <span class="string">&quot;jamie&quot;</span>: <span class="number">15000</span>,</span><br><span class="line">        <span class="string">&quot;mike&quot;</span>: <span class="number">9000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;map before deletion&quot;</span>, employeeSalary)</span><br><span class="line">    <span class="built_in">delete</span>(employeeSalary, <span class="string">&quot;steve&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;map after deletion&quot;</span>, employeeSalary)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/u0WCB-Ta_dB">Run in playground</a></p><p>上面的程序删除了键 <code>steve</code>，并且打印了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map before deletion map[steve:12000 jamie:15000 mike:9000]</span><br><span class="line">map after deletion map[mike:9000 jamie:15000]</span><br></pre></td></tr></table></figure><p>如果我们试图删除一个不存在于 map 中的键，将不会出现运行时错误。</p><h2 id="结构体-map"><a href="#结构体-map" class="headerlink" title="结构体 map"></a>结构体 map</h2><p>到目前为止，我们只在地图中存储了雇员的工资。如果我们也能在地图中存储每个雇员的国家，那不是很好吗？这可以通过使用一个结构体 map 来实现。雇员可以被表示为一个包含工资和国家字段的结构，它们将以字符串键和结构值存储在 map 中。让我们写一个程序来了解如何做到这一点。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> employee <span class="keyword">struct</span> &#123;</span><br><span class="line">    salary  <span class="type">int</span></span><br><span class="line">    country <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    emp1 := employee&#123;</span><br><span class="line">        salary:  <span class="number">12000</span>,</span><br><span class="line">        country: <span class="string">&quot;USA&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    emp2 := employee&#123;</span><br><span class="line">        salary:  <span class="number">14000</span>,</span><br><span class="line">        country: <span class="string">&quot;Canada&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    emp3 := employee&#123;</span><br><span class="line">        salary:  <span class="number">13000</span>,</span><br><span class="line">        country: <span class="string">&quot;India&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    employeeInfo := <span class="keyword">map</span>[<span class="type">string</span>]employee&#123;</span><br><span class="line">        <span class="string">&quot;Steve&quot;</span>: emp1,</span><br><span class="line">        <span class="string">&quot;Jamie&quot;</span>: emp2,</span><br><span class="line">        <span class="string">&quot;Mike&quot;</span>:  emp3,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> name, info := <span class="keyword">range</span> employeeInfo &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Employee: %s Salary:$%d  Country: %s\n&quot;</span>, name, info.salary, info.country)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/wbGhkyZld1a">Run in playground</a></p><p>在上述程序中，<code>employee</code> 结构包含 <code>salary</code> 和 <code>country</code> 字段。我们创建了三个雇员<code>emp1</code>, <code>emp2</code> 和 <code>emp3</code>。</p><p>我们用我们创建的三个雇员初始化一个键类型为 <code>string</code>、值类型为 <code>employee</code> 的地图。</p><p>这个程序将打印。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Employee: Mike Salary:$13000  Country: India</span><br><span class="line">Employee: Steve Salary:$12000  Country: USA</span><br><span class="line">Employee: Jamie Salary:$14000  Country: Canada</span><br></pre></td></tr></table></figure><h2 id="map-的长度"><a href="#map-的长度" class="headerlink" title="map 的长度"></a>map 的长度</h2><p>map 的长度可以用 <a href="https://golang.org/pkg/builtin/#len">len</a>函数来确定。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    employeeSalary := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;</span><br><span class="line">        <span class="string">&quot;steve&quot;</span>: <span class="number">12000</span>,</span><br><span class="line">        <span class="string">&quot;jamie&quot;</span>: <span class="number">15000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;length is&quot;</span>, <span class="built_in">len</span>(employeeSalary))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/vDxsqn6g-0p">Run in playground</a></p><p>上面程序中的 <code>len(employeeSalary)</code> 返回 map 长度。上面的程序打印出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">length is 2</span><br></pre></td></tr></table></figure><h2 id="map-是引用类型"><a href="#map-是引用类型" class="headerlink" title="map 是引用类型"></a>map 是引用类型</h2><p>与切片类似，map 是引用类型。当一个 map 被分配给一个新的变量时，它们都指向同一个内部数据结构。因此，在一个中的变化将反映在另一个中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    employeeSalary := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;</span><br><span class="line">        <span class="string">&quot;steve&quot;</span>: <span class="number">12000</span>,</span><br><span class="line">        <span class="string">&quot;jamie&quot;</span>: <span class="number">15000</span>,</span><br><span class="line">        <span class="string">&quot;mike&quot;</span>: <span class="number">9000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Original employee salary&quot;</span>, employeeSalary)</span><br><span class="line">    modified := employeeSalary</span><br><span class="line">    modified[<span class="string">&quot;mike&quot;</span>] = <span class="number">18000</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Employee salary changed&quot;</span>, employeeSalary)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/hWouI1KvEb_i">Run in playground</a></p><p>在上述程序中，<code>employeeSalary</code> 被分配到 <code>modified</code>。在下一行中，<code>mike</code> 的工资在 <code>modified</code> map 中被改为<code>18000</code>。Mike 的工资现在在 <code>employeeSalary</code> 中也是 <code>18000</code>。该程序输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Original employee salary map[jamie:15000 mike:9000 steve:12000]</span><br><span class="line">Employee salary changed map[jamie:15000 mike:18000 steve:12000]</span><br></pre></td></tr></table></figure><p>当 map 作为参数传递给函数时也是类似的情况。当在函数中对 map 做任何改变时，它对调用者也是可见的。</p><h2 id="map-相等性"><a href="#map-相等性" class="headerlink" title="map 相等性"></a>map 相等性</h2><p>map 不能使用 <code>==</code> 操作符进行比较。<code>==</code> 只能用于检查一个 map 是否为<code>nil</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    map1 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;</span><br><span class="line">        <span class="string">&quot;one&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;two&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    map2 := map1</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> map1 == map2 &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/MALqDyWkcT">Run in playground</a></p><p>上述程序将无法编译，错误为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invalid operation: map1 == map2 (map can only be compared to nil)</span><br></pre></td></tr></table></figure><p>检查两个 map 是否相等的一种方法是逐一比较每个 map 的各个元素。另一种方法是使用 <a href="https://golangbot.com/reflection/">反射</a>。我鼓励你为此写一个程序，并使其发挥作用。</p><p>我已经把我们讨论过的所有概念编成了一个程序。你可以从 <a href="https://github.com/golangbot/maps">github</a> 下载它。</p><p>至此，本教程结束。希望你喜欢它。请留下您的评论。</p><blockquote><p>原文地址 <a href="https://golangbot.com/maps/">Golang Maps Tutorial</a><br>原文作者：<a href="https://golangbot.com/about/">Naveen Ramanathan</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">map 是 Go 中的一个内置类型，用于存储键值对。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/categories/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/categories/Golang/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Golang" scheme="https://youngjuning.js.org/tags/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/tags/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Go Map" scheme="https://youngjuning.js.org/tags/Go-Map/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言系列教程の参数可变的函数</title>
    <link href="https://youngjuning.js.org/f4c08ab26cae/"/>
    <id>https://youngjuning.js.org/f4c08ab26cae/</id>
    <published>2023-03-19T07:12:00.000Z</published>
    <updated>2023-03-26T15:04:38.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是参数可变的函数？"><a href="#什么是参数可变的函数？" class="headerlink" title="什么是参数可变的函数？"></a>什么是参数可变的函数？</h2><p>一般来说，函数只接受固定数量的参数。参数可变的函数是一个接受可变参数的函数。如果一个函数定义的最后一个参数前面有省略号 **…**，那么该函数可以接受该参数的任何数量的参数。</p><p><strong>只有一个函数的最后一个参数可以是可变的。我们将在本教程的下一节中了解为什么是这样的情况。</strong></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(a <span class="type">int</span>, b ...<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的函数中，参数 <code>b</code> 是可变的，因为它的前缀是省略号，它可以接受任何数量的参数。这个函数可以通过使用语法来调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 将一个参数 `2` 传递给 b</span></span><br><span class="line">hello(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>) <span class="comment">// 将参数 6、7、8 和 9 传递给 b</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们调用 <code>hello</code>，参数 <code>b</code> 是一个参数 <code>2</code>。1 中，我们调用 <code>hello</code>，参数 <code>b</code> 是一个参数 <code>2</code>，我们在下一行向 <code>b</code> 传递四个参数 <code>6, 7, 8, 9</code>。</p><p>也可以向一个变量函数传递零参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们调用 <code>hello</code> 时，<code>b</code> 的参数为零。这是很好的。</p><p>现在我想你已经明白了为什么变量参数应该只在最后一个。</p><p>让我们试着让 <code>hello</code> 函数的第一个参数变成变量。</p><p>语法将是这样的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(b ...<span class="type">int</span>, a <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的函数中，不可能向参数 <code>a</code> 传递参数，因为无论我们传递什么参数，都会被分配给第一个参数 <code>b</code>，因为它是变元的。因此，变量参数只能出现在函数定义的最后。上述函数将无法编译，错误为 <code>syntax error: cannot use ... with non-final parameter b</code>。</p><h2 id="例子和了解变量函数的工作原理"><a href="#例子和了解变量函数的工作原理" class="headerlink" title="例子和了解变量函数的工作原理"></a>例子和了解变量函数的工作原理</h2><p>让我们来创建我们自己的变量函数。我们将编写一个简单的程序来查找输入的整数列表中是否存在一个整数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">(num <span class="type">int</span>, nums ...<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;type of nums is %T\n&quot;</span>, nums)</span><br><span class="line">    found := <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span> v == num &#123;</span><br><span class="line">            fmt.Println(num, <span class="string">&quot;found at index&quot;</span>, i, <span class="string">&quot;in&quot;</span>, nums)</span><br><span class="line">            found = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !found &#123;</span><br><span class="line">        fmt.Println(num, <span class="string">&quot;not found in &quot;</span>, nums)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    find(<span class="number">89</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">95</span>)</span><br><span class="line">    find(<span class="number">45</span>, <span class="number">56</span>, <span class="number">67</span>, <span class="number">45</span>, <span class="number">90</span>, <span class="number">109</span>)</span><br><span class="line">    find(<span class="number">78</span>, <span class="number">38</span>, <span class="number">56</span>, <span class="number">98</span>)</span><br><span class="line">    find(<span class="number">87</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/7occymiS6s">Run in playground</a></p><p>在上面的程序中，<code>func find(num int, nums ...int)</code> 接受参数 <code>nums</code> 的数量不定。在函数 <em>find</em> 中，<code>nums</code> 的类型是 <code>[]int</code>，即一个整数切片。</p><p>变量函数的工作方式是将变量参数的数量转换为变量参数的类型的切片。例如，在上面程序的中，<code>find</code> 函数的变量参数数是 89、90、95。查找函数期望一个变量 <code>int</code> 参数。因此，这三个参数将被编译器转换为 <code>int</code> 类型的切片 <code>[]int&#123;89, 90, 95&#125;</code>，然后它将被传递给 <code>find</code> 函数。</p><p><code>for</code> 的循环是在 <code>f</code> 的基础上进行的。<code>for</code> 循环在 <code>nums</code> 切片上运行，如果 <code>num</code> 存在于切片中，则打印出它的位置。如果没有，则打印出没有找到这个数字。</p><p>上述程序的输出。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> of nums is []int</span><br><span class="line">89 found at index 0 <span class="keyword">in</span> [89 90 95]</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> of nums is []int</span><br><span class="line">45 found at index 2 <span class="keyword">in</span> [56 67 45 90 109]</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> of nums is []int</span><br><span class="line">78 not found <span class="keyword">in</span>  [38 56 98]</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> of nums is []int</span><br><span class="line">87 not found <span class="keyword">in</span>  []</span><br></pre></td></tr></table></figure><p>在上述程序中，<code>find</code> 函数的调用只有一个参数。我们没有向变量 <code>nums ...int</code> 参数传递任何参数。正如前面所讨论的，这是完全合法的，在这种情况下，<code>nums</code> 将是一个长度和容量为 0 的 <code>nil</code> 切片。</p><h2 id="切片参数-vs-可变参数"><a href="#切片参数-vs-可变参数" class="headerlink" title="切片参数 vs 可变参数"></a>切片参数 vs 可变参数</h2><p>我们现在肯定应该有一个问题在你的脑海中徘徊。在上一节中，我们了解到函数的变量参数实际上是转换了一个切片。那么，既然我们可以用切片实现同样的功能，为什么还要用变量函数呢？我在下面用切片重写了上面的程序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">(num <span class="type">int</span>, nums []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;type of nums is %T\n&quot;</span>, nums)</span><br><span class="line">    found := <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span> v == num &#123;</span><br><span class="line">            fmt.Println(num, <span class="string">&quot;found at index&quot;</span>, i, <span class="string">&quot;in&quot;</span>, nums)</span><br><span class="line">            found = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !found &#123;</span><br><span class="line">        fmt.Println(num, <span class="string">&quot;not found in &quot;</span>, nums)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    find(<span class="number">89</span>, []<span class="type">int</span>&#123;<span class="number">89</span>, <span class="number">90</span>, <span class="number">95</span>&#125;)</span><br><span class="line">    find(<span class="number">45</span>, []<span class="type">int</span>&#123;<span class="number">56</span>, <span class="number">67</span>, <span class="number">45</span>, <span class="number">90</span>, <span class="number">109</span>&#125;)</span><br><span class="line">    find(<span class="number">78</span>, []<span class="type">int</span>&#123;<span class="number">38</span>, <span class="number">56</span>, <span class="number">98</span>&#125;)</span><br><span class="line">    find(<span class="number">87</span>, []<span class="type">int</span>&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/rG-XRL3yycJ">Run in playground</a></p><p>以下是使用可变参数而不是切片的优点。</p><ol><li>不需要在每次函数调用时创建一个片断。如果你看一下上面的程序，我们在每次函数调用时创建了新的分片。当使用变量函数时，可以避免这种额外的片断创建。</li><li>在上述程序中，我们创建了一个空的切片，以满足 <code>find</code> 函数的签名。在参数可变函数的情况下，这完全没有必要。当使用变量函数时，这一行可以直接用 <code>find(87)</code>。</li><li>我个人认为，有变量函数的程序比有切片的程序更具可读性 :)</li></ol><h2 id="Append-是一个变量函数"><a href="#Append-是一个变量函数" class="headerlink" title="Append 是一个变量函数"></a>Append 是一个变量函数</h2><p>你有没有想过，标准库中的 append 函数是如何将数值追加到一个切片中的，它可以接受任何数量的参数。这是因为它是一个变量函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(slice []Type, elems ...Type)</span></span> []Type</span><br></pre></td></tr></table></figure><p>以上是 <code>append</code> 函数的定义。在这个定义中，<code>elems</code> 是一个变量参数。因此 append 可以接受不同数量的参数。</p><h2 id="将一个切片传递给一个参数可变的函数"><a href="#将一个切片传递给一个参数可变的函数" class="headerlink" title="将一个切片传递给一个参数可变的函数"></a>将一个切片传递给一个参数可变的函数</h2><p>让我们把一个切片传递给一个变量函数，并从下面的例子中找出会发生什么。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">(num <span class="type">int</span>, nums ...<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;type of nums is %T\n&quot;</span>, nums)</span><br><span class="line">    found := <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span> v == num &#123;</span><br><span class="line">            fmt.Println(num, <span class="string">&quot;found at index&quot;</span>, i, <span class="string">&quot;in&quot;</span>, nums)</span><br><span class="line">            found = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !found &#123;</span><br><span class="line">        fmt.Println(num, <span class="string">&quot;not found in &quot;</span>, nums)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    nums := []<span class="type">int</span>&#123;<span class="number">89</span>, <span class="number">90</span>, <span class="number">95</span>&#125;</span><br><span class="line">    find(<span class="number">89</span>, nums)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/A-DNilpH2L">Run in playground</a></p><p>我们将一个切片传递给一个期望有可变数量参数的函数。</p><p>这是不可行的。上述程序将失败，编译错误为 <code>./prog.go:23:10: cannot use nums (type []int) as type int in argument to find</code>。</p><p>为什么会出现这种情况呢？嗯，这是很直接的问题。下面提供了 <code>find</code> 函数的签名。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">(num <span class="type">int</span>, nums ...<span class="type">int</span>)</span></span></span><br></pre></td></tr></table></figure><p>根据变量函数的定义，<code>nums ...int</code>意味着它将接受可变数量的<code>int</code>类型的参数。</p><p>在上面程序中，<code>nums</code> 是 <code>[]int</code> 切片，被传递给 <code>find</code> 函数，该函数期待一个变量 <code>int</code> 参数。正如我们已经讨论过的，这些变量参数将被转换为 <code>int</code> 类型的切片，因为 <code>find</code> 期待变量 <code>int</code> 参数。在这种情况下，<code>nums</code> 已经是一个 <code>[]int</code> 分片，编译器试图创建一个新的 <code>[]int</code>，也就是说，编译器试图做到:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find(<span class="number">89</span>, []<span class="type">int</span>&#123;nums&#125;)</span><br></pre></td></tr></table></figure><p>这将会失败，因为 <code>nums</code> 是一个 <code>[]int</code> 而不是一个 <code>int</code>。</p><p>那么有没有一种方法可以将一个切片传递给一个变量函数呢？答案是肯定的。</p><p>有一个语法糖可以用来传递一个分片到变量函数中。你必须用省略号 <code>...</code> 作为切片的后缀，如果这样做了，切片就会直接传递给函数，而不需要创建新的切片。</p><p>在上面的程序中，如果你把 <code>find(89, nums)</code> 替换为 <code>find(89, nums...)</code>，程序将被编译并打印出以下输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type of nums is []int</span><br><span class="line">89 found at index 0 in [89 90 95]</span><br></pre></td></tr></table></figure><p>以下是完整的方案供您参考。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">(num <span class="type">int</span>, nums ...<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;type of nums is %T\n&quot;</span>, nums)</span><br><span class="line">    found := <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span> v == num &#123;</span><br><span class="line">            fmt.Println(num, <span class="string">&quot;found at index&quot;</span>, i, <span class="string">&quot;in&quot;</span>, nums)</span><br><span class="line">            found = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !found &#123;</span><br><span class="line">        fmt.Println(num, <span class="string">&quot;not found in &quot;</span>, nums)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    nums := []<span class="type">int</span>&#123;<span class="number">89</span>, <span class="number">90</span>, <span class="number">95</span>&#125;</span><br><span class="line">    find(<span class="number">89</span>, nums...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/IvzwhzhFsT">Run in playground</a></p><h3 id="明白了吗？"><a href="#明白了吗？" class="headerlink" title="明白了吗？"></a>明白了吗？</h3><p>只要确保你知道当你在一个参数可变的函数内修改一个切片时你在做什么。</p><p>让我们看一个简单的例子。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">change</span><span class="params">(s ...<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    s[<span class="number">0</span>] = <span class="string">&quot;Go&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    welcome := []<span class="type">string</span>&#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;</span><br><span class="line">    change(welcome...)</span><br><span class="line">    fmt.Println(welcome)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/R0GsuW7rdd">Run in playground</a></p><p>你认为上述程序的输出会是什么？如果你认为会是 <code>[Go world]</code>，恭喜你！你已经理解了参数可变的函数和切片。如果你弄错了，也没什么大不了的，让我解释一下我们是如何得到这个输出的。</p><p>在上面程序中，我们使用了语法糖 <code>...</code>，并将切片作为变量参数传递给<code>change</code> 函数。</p><p>正如我们已经讨论过的，如果使用 <code>...</code>，<code>welcome</code> 切片本身将作为一个参数被传递，而不会创建一个新的切片。因此 <code>welcome</code> 将作为参数传递给 <code>change</code> 函数。</p><p>在 <code>change</code> 函数中，分片的第一个元素被改变为 <code>Go</code>。因此，这个程序输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Go world]</span><br></pre></td></tr></table></figure><p>这里还有一个了解参数可变的函数的程序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">change</span><span class="params">(s ...<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    s[<span class="number">0</span>] = <span class="string">&quot;Go&quot;</span></span><br><span class="line">    s = <span class="built_in">append</span>(s, <span class="string">&quot;playground&quot;</span>)</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    welcome := []<span class="type">string</span>&#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;</span><br><span class="line">    change(welcome...)</span><br><span class="line">    fmt.Println(welcome)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/WdbFIkdLoe">Run in playground</a></p><p>我想把它作为一个练习，让你弄清楚上述程序是如何工作的</p><p>参数可变的函数就介绍到这里。谢谢你的阅读。请留下您宝贵的反馈和意见。祝你有个愉快的一天。</p><blockquote><p>原文地址 <a href="https://golangbot.com/variadic-functions/">Variadic Functions</a><br>原文作者：<a href="https://golangbot.com/about/">Naveen Ramanathan</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">一般来说，函数只接受固定数量的参数。参数可变的函数是一个接受可变参数的函数。如果一个函数定义的最后一个参数前面有省略号 ...，那么该函数可以接受该参数的任何数量的参数。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/categories/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/categories/Golang/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Golang" scheme="https://youngjuning.js.org/tags/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/tags/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Go 参数可变的函数" scheme="https://youngjuning.js.org/tags/Go-%E5%8F%82%E6%95%B0%E5%8F%AF%E5%8F%98%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言系列教程の切片</title>
    <link href="https://youngjuning.js.org/26829e2dd29f/"/>
    <id>https://youngjuning.js.org/26829e2dd29f/</id>
    <published>2023-03-19T07:11:30.000Z</published>
    <updated>2023-03-26T15:04:38.324Z</updated>
    
    <content type="html"><![CDATA[<p>切片是数组上面的一个方便、灵活和强大的包装器。切片并不拥有自己的任何数据。它们只是对现有数组的引用。</p><h2 id="创建切片"><a href="#创建切片" class="headerlink" title="创建切片"></a>创建切片</h2><p>一个具有 T 类型元素的切片用 <code>[]T</code> 表示。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> b []<span class="type">int</span> = a[<span class="number">1</span>:<span class="number">4</span>] <span class="comment">// 创建一个 a[1] 到 a[3] 的切片</span></span><br><span class="line">    fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/Za6w5eubBB">Run in playground</a></p><p>语法<code>a[start:end]</code>从数组 <code>a</code> 中创建一个切片，从索引 <code>start</code> 开始到索引 <code>end</code>-1<code>。所以在上述程序中，</code>a[1:4]<code>创建了一个从索引 1 到 3 的数组</code>a<code>的切片。因此切片</code>b<code>的值是</code>[77 78 79]&#96;。</p><p>让我们来看看创建切片的另一种方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := []<span class="type">int</span>&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125; <span class="comment">// 创建一个数组并返回切片的索引</span></span><br><span class="line">    fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/_Z97MgXavA">Run in playground</a></p><p>在上述程序中，<code>c := []int&#123;6, 7, 8&#125;</code> 创建了一个包含 3 个整数的数组，并返回一个存储在 c 中的切片引用。</p><h3 id="修改一个切片"><a href="#修改一个切片" class="headerlink" title="修改一个切片"></a>修改一个切片</h3><p>一个切片并不拥有自己的任何数据。它只是底层数组的一个代表。对切片所做的任何修改都会反映在底层数组中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    darr := [...]<span class="type">int</span>&#123;<span class="number">57</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">82</span>, <span class="number">100</span>, <span class="number">78</span>, <span class="number">67</span>, <span class="number">69</span>, <span class="number">59</span>&#125;</span><br><span class="line">    dslice := darr[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">    fmt.Println(<span class="string">&quot;array before&quot;</span>,darr)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> dslice &#123;</span><br><span class="line">        dslice[i]++</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;array after&quot;</span>,darr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/6FinudNf1k">Run in playground</a></p><p>在上述程序中，我们从数组的索引 2、3、4 创建 <code>dslice</code>。for 循环将这些索引的值增加 1。当我们在 for 循环后打印数组时，我们可以看到切片的变化已经反映在数组中。该程序的输出是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array before [57 89 90 82 100 78 67 69 59]</span><br><span class="line">array after [57 89 91 83 101 78 67 69 59]</span><br></pre></td></tr></table></figure><p>当一些切片共享同一个底层数组时，每个切片的变化都会反映在数组中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    numa := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">78</span>, <span class="number">79</span> ,<span class="number">80</span>&#125;</span><br><span class="line">    nums1 := numa[:] <span class="comment">// 创建一个包含数组中所有元素的片断</span></span><br><span class="line">    nums2 := numa[:]</span><br><span class="line">    fmt.Println(<span class="string">&quot;array before change 1&quot;</span>,numa)</span><br><span class="line">    nums1[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;array after modification to slice nums1&quot;</span>, numa)</span><br><span class="line">    nums2[<span class="number">1</span>] = <span class="number">101</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;array after modification to slice nums2&quot;</span>, numa)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/mdNi4cs854">Run in playground</a></p><p>在 <code>numa[:]</code> 中，缺少开始和结束值。start 和 end 的默认值分别为 <code>0</code> 和 <code>len(numa)</code>。两个切片 <code>nums1</code> 和 <code>nums2</code> 共享同一个数组。该程序的输出是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array before change 1 [78 79 80]</span><br><span class="line">array after modification to slice nums1 [100 79 80]</span><br><span class="line">array after modification to slice nums2 [100 101 80]</span><br></pre></td></tr></table></figure><p>从输出结果来看，很明显，当切片共享同一个数组时。对切片所做的修改会反映在数组中。</p><h3 id="切片的长度和容量"><a href="#切片的长度和容量" class="headerlink" title="切片的长度和容量"></a>切片的长度和容量</h3><p>切片的长度是切片中元素的数量。<strong>切片的容量是指从创建分片的索引开始的底层数组中的元素数</strong>。</p><p>让我们写一些代码来更好地理解这一点。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fruitarray := [...]<span class="type">string</span>&#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;grape&quot;</span>, <span class="string">&quot;mango&quot;</span>, <span class="string">&quot;water melon&quot;</span>, <span class="string">&quot;pine apple&quot;</span>, <span class="string">&quot;chikoo&quot;</span>&#125;</span><br><span class="line">    fruitslice := fruitarray[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;length of slice %d capacity %d&quot;</span>, <span class="built_in">len</span>(fruitslice), <span class="built_in">cap</span>(fruitslice)) <span class="comment">// 切的长度为 2，容量为 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/a1WOcdv827">Run in playground</a></p><p>在上面的程序中，<code>fruitslice</code> 是由 <code>fruitarray</code> 的索引 1 和 2 创建的。因此，<code>fruitslice</code> 的长度是 2。</p><p><code>fruitarray</code> 的长度是 7。<code>fruiteslice</code> 是从 <code>fruitarray</code> 的索引 1 创建的。因此，<code>fruitslice</code> 的容量是 <code>fruitarray&#39; 中从索引 1 开始的元素数量，即从</code>orange<code> 开始，这个值是</code>6<code>。因此，</code>fruitslice&#96; 的容量是 6。<a href="https://play.golang.org/p/a1WOcdv827">程序</a> 打印出 <strong>length of slice 2 capacity 6</strong>。</p><p>一个切片可以被重新切割到它的容量。任何超过这个容量的部分都会导致程序出现运行时错误。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fruitarray := [...]<span class="type">string</span>&#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;grape&quot;</span>, <span class="string">&quot;mango&quot;</span>, <span class="string">&quot;water melon&quot;</span>, <span class="string">&quot;pine apple&quot;</span>, <span class="string">&quot;chikoo&quot;</span>&#125;</span><br><span class="line">    fruitslice := fruitarray[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;length of slice %d capacity %d\n&quot;</span>, <span class="built_in">len</span>(fruitslice), <span class="built_in">cap</span>(fruitslice)) <span class="comment">// 长度为 2，容量为 6</span></span><br><span class="line">    fruitslice = fruitslice[:<span class="built_in">cap</span>(fruitslice)] <span class="comment">// 重新分割切片，直到其容量。</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;After re-slicing length is&quot;</span>,<span class="built_in">len</span>(fruitslice), <span class="string">&quot;and capacity is&quot;</span>,<span class="built_in">cap</span>(fruitslice))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/GcNzOOGicu">Run in playground</a></p><p>在上述程序中，<code>fruitslice</code> 被重新f分割成到其容量。上述程序的输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">length of slice 2 capacity 6</span><br><span class="line">After re-slicing length is 6 and capacity is 6</span><br></pre></td></tr></table></figure><h3 id="使用-make-创建切片"><a href="#使用-make-创建切片" class="headerlink" title="使用 make 创建切片"></a>使用 make 创建切片</h3><p><em>func make([]T, len, cap) []T</em> 可以通过传递类型、长度和容量来创建一个切片。容量参数是可选的，默认为长度。make 函数创建一个数组，并返回对它的切片的引用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/M4OqxzerxN">Run in playground</a></p><p>当使用 make 创建一个切片时，这些值默认为零。上述程序将输出 <code>[0 0 0 0]</code>。</p><blockquote><p>原文地址 <a href="https://golangbot.com/arrays-and-slices/">Arrays and Slices</a><br>原文作者：<a href="https://golangbot.com/about/">Naveen Ramanathan</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">切片是数组上面的一个方便、灵活和强大的包装器。切片并不拥有自己的任何数据。它们只是对现有数组的引用。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/categories/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/categories/Golang/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Golang" scheme="https://youngjuning.js.org/tags/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/tags/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Go 切片" scheme="https://youngjuning.js.org/tags/Go-%E5%88%87%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言系列教程の数组</title>
    <link href="https://youngjuning.js.org/e647c735eac5/"/>
    <id>https://youngjuning.js.org/e647c735eac5/</id>
    <published>2023-03-19T07:11:00.000Z</published>
    <updated>2023-03-26T15:04:38.328Z</updated>
    
    <content type="html"><![CDATA[<p>数组是属于同一类型的元素的集合。 例如，整数 5、8、9、79、76 的集合构成一个数组。 Go 中不允许混合不同类型的值，例如同时包含字符串和整数的数组。</p><h2 id="数组声明"><a href="#数组声明" class="headerlink" title="数组声明"></a>数组声明</h2><p>数组属于类型 <code>[n]T</code>。 <code>n</code> 表示数组中元素的数量，<code>T</code> 表示每个元素的类型。 元素的数量 <code>n</code> 也是类型的一部分（我们将在稍后更详细地讨论这一点。）</p><p>声明数组有不同的方法。 让我们一一看看它们。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a [<span class="number">3</span>]<span class="type">int</span> <span class="comment">// 长度为 3 的数组</span></span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/Zvgh82u0ej">Run in playground</a></p><p><code>var a[3]int</code> 声明了一个长度为 3 的整数数组。数组中的所有元素都会自动分配数组类型的零值。 在这种情况下，<code>a</code> 是一个整数数组，因此 <code>a</code> 的所有元素都分配给 <code>0</code>，即 int 的零值。 运行上面的程序会打印</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0 0 0]</span><br></pre></td></tr></table></figure><p>数组的索引从 <code>0</code> 开始，到 <code>length - 1</code> 结束。 让我们为上面的数组分配一些值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a [<span class="number">3</span>]<span class="type">int</span> <span class="comment">// 长度为 3 的 int 数组</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">12</span> <span class="comment">// 数组索引从 0 开始</span></span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">78</span></span><br><span class="line">    a[<span class="number">2</span>] = <span class="number">50</span></span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/WF0Uj8sv39">Run in playground</a></p><p>a[0] 为数组的第一个元素赋值。 该程序将打印</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[12 78 50]</span><br></pre></td></tr></table></figure><p>让我们使用 <strong>短声明</strong> 来创建相同的数组。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">12</span>, <span class="number">78</span>, <span class="number">50</span>&#125; <span class="comment">// 创建数组的短声明</span></span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/NKOV04zgI6">Run in playground</a></p><p>上面的程序将打印相同的输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[12 78 50]</span><br></pre></td></tr></table></figure><p>使用短声明时，不必为数组中的所有元素分配一个值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">12</span>&#125;</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/AdPH0kXRly">Run in playground</a></p><p>在上面的程序中，<code>a := [3]int&#123;12&#125;</code> 声明了一个长度为 3 的数组，但只提供了一个值 <code>12</code>。 其余 2 个元素自动分配为 <code>0</code>。 该程序将打印</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[12 0 0]</span><br></pre></td></tr></table></figure><p>你甚至可以忽略声明中数组的长度，并用 <code>...</code> 替换它，让编译器自动计算长度。 代码实现如下。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [...]<span class="type">int</span>&#123;<span class="number">12</span>, <span class="number">78</span>, <span class="number">50</span>&#125; <span class="comment">// ... 让编译器决定数组长度</span></span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/_fVmr6KGDh">Run in playground</a></p><p><strong>数组的大小是类型的一部分。</strong> 因此 <code>[5]int</code> 和 <code>[25]int</code> 是不同的类型。 因此，无法调整数组大小。 不要担心这个限制，因为可以使用 <code>切片</code> 来突破这个限制。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">78</span>, <span class="number">8</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> b [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">    b = a <span class="comment">// 不可能成立，因为 `[3]int` 和 `[5]int` 是不同的类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/kBdot3pXSB">Run in playground</a></p><p>在上面的程序中，我们试图将类型为 <code>[3]int</code> 的变量分配给类型为 <code>[5]int</code> 的变量，这是不允许的，因此编译器将打印以下错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./prog.go:6:7: cannot use a (type [3]int) as type [5]int in assignment</span><br></pre></td></tr></table></figure><h2 id="数组是值类型"><a href="#数组是值类型" class="headerlink" title="数组是值类型"></a>数组是值类型</h2><p>Go 中的数组是值类型而不是引用类型。 这意味着当它们被分配给一个新变量时，原始数组的副本被分配给新变量。 如果对新变量进行了更改，它将不会反映在原始数组中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [...]<span class="type">string</span>&#123;<span class="string">&quot;USA&quot;</span>, <span class="string">&quot;China&quot;</span>, <span class="string">&quot;India&quot;</span>, <span class="string">&quot;Germany&quot;</span>, <span class="string">&quot;France&quot;</span>&#125;</span><br><span class="line">    b := a <span class="comment">// a 的副本被分配给 b</span></span><br><span class="line">    b[<span class="number">0</span>] = <span class="string">&quot;Singapore&quot;</span> <span class="comment">// b 的第一个元素被改变为 Singapore，这不会影响到 a</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;a is &quot;</span>, a)</span><br><span class="line">    fmt.Println(<span class="string">&quot;b is &quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/-ncGk1mqPd">Run in playground</a></p><p>程序会打印出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a is [USA China India Germany France]</span><br><span class="line">b is [Singapore China India Germany France]</span><br></pre></td></tr></table></figure><p>同样，当数组作为参数传递给函数时，它们是按值传递的，原始数组不变。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeLocal</span><span class="params">(num [5]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    num[<span class="number">0</span>] = <span class="number">55</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;inside function &quot;</span>, num)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    num := [...]<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>&#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;before passing to function &quot;</span>, num)</span><br><span class="line">    changeLocal(num) <span class="comment">// num 是按值传递的，因此不会因为函数调用而改变</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;after passing to function &quot;</span>, num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/e3U75Q8eUZ">Run in playground</a></p><p>该程序将打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before passing to function  [5 6 7 8 8]</span><br><span class="line">inside function  [55 6 7 8 8]</span><br><span class="line">after passing to function  [5 6 7 8 8]</span><br></pre></td></tr></table></figure><h2 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h2><p>数组的长度是通过将数组作为参数传递给 <code>len</code> 函数来得到的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [...]<span class="type">float64</span>&#123;<span class="number">67.7</span>, <span class="number">89.8</span>, <span class="number">21</span>, <span class="number">78</span>&#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;length of a is&quot;</span>,<span class="built_in">len</span>(a))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/UrIeNlS0RN">Run in playground</a></p><p>上面的程序会打印出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">length of a is 4</span><br></pre></td></tr></table></figure><h3 id="使用-range-迭代数组"><a href="#使用-range-迭代数组" class="headerlink" title="使用 range 迭代数组"></a>使用 range 迭代数组</h3><p><code>for</code> 循环可用于迭代数组的元素。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [...]<span class="type">float64</span>&#123;<span class="number">67.7</span>, <span class="number">89.8</span>, <span class="number">21</span>, <span class="number">78</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(a); i++ &#123; <span class="comment">// 从 0 循环到数组的长度</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d th element of a is %.2f\n&quot;</span>, i, a[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/80ejSTACO6">Run in playground</a></p><p>上面的程序使用一个 <code>for</code> 循环来迭代数组的元素，从索引 <code>0</code> 到 <code>length of the array - 1</code>。 这个程序可以工作并且会打印</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 th element of a is 67.70</span><br><span class="line">1 th element of a is 89.80</span><br><span class="line">2 th element of a is 21.00</span><br><span class="line">3 th element of a is 78.00</span><br></pre></td></tr></table></figure><p>Go 通过使用 <code>for</code> 循环的 <strong>range</strong> 形式提供了一种更好、更简洁的方法来迭代数组。 <code>range</code> 返回索引和该索引处的值。 让我们使用 <code>range</code> 重写上面的代码。 我们还将找到数组所有元素的总和。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [...]<span class="type">float64</span>&#123;<span class="number">67.7</span>, <span class="number">89.8</span>, <span class="number">21</span>, <span class="number">78</span>&#125;</span><br><span class="line">    sum := <span class="type">float64</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> a &#123; <span class="comment">// range 同时返回索引和值</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d the element of a is %.2f\n&quot;</span>, i, v)</span><br><span class="line">        sum += v</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;\nsum of all elements of a&quot;</span>,sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/Ji6FRon36m">Run in playground</a></p><p>我们打印值并计算数组 <code>a</code> 的所有元素的总和。 程序的<strong>输出</strong>是，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0 the element of a is 67.70</span><br><span class="line">1 the element of a is 89.80</span><br><span class="line">2 the element of a is 21.00</span><br><span class="line">3 the element of a is 78.00</span><br><span class="line"></span><br><span class="line">sum of all elements of a 256.5</span><br></pre></td></tr></table></figure><p>如果你只想要该值而想要忽略索引，您可以通过用 <code>_</code> 空白标识符替换索引来实现。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> a &#123; <span class="comment">// 忽略索引</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 for 循环忽略了索引。 同样，值也可以忽略。</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>到目前为止我们创建的数组都是一维的。我们可以创建多维数组。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printarray</span><span class="params">(a [3][2]<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, v1 := <span class="keyword">range</span> a &#123;</span><br><span class="line">        <span class="keyword">for</span> _, v2 := <span class="keyword">range</span> v1 &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;%s &quot;</span>, v2)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [<span class="number">3</span>][<span class="number">2</span>]<span class="type">string</span>&#123;</span><br><span class="line">        &#123;<span class="string">&quot;lion&quot;</span>, <span class="string">&quot;tiger&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;pigeon&quot;</span>, <span class="string">&quot;peacock&quot;</span>&#125;, <span class="comment">// 这个逗号是必须的。 如果省略这个逗号，编译器会报错</span></span><br><span class="line">    &#125;</span><br><span class="line">    printarray(a)</span><br><span class="line">    <span class="keyword">var</span> b [<span class="number">3</span>][<span class="number">2</span>]<span class="type">string</span></span><br><span class="line">    b[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">&quot;apple&quot;</span></span><br><span class="line">    b[<span class="number">0</span>][<span class="number">1</span>] = <span class="string">&quot;samsung&quot;</span></span><br><span class="line">    b[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">&quot;microsoft&quot;</span></span><br><span class="line">    b[<span class="number">1</span>][<span class="number">1</span>] = <span class="string">&quot;google&quot;</span></span><br><span class="line">    b[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">&quot;AT&amp;T&quot;</span></span><br><span class="line">    b[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">&quot;T-Mobile&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    printarray(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/InchXI4yY8">Run in playground</a></p><p>上面的程序会打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lion tiger</span><br><span class="line">cat dog</span><br><span class="line">pigeon peacock</span><br><span class="line"></span><br><span class="line">apple samsung</span><br><span class="line">microsoft google</span><br><span class="line">AT&amp;T T-Mobile</span><br></pre></td></tr></table></figure><p>这就是数组。 尽管数组似乎足够灵活，但它们具有固定长度的限制。 无法增加数组的长度。而这正是 <strong>切片</strong> 擅长的。 事实上，在 Go 中，切片比传统数组更常见。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>关注公众号<code>洛竹早茶馆</code>，一个持续分享编程知识的地方。</p><ul><li><code>点赞</code>等于学会，<code>在看</code>等于精通</li><li>最后祝大家 2021 学习进步，升职加薪</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9752661d5474d8f8f4ae2584c288ac9~tplv-k3u1fbpfcp-zoom-1.image"></p><blockquote><p>原文地址 <a href="https://golangbot.com/arrays-and-slices/">Arrays and Slices</a><br>原文作者：<a href="https://golangbot.com/about/">Naveen Ramanathan</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">数组是属于同一类型的元素的集合。 例如，整数 5、8、9、79、76 的集合构成一个数组。 Go 中不允许混合不同类型的值，例如同时包含字符串和整数的数组。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/categories/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/categories/Golang/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Golang" scheme="https://youngjuning.js.org/tags/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/tags/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Go 数组" scheme="https://youngjuning.js.org/tags/Go-%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言教程系列のSwitch 语句</title>
    <link href="https://youngjuning.js.org/b3d3163f4bf0/"/>
    <id>https://youngjuning.js.org/b3d3163f4bf0/</id>
    <published>2023-03-19T07:10:00.000Z</published>
    <updated>2023-03-26T15:04:38.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="switch-语句是什么？"><a href="#switch-语句是什么？" class="headerlink" title="switch 语句是什么？"></a>switch 语句是什么？</h2><p><code>switch</code> 是一个条件语句，它对表达式进行求值并将其与可能的匹配列表进行比较，并执行相应的代码块。可以将其视为替换复杂的 <code>if</code> 语句的惯用方式。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><code>Talk is cheap,show you the example</code>。让我们从一个简单的示例开始，该示例将一个手指编号作为输入并输出该手指的名称。 例如，1 是拇指，2 是食指，依此类推。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    finger := <span class="number">4</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Finger %d is &quot;</span>, finger)</span><br><span class="line">    <span class="keyword">switch</span> finger &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Thumb&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Index&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Middle&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Ring&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Pinky&quot;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/94ktmJWlUom">Run in playground</a></p><p>在上面第 10 行的程序 <code>switch finger</code> 中，将 <code>finger</code> 的值与每个 <code>case</code> 语句进行比较。从上到下判断条件，并执行与表达式匹配的第一个分支。 在这种情况下，<code>finger</code> 的值为 <code>4</code>，因此输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Finger 4 is Ring</span><br></pre></td></tr></table></figure><h2 id="不允许重复的分支"><a href="#不允许重复的分支" class="headerlink" title="不允许重复的分支"></a>不允许重复的分支</h2><p>不允许重复使用具有相同常量值的分支。如果你尝试运行以下程序，则编译器将抛错 <code>./prog.go:19:7: duplicate case 4 in switch previous case at ./prog.go:17:7</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    finger := <span class="number">4</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Finger %d is &quot;</span>, finger)</span><br><span class="line">    <span class="keyword">switch</span> finger &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Thumb&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Index&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Middle&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Ring&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: <span class="comment">// 重复的分支</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;Another Ring&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Pinky&quot;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/7qrmR0hdvHH">Run in playground</a></p><h2 id="默认分支"><a href="#默认分支" class="headerlink" title="默认分支"></a>默认分支</h2><p>我们只有五个手指。如果输入不正确的手指编号会怎样？这时我们需要一个默认分支。当其他情况都不匹配时，将执行默认分支。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> finger := <span class="number">8</span>; finger &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Thumb&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Index&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Middle&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Ring&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Pinky&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">// 默认分支</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;incorrect finger number&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/Fq7U7SkHe1">Run in playground</a></p><p>在上面的程序中，<code>finger</code> 是 <code>8</code>，它与任何情况都不匹配，因此在默认情况下会打印 <code>incorrect finger number</code>。把 <code>default</code> 作为 <code>switch</code> 语句的最后一个分支是没有必要的。它可以存在于 <code>switch</code> 中的任何位置。</p><p>你可能还注意到 <code>finger</code> 声明中的微小变化。它在 <code>switch 语句中声明。 </code>switch<code>可以包含在计算表达式之前执行的可选语句。在第 8 行中，首先声明</code>finger<code>，然后在表达式中使用它。在这种情况下，</code>finger<code>的范围仅限于</code>switch&#96; 模块。</p><h2 id="多表达式分支"><a href="#多表达式分支" class="headerlink" title="多表达式分支"></a>多表达式分支</h2><p>通过用逗号将多个表达式分隔开，可以包含多个表达式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    letter := <span class="string">&quot;i&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Letter %s is a &quot;</span>, letter)</span><br><span class="line">    <span class="keyword">switch</span> letter &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;a&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;u&quot;</span>: <span class="comment">// 分支中的多个表达式</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;vowel&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;not a vowel&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/AAVSQK76Me7">Run in playground</a></p><p>上面的程序判断 <code>letter</code> 是否是元音。第 11 行中的代码 <code>case &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;:</code> 与任何元音匹配。由于 <code>i</code> 是元音，因此该程序会打印：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Letter i is a vowel</span><br></pre></td></tr></table></figure><h2 id="无表达式分支"><a href="#无表达式分支" class="headerlink" title="无表达式分支"></a>无表达式分支</h2><p>switch 中的表达式是可选的，可以省略。如果省略该表达式，则认为该 <code>switch</code> 为 <code>switch true</code>，并且对每个 <code>case</code> 表达式进行求值，并执行相应的代码块。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    num := <span class="number">75</span></span><br><span class="line">    <span class="keyword">switch</span> &#123; <span class="comment">// 表达式被省略</span></span><br><span class="line">    <span class="keyword">case</span> num &gt;= <span class="number">0</span> &amp;&amp; num &lt;= <span class="number">50</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d is greater than 0 and less than 50&quot;</span>, num)</span><br><span class="line">    <span class="keyword">case</span> num &gt;= <span class="number">51</span> &amp;&amp; num &lt;= <span class="number">100</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d is greater than 51 and less than 100&quot;</span>, num)</span><br><span class="line">    <span class="keyword">case</span> num &gt;= <span class="number">101</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d is greater than 100&quot;</span>, num)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/KPkwK0VdXII">Run in playground</a></p><p>在上面的程序中，<code>switch</code> 中不存在表达式，因此将其视为真，并判断每种情况。 第12行的 <code>case num&gt; = 51 &amp;&amp; num &lt;= 100:</code> 为 <code>true</code>，程序将打印：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">75 is greater than 51 and less than 100</span><br></pre></td></tr></table></figure><p>这种类型的 <code>switch</code> 可以看作是多个 <code>if else</code> 语句句的替代方法。</p><h2 id="Fallthrough"><a href="#Fallthrough" class="headerlink" title="Fallthrough"></a>Fallthrough</h2><p>在 Go 中，在执行分支后，控制权立即从 <code>switch</code> 语句中释放出来。<code>fallthrough</code> 语句用于将控制权转移到该分支执行后立即出现的分支的第一条语句。</p><p>让我们编写一个程序来理解 <code>fallthrough</code>。我们的程序将检查输入的数字是否小于 50、100 或 200。例如，如果输入 75，则程序将打印 75 小于 100 和 200。我们将使用 <code>fallthrough</code> 来实现。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">number</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    num := <span class="number">15</span> * <span class="number">5</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> num := number(); &#123; <span class="comment">// num 不是一个常量</span></span><br><span class="line">    <span class="keyword">case</span> num &lt; <span class="number">50</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d is lesser than 50\n&quot;</span>, num)</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> num &lt; <span class="number">100</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d is lesser than 100\n&quot;</span>, num)</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> num &lt; <span class="number">200</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d is lesser than 200&quot;</span>, num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/svGJAiswQj">Run in playground</a></p><p><code>switch</code> 和 <code>case</code> 表达式只能是常量。它们也可以在运行时进行计算。 在上面的程序中，第 14 行的 <code>num</code> 被初始化为函数 <code>number()</code> 的返回值。控制权位于 <code>switch</code> 内部，并对分支进行判断。第 18 行中的 <code>case num &lt;100:</code> 是正确的，程序将输出 <code>75 is lesser than 100</code>。下一条语句是 <code>fallthrough</code>。 当遇到 <code>fallthrough</code> 时，控制权将移至下一种情况的第一个语句，并打印 <code>75 is lesser than 200</code>。该程序的输出是：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">75 is lesser than 100</span><br><span class="line">75 is lesser than 200</span><br></pre></td></tr></table></figure><p><code>fallthrough</code> 应该是 <code>case</code> 中的最后一条语句。如果它位于中间的某个位置，则编译器将报错 <code>fallthrough statement out of place</code>。</p><h2 id="即使分支被计算为假，也会发生-Fallthrough"><a href="#即使分支被计算为假，也会发生-Fallthrough" class="headerlink" title="即使分支被计算为假，也会发生 Fallthrough"></a>即使分支被计算为假，也会发生 Fallthrough</h2><p>当使用 <code>fallthrough</code> 时要考虑一些细微之处。即使分支被计算为假，也会发生 Fallthrough。</p><p>请考虑以下程序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> num := <span class="number">25</span>; &#123;</span><br><span class="line">    <span class="keyword">case</span> num &lt; <span class="number">50</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d is lesser than 50\n&quot;</span>, num)</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> num &gt; <span class="number">100</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d is greater than 100\n&quot;</span>, num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/sjynQMXtnmY">Run in playground</a></p><p>在上述程序中，<code>num</code> 为 25，小于 50，因此第 9 行的情况为 <code>true</code>。第 11 行出现 <code>fallthrough</code>。行号中的下一个case <code>case num&gt; 100:</code>。由于 <code>num &lt; 100</code>，所以 12 是假的。但是 <code>fallthrough</code> 不考虑这一点。即使分支被计算为假，也会发生 Fallthrough。</p><p>上面的程序将打印：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">25 is lesser than 50</span><br><span class="line">25 is greater than 100</span><br></pre></td></tr></table></figure><p>因此，请确保你了解使用 <code>fallthrough</code> 时的操作。</p><p>还有一件事是，不能在 switch 的最后一种分支中下使用 <code>fallthrough</code>。 如果在最后一种情况下存在 <code>fallthrough</code>，则将导致以下编译错误。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cannot fallthrough final <span class="keyword">case</span> <span class="keyword">in</span> switch</span><br></pre></td></tr></table></figure><h2 id="switch-中的-switch"><a href="#switch-中的-switch" class="headerlink" title="switch 中的 switch"></a>switch 中的 switch</h2><p>可以使用 <code>break</code> 语句在 <code>switch</code> 完成之前提早终止它。 让我们将上面的示例修改为一个人为的示例，以了解 <code>break</code> 的工作原理。</p><p>让我们添加一个条件，如果 <code>num</code> 小于0，则 switch 应终止。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> num := <span class="number">-5</span>; &#123;</span><br><span class="line">    <span class="keyword">case</span> num &lt; <span class="number">50</span>:</span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d is lesser than 50\n&quot;</span>, num)</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> num &lt; <span class="number">100</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d is lesser than 100\n&quot;</span>, num)</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> num &lt; <span class="number">200</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d is lesser than 200&quot;</span>, num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/UHwBXPYLv1B">Run in playground</a></p><p>在上面的程序中，<code>num</code> 是 <code>-5</code>。当控件权到达第 10 行的 <code>if</code> 语句时，由于 <code>num &lt;0</code>，因此满足条件。<code>break</code> 语句在 <code>switch</code> 完成之前终止了，并且程序不输出任何内容。</p><h3 id="退出外部的循环"><a href="#退出外部的循环" class="headerlink" title="退出外部的循环"></a>退出外部的循环</h3><p>当 <code>switch case</code> 位于 <code>for</code> 循环内时，可能需要尽早终止 <code>for</code> 循环。 这可以通过标记 <code>for</code> 循环并使用 <code>switch</code> 语句内的该标记中断 <code>for</code> 循环来完成。让我们来看一个例子。</p><p>让我们编写一个程序来生成一个随机偶数。</p><p>我们将创建一个无限 <code>for</code> 循环，并使用 <code>switch</code> 条件来确定所生成的随机数是否为偶数。如果是偶数，将打印生成的数字，并使用其标签终止 <code>for</code> 循环。<code>rand</code> 包的 <a href="https://golang.org/pkg/math/rand/#Rand.Intn"><code>Intn</code></a> 函数用于生成非负伪随机数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">randloop:</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> i := rand.Intn(<span class="number">100</span>); &#123;</span><br><span class="line">        <span class="keyword">case</span> i%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            fmt.Printf(<span class="string">&quot;Generated even number %d&quot;</span>, i)</span><br><span class="line">            <span class="keyword">break</span> randloop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/0bLYOgs2TUk">Run in playground</a></p><p>在上面的程序中，第 9 行中的 <code>for</code> 循环标记为 <code>randloop</code>。使用第 <code>11</code> 行的 <code>Intn</code> 函数在 0 到 99 之间生成一个随机数（不包括 100）。 如果生成的数字为偶数，则使用标签在第 14 行中断循环。</p><p>该程序打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Generated even number 18</span><br></pre></td></tr></table></figure><p>请注意，如果使用不带标签的 <code>break</code> 语句，则将仅中断 <code>switch</code> 语句，循环将继续运行。因此，标记循环并在 <code>switch</code> 内部的 <code>break</code> 语句中使用它对于中断外部 for 循环是必要的。</p><blockquote><p>原文地址 <a href="https://golangbot.com/switch/">Switch Statement</a><br>原文作者：<a href="https://golangbot.com/about/">Naveen Ramanathan</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">switch 是一个条件语句，它对表达式进行求值并将其与可能的匹配列表进行比较，并执行相应的代码块。可以将其视为替换复杂的 if 语句的惯用方式。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/categories/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/categories/Golang/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Golang" scheme="https://youngjuning.js.org/tags/Golang/"/>
    
    <category term="Go 语言教程" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    <category term="Go 语言教程系列" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
    <category term="Golang Switch" scheme="https://youngjuning.js.org/tags/Golang-Switch/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言教程系列の循环</title>
    <link href="https://youngjuning.js.org/1e53ff51d8a4/"/>
    <id>https://youngjuning.js.org/1e53ff51d8a4/</id>
    <published>2023-03-19T07:09:00.000Z</published>
    <updated>2023-03-26T15:04:38.328Z</updated>
    
    <content type="html"><![CDATA[<p>循环语句用于重复执行代码块。</p><p><code>for</code> 是 Go 中唯一可用的循环。Go 没有在其他语言（例如 C）中存在的<code>while</code> 或 <code>do while</code> 循环。</p><h2 id="for-循环语法"><a href="#for-循环语法" class="headerlink" title="for 循环语法"></a>for 循环语法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> initialisation; condition; post &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化语句将仅执行一次。循环初始化后，将检查条件。如果条件的计算结果为 <code>true</code>，则将执行 <code>&#123;</code> <code>&#125;</code> 内部的循环主体，然后执行 post 语句。 每次循环成功迭代后，将执行 post 语句。执行 post 语句后，将重新检查条件。如果为 <code>true</code>，则循环将继续执行，否则 <code>for</code> 循环终止。</p><p>Go 中的 for 循环的三个部分，即初始化，条件和发布都是可选的。让我们看一个示例，以更好地理解循环。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>让我们编写一个程序，该程序使用 <code>for</code> 循环打印从 1 到 10 的所有数字。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot; %d&quot;</span>,i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/mV6Zgcx2DY">Run in playground</a></p><p>在上面的程序中，<code>i</code> 被初始化为 1。条件语句将检查 <code>i &lt;= 10</code>。如果条件为真，则输出 <code>i</code> 的值，否则循环终止。在每次迭代结束时，post 语句将 <code>i</code> 递增 1。一旦 <code>i</code> 大于 10，则循环终止。</p><p>上面的程序将打印 <code>1 2 3 4 5 6 7 8 9 10</code></p><p>在 for 循环中声明的变量仅在循环范围内可用。因此，无法在主体外部进行循环访问 <code>i</code>。</p><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p><code>break</code> 语句用于在完成正常执行之前突然终止 <code>for</code> 循环，并将控制权移至 <code>for</code> 循环之后的代码行。</p><p>让我们编写一个使用 <code>break</code> 打印从 1 到 5 的数字的程序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">5</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> <span class="comment">// 如果 i 大于 5，循环将终止</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d &quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\nline after for loop&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/sujKy92f--">Run in playground</a></p><p>在上面的程序中，在每次迭代过程中都会检查 <code>i</code> 值。如果 <code>i</code> 大于 5，则执行 <code>break</code> 并终止循环。然后在 <code>for</code> 循环之后执行 <code>print</code> 语句。上面的程序将输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5</span><br><span class="line">line after <span class="keyword">for</span> loop</span><br></pre></td></tr></table></figure><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p><code>continue</code> 语句用于跳过 <code>for</code> 循环的当前迭代。在 <code>continue</code> 语句之后的 <code>for</code> 循环中存在的所有代码将不会针对当前迭代执行。循环将继续进行下一个迭代。</p><p>让我们编写一个程序，使用 <code>continue</code> 打印从 <code>1</code> 到 <code>10</code> 的所有奇数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d &quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/DRLN2ZHwVS">Run in playground</a></p><p>在上面的程序中，<code>if i％2 == 0</code> 行检查将 <code>i</code> 除以 <code>2</code> 的提示是否为 0。如果为零，则数字为偶数，并执行 <code>continue</code> 语句，并且控制移至 循环的下一次迭代。 因此，<code>continue</code> 之后的 <code>print</code> 语句将不会被调用，并且循环会进行到下一个迭代。上面程序的输出是 <code>1 3 5 7 9</code>。</p><h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2><p>一个内部有另一个 <code>for</code> 循环的 <code>for</code> 循环称为嵌套 <code>for</code> 循环。让我们通过编写一个打印以下序列的程序来了解嵌套的 <code>for</code> 循环。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>下面的程序使用嵌套的 <code>for</code> 循环来打印序列。第 8 行中的变量 <code>n</code> 存储序列中的行数。在我们的例子中是 5。外部 <code>for</code> 循环将 <code>i</code> 从 <code>0</code> 迭代到 <code>4</code>，内部 <code>for</code> 循环将 <code>j</code> 从 <code>0</code> 迭代到 <code>i</code> 的当前值。 内循环为每次迭代打印“ *”，而外循环在每次迭代结束时打印新行。 运行该程序，你会看到序列打印为输出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    n := <span class="number">5</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt;= i; j++ &#123;</span><br><span class="line">            fmt.Print(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/0rq8fWjVDLb">Run in playground</a></p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>标签可用于从内部 <code>for</code> 循环中断外部循环。让我们通过一个简单的例子来理解我的意思。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">1</span>; j &lt; <span class="number">4</span>; j++ &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;i = %d , j = %d\n&quot;</span>, i, j)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/BnCKho2x5hM">Run in playground</a></p><p>上面的程序是不言自明的，它将打印：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">i = 0 , j = 1</span><br><span class="line">i = 0 , j = 2</span><br><span class="line">i = 0 , j = 3</span><br><span class="line">i = 1 , j = 1</span><br><span class="line">i = 1 , j = 2</span><br><span class="line">i = 1 , j = 3</span><br><span class="line">i = 2 , j = 1</span><br><span class="line">i = 2 , j = 2</span><br><span class="line">i = 2 , j = 3</span><br></pre></td></tr></table></figure><p>这没有什么特殊的！</p><p>如果我们想在 <code>i</code> 和 <code>j</code> 相等时停止打印该怎么办。为此，我们需要退出外部 <code>for</code> 循环。 当 <code>i</code> 和 <code>j</code> 相等时，在内部 <code>for</code> 循环中添加 <code>break</code> 只会退出内部 <code>for</code> 循环。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">1</span>; j &lt; <span class="number">4</span>; j++ &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;i = %d , j = %d\n&quot;</span>, i, j)</span><br><span class="line">            <span class="keyword">if</span> i == j &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/uMjbF8Ii41d">Run in playground</a></p><p>在上面的程序中，当第 10 行的 <code>i</code> 和 <code>j</code> 相等时，我在内部的 <code>for</code> 循环中添加了一个 <code>break</code>。这只会退出内部 <code>for</code> 循环，而外部循环将继续执行。该程序将打印：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i = 0 , j = 1</span><br><span class="line">i = 0 , j = 2</span><br><span class="line">i = 0 , j = 3</span><br><span class="line">i = 1 , j = 1</span><br><span class="line">i = 2 , j = 1</span><br><span class="line">i = 2 , j = 2</span><br></pre></td></tr></table></figure><p>这不是预期的输出。当 <code>i</code> 和 <code>j</code> 相等时，即当它们等于 <code>1</code> 时，我们需要停止打印。标签可用于从外部循环中断开。让我们使用标签重写上面的程序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">outer:</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">1</span>; j &lt; <span class="number">4</span>; j++ &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;i = %d , j = %d\n&quot;</span>, i, j)</span><br><span class="line">            <span class="keyword">if</span> i == j &#123;</span><br><span class="line">                <span class="keyword">break</span> outer</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/BI10Rmp_Z3y">Run in playground</a></p><p>在上面的程序中，我们在外部 <code>for</code> 循环的第 8 行中添加了标签 <code>outer</code>，在第 13 行中，通过指定标签来中断外部 <code>for</code> 循环。当 <code>i</code> 和 <code>j</code> 相等时，该程序将停止打印。该程序将输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = 0 , j = 1</span><br><span class="line">i = 0 , j = 2</span><br><span class="line">i = 0 , j = 3</span><br><span class="line">i = 1 , j = 1</span><br></pre></td></tr></table></figure><h2 id="更多示例"><a href="#更多示例" class="headerlink" title="更多示例"></a>更多示例</h2><p>让我们写更多的代码来覆盖 <code>for</code> 循环的所有变体。下面的程序打印从 0 到 10 的所有偶数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ;i &lt;= <span class="number">10</span>; &#123; <span class="comment">// initialisation and post 被省略</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d &quot;</span>, i)</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/PNXliGINku">Run in playground</a></p><p>我们已经知道 <code>for</code> 循环的所有三个部分，即 <code>initialisation</code>、<code>condition</code> 和 <code>post</code> 都是可选的。在上述程序中，省略了<code>initialisation</code> 和 <code>post</code>。在 <code>for</code> 循环外，<code>i</code> 被初始化为 <code>0</code>。只要 <code>i &lt;= 10</code>，循环就会执行。我在 <code>for</code> 循环内增加了 <code>2</code>。上面的程序输出 <code>0 2 4 6 8 10</code>。</p><p>也可以省略上述程序的 <code>for</code> 循环中的分号。可以将这种格式视为 <code>while</code> 循环的替代方法。上面的程序可以改写为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i &lt;= <span class="number">10</span> &#123; <span class="comment">// 分号被省略，只剩下条件语句</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d &quot;</span>, i)</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/UYiz-Wtnoj">Run in playground</a></p><p>可以在 <code>for</code> 循环中声明多个变量并对其进行操作。让我们编写一个使用多个变量声明打印以下序列的程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">10 * 1 = 10</span><br><span class="line">11 * 2 = 22</span><br><span class="line">12 * 3 = 36</span><br><span class="line">13 * 4 = 52</span><br><span class="line">14 * 5 = 70</span><br><span class="line">15 * 6 = 90</span><br><span class="line">16 * 7 = 112</span><br><span class="line">17 * 8 = 136</span><br><span class="line">18 * 9 = 162</span><br><span class="line">19 * 10 = 190</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> no, i := <span class="number">10</span>, <span class="number">1</span>; i &lt;= <span class="number">10</span> &amp;&amp; no &lt;= <span class="number">19</span>; i, no = i+<span class="number">1</span>, no+<span class="number">1</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d * %d = %d\n&quot;</span>, no, i, no*i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/e7Pf0UDjj0">Run in playground</a></p><p>在上面的程序中，<code>no</code> 和 <code>i</code> 被声明并分别初始化为 10 和 1。在每次迭代结束时，它们将增加 1。布尔运算符 <code>&amp;&amp;</code> 用于确保 <code>i</code> 小于或等于 10 以及 <code>no</code> 小于或等于 19 的条件成立。</p><h2 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h2><p>创建无限循环的语法是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下程序将持续打印 <code>Hello World</code>，而不会终止。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果尝试在 <a href="https://play.golang.org/p/kYQZw1AWT4">go park</a> 中运行上述程序，则会收到错误消息 <code>process took too long</code>。请尝试在你的本地系统中运行它以无限打印 <code>Hello World</code>。</p><p>还有一个范围 <strong>range</strong>可以在 <code>for</code> 循环中用于数组操作。当我们在后续教程中了解数组时，我们将进行介绍。</p><blockquote><p>原文地址 <a href="https://golangbot.com/loops/">loops</a><br>原文作者：<a href="https://golangbot.com/about/">Naveen Ramanathan</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">Go 循环语句用于重复执行代码块。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/categories/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/categories/Golang/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Golang" scheme="https://youngjuning.js.org/tags/Golang/"/>
    
    <category term="Go 语言教程" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    <category term="Go 语言教程系列" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
    <category term="Golang Loop" scheme="https://youngjuning.js.org/tags/Golang-Loop/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言教程系列のif else 语句</title>
    <link href="https://youngjuning.js.org/4176036c2d35/"/>
    <id>https://youngjuning.js.org/4176036c2d35/</id>
    <published>2023-03-19T07:08:00.000Z</published>
    <updated>2023-03-26T15:04:38.328Z</updated>
    
    <content type="html"><![CDATA[<p><code>if</code> 是一个具有布尔条件的语句，如果该条件的值为 <code>true</code>，它将执行一个代码块。如果判定条件为 <code>false</code>，它将执行 <code>else</code> 代码块。在本教程中，我们将研究 <code>if</code> 语句的各种语法和使用方法。</p><h2 id="if-语句语法"><a href="#if-语句语法" class="headerlink" title="if 语句语法"></a><code>if</code> 语句语法</h2><p>下面的代码正是 <code>if</code> 语句的语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>condition</code> 被判定为 <code>true</code>，大括号 <code>&#123;</code> 和 <code>&#125;</code> 之间的代码将被执行。</p><p>与其他语言（例如C、JavaScript）不同，Go 语言中大括号 <code>&#123;&#125;</code> 是必需的，即使大括号 <code>&#123;&#125;</code> 之间只有一行代码。</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>让我们来写一个简单的程序来判断一个数字的奇偶性。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    num := <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> num%<span class="number">2</span> == <span class="number">0</span> &#123; <span class="comment">// 检查数字是否是奇数</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;The number&quot;</span>, num, <span class="string">&quot;is even&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;The number&quot;</span>, num, <span class="string">&quot;is odd&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/RRxkgK07ul4">Run in Playground</a></p><p>在上面的程序中，第9行的条件 <code>num％2</code> 确定 <code>num</code> 除以 <code>2</code> 的余数是否为零。由于在这种情况下为 <code>0</code>，所以将打印文本 <code>The number 10 is even</code>，然后程序退出。</p><h2 id="if-else-语句"><a href="#if-else-语句" class="headerlink" title="if...else... 语句"></a><code>if...else...</code> 语句</h2><p><code>if</code> 语句具有可选的 <code>else</code> 结构体，如果 <code>if</code> 语句中的条件被判定为 <code>false</code>，则将执行该结构体。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition &#123;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码片段中，如果条件被判定为 <code>false</code>，那么将执行 <code>else &#123;</code>和 <code>&#125;</code> 之间的代码。</p><p>让我们重写程序以使用 <code>if else</code> 语句判断数字的奇偶性。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    num := <span class="number">11</span></span><br><span class="line">    <span class="keyword">if</span> num%<span class="number">2</span> == <span class="number">0</span> &#123; <span class="comment">// 检查数字是否是奇数</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;the number&quot;</span>, num, <span class="string">&quot;is even&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;the number&quot;</span>, num, <span class="string">&quot;is odd&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/bMevwhJhguO">Run in playground</a></p><p>在上面的代码中，我们没有像上一节那样返回条件是否为 <code>true</code>，而是创建了 <code>else</code> 语句，如果条件为 <code>false</code> 则执行该语句。在这种情况下，由于 <code>11</code> 为奇数，因此 <code>if</code> 条件为 <code>false</code> 并执行 <code>else</code> 语句中的代码。上面的程序将打印。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">the number 11 is odd</span><br></pre></td></tr></table></figure><h2 id="if-else-if-else-语句"><a href="#if-else-if-else-语句" class="headerlink" title="if...else if...else... 语句"></a><code>if...else if...else...</code> 语句</h2><p><code>if</code> 语句还具有可选的 <code>else if</code> 和 <code>else</code> 组件。下面提供了相同的语法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition1 &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> condition2 &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该语法用来从上到下来查找问题的真相。</p><p>在上面的语句中，如果 <code>condition1</code> 为 <code>true</code>，则执行 <code>if condition1 &#123;</code> 和右括号 <code>&#125;</code> 中的代码。</p><p>如果 <code>condition1</code> 是 <code>false</code>，而 <code>condition2</code> 是 <code>true</code>，则执行 <code>condition2 &#123;</code> 和下一个右括号 <code>&#125;</code> 的其他代码。</p><p>如果 <code>condition1</code> 和 <code>condition2</code> 均为假，则执行 <code>else &#123;</code> 和 <code>&#125;</code> 之间 <code>else</code> 语句中的代码。</p><p>可以有任意数量的 <code>else if</code> 语句。</p><p>通常，无论条件是 <code>if</code> 还是 <code>else if</code>，都将执行相应的代码块。如果没有一个条件为真，则执行 <code>else</code> 块。</p><p>让我们编写一个使用 <code>else if</code> 的程序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    num := <span class="number">99</span></span><br><span class="line">    <span class="keyword">if</span> num &lt;= <span class="number">50</span> &#123;</span><br><span class="line">        fmt.Println(num, <span class="string">&quot;is less than or equal to 50&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> num &gt;= <span class="number">51</span> &amp;&amp; num &lt;= <span class="number">100</span> &#123;</span><br><span class="line">        fmt.Println(num, <span class="string">&quot;is between 51 and 100&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(num, <span class="string">&quot;is greater than 100&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/VNPbCiK9eXT">Run in playground</a></p><p>在上面的程序中，第 11 行的条件 <code>else if num &gt;= 51 &amp;&amp; num &lt;= 100</code> 为 <code>true</code>，因此程序将打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">99 is between 51 and 100</span><br></pre></td></tr></table></figure><h2 id="带有赋值语句的-if"><a href="#带有赋值语句的-if" class="headerlink" title="带有赋值语句的 if"></a>带有赋值语句的 <code>if</code></h2><p><code>if</code> 的另一种变体，包括可选的短赋值语句，该语句在判定条件之前执行。它的语法是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> assignment-statement; condition &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码段中，在判定条件之前首先执行 <code>assignment-statement</code>。</p><p>让我们使用上面的语法重写判断数字奇偶性的程序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num := <span class="number">10</span>; num % <span class="number">2</span> == <span class="number">0</span> &#123; <span class="comment">//checks if number is even</span></span><br><span class="line">        fmt.Println(num,<span class="string">&quot;is even&quot;</span>)</span><br><span class="line">    &#125;  <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(num,<span class="string">&quot;is odd&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/_X9q4MWr4s">Run in playground</a></p><p>在上面的程序中，在第 8 行的 <code>if</code> 语句中初始化了 <code>num</code>。需要注意的一件事是 <code>num</code> 仅可用于 <code>if</code> 和 <code>else</code> 内部的访问。即 <code>num</code> 的有效范围仅限于 <code>if</code> 块。 如果我们尝试从 <code>if</code> 或 <code>else</code> 外部访问 <code>num</code>，则编译器会报错。当我们仅出于 <code>if else</code> 构造的目的声明变量时，这种语法通常会派上用场。在这种情况下使用此语法可确保变量的范围仅在 <code>if else</code> 语句内。</p><h2 id="陷阱"><a href="#陷阱" class="headerlink" title="陷阱"></a>陷阱</h2><p><code>else</code> 语句应在 <code>if</code> 语句的大括号 <code>&#125;</code> 之后的同一行开始。如果没有，编译器会抛错。</p><p>让我们通过一个程序来理解这一点。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    num := <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span> &#123; <span class="comment">//checks if number is even</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;the number is even&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;the number is odd&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/RYNqZZO2F9">Run in playground</a></p><p>在上面的程序中，在第 11 行的 <code>if</code> 语句的结束符 <code>&#125;</code> 之后，<code>else</code> 语句不在同一行开始。而是从下一行开始。 Go 不允许这样做。如果你运行此程序，则编译器将输出错误，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./prog.go:12:5: syntax error: unexpected <span class="keyword">else</span>, expecting &#125;</span><br></pre></td></tr></table></figure><p>原因是因为 Go 自动插入分号的方式。你可以在 <a href="https://golang.org/ref/spec#Semicolons">Semicolons</a> 中阅读有关分号插入规则的信息。</p><p>在规则中，指定了在结束括号 <code>&#125;</code> 之后插入分号（如果这是该行的最后一个标记）。因此，Go 编译器在第 11 行的 <code>if</code> 语句的右括号 <code>&#125;</code> 之后自动插入了分号。</p><p>所以我们的程序实际上变成了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">if</span> num%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;the number is even&quot;</span>)</span><br><span class="line">&#125;;  <span class="comment">// Go 编译器自动插入分号</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;the number is odd&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器将在以上代码片段的第 4 行中插入分号。</p><p>由于 <code>if &#123;...&#125; else &#123;...&#125;</code> 是 一个单独的语句，因此中间不应使用分号。因此，该程序无法编译。 在语法上需要将 <code>else</code> 放在 <code>if</code> 语句的右括号 <code>&#125;</code> 之后的同一行中。</p><p>我已经通过在 <code>if</code> 语句的结束符号 <code>&#125;</code> 之后移动 <code>else</code> 来重写程序，以防止自动分号插入。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    num := <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> num%<span class="number">2</span> == <span class="number">0</span> &#123; <span class="comment">// 检查数字是否是奇数</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;the number is even&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;the number is odd&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/hv_27vbIBC">Run in playground</a></p><p>现在编译器会很高兴，我们也很高兴。</p><h2 id="Go-惯例"><a href="#Go-惯例" class="headerlink" title="Go 惯例"></a>Go 惯例</h2><p>我们已经看到了各种 <code>if-else</code> 构造，并且实际上已经看到了编写同一程序的多种方法。例如，我们已经看到了编写程序的多种方法，该程序使用不同的 <code>if</code> 构造检查数字是偶数还是奇数。Go 中的惯用编码方式是哪一种？ 按照 Go 的哲学，最好避免不必要的分支和代码缩进。也可以理解为尽早返回。我已经从下面的上一节中提供了该程序，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num := <span class="number">10</span>; num % <span class="number">2</span> == <span class="number">0</span> &#123; <span class="comment">// 检查数字是否是奇数</span></span><br><span class="line">        fmt.Println(num,<span class="string">&quot;is even&quot;</span>)</span><br><span class="line">    &#125;  <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(num,<span class="string">&quot;is odd&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/_X9q4MWr4s">Run in playground</a></p><p>按照 Go 的哲学，编写上述程序的惯用方式是避免 <code>else</code> 并在条件为 <code>true</code> 时从 <code>if</code> 返回。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    num := <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> num%<span class="number">2</span> == <span class="number">0</span> &#123; <span class="comment">// 检查数字是否是奇数</span></span><br><span class="line">        fmt.Println(num, <span class="string">&quot;is even&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(num, <span class="string">&quot;is odd&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/N8A5tPLnVYr">Run in playground</a></p><p>在上面的程序中，一旦我们发现数字是偶数，我们将立即返回。这样可以避免不必要的 <code>else</code> 代码分支。这是 Go 中完成工作的方式。每当编写 Go 程序时，请记住这一点。</p><blockquote><p>原文地址 <a href="https://golangbot.com/if-statement/">If else statement</a><br>原文作者：<a href="https://golangbot.com/about/">Naveen Ramanathan</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">if 是一个具有布尔条件的语句，如果该条件的值为 true，它将执行一个代码块。如果判定条件为 false，它将执行 else 代码块。在本教程中，我们将研究 if 语句的各种语法和使用方法。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/categories/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/categories/Golang/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Golang" scheme="https://youngjuning.js.org/tags/Golang/"/>
    
    <category term="Go 语言教程" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    <category term="Go 语言教程系列" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
    <category term="Golang if else" scheme="https://youngjuning.js.org/tags/Golang-if-else/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言教程系列の包</title>
    <link href="https://youngjuning.js.org/588813e2ac19/"/>
    <id>https://youngjuning.js.org/588813e2ac19/</id>
    <published>2023-03-19T07:07:00.000Z</published>
    <updated>2023-03-26T15:04:38.328Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>大家好，我是 <a href="https://github.com/youngjuning">@洛竹</a></p><p>本文首发于 <a href="https://youngjuning.js.org/">洛竹的官方网站</a></p><p>本文翻译自 <a href="https://golangbot.com/learn-golang-series/">Golang tutorial series</a></p><p>本文同步于公众号洛竹早茶馆，转载请联系作者。</p></blockquote><h2 id="什么是包（package），为什么使用它们？"><a href="#什么是包（package），为什么使用它们？" class="headerlink" title="什么是包（package），为什么使用它们？"></a>什么是包（package），为什么使用它们？</h2><p>到目前为止，我们已经看到 Go 程序只有一个带有 <code>main</code> 函数的文件，以及几个其他函数。在实际情况下，这种将所有源代码写入单个文件的方法是不可扩展的。重用和维护以此方式编写的代码几乎是不可能。这时就需要用到包的概念。</p><p><strong>包用于组织 Go 源代码，以提高可重用性和可读性。包是位于同一目录中的 Go 源文件的集合。包提供了代码分隔，因此我们可以轻松维护 Go 项目。</strong></p><p>例如，假设我们正在 Go 中编写财务应用程序，其中一些功能是单利计算、复利计算和贷款计算。组织此应用程序的一种简单方法是根据功能。我们可以创建包 <code>simpleinterest</code>、<code>compoundinterest</code> 和 <code>loan</code>。如果 <code>loan</code> 包需要计算单利，则可以通过导入 <code>simpleinterest</code> 包来简单地进行计算。这样，代码就可以重用。</p><p>我们将通过创建一个简单的应用程序来学习包，以确定给定的本金、利率和持续时间（以年为单位）的单利。</p><h2 id="main-函数和-main-包"><a href="#main-函数和-main-包" class="headerlink" title="main 函数和 main 包"></a>main 函数和 main 包</h2><p>每个可执行的 Go 应用程序都必须包含 <code>main</code> 函数。此函数是执行的入口点。<code>main</code> 函数应保留在主包中。</p><p><code>package packagename</code> 指定一个指向 <code>packagename</code> 包的特定源文件。这在每一个 go 源文件中都应该放在第一行。</p><p>接下来让我们从为应用创建 <code>main</code> 函数和 <code>main</code> 包开始吧。</p><p>执行下面的命令在 <code>Desktop</code> 文件夹下创建一个名为 <code>lernapackage</code> 的文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/Desktop/learnpackage/</span><br></pre></td></tr></table></figure><p>在 <code>learnpackage</code> 目录下创建一个 <code>main.go</code> 文件，然后写入一下内容：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Simple interest calculation&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>package main</code> 表示该文件属于 <code>main</code> 包，<code>import &quot;packagename&quot;</code> 语句被用来导入一个已经存在的包。<code>packagename.FunctionName()</code> 是调用包中函数的语法。</p><p>在第 3 行中，为了使用 <code>Println</code> 函数我们导入了 <code>fmt</code> 包。<code>fmt</code> 是一个 Go 的标准库并且是内置可用的。然后是打印 <code>Simple interest calculation</code> 的 <code>main</code> 函数。</p><p>进入 <code>learnpackage</code> 目录并使用下面的命令编译上面的项目：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Desktop/learnpackage/</span><br></pre></td></tr></table></figure><p>然后输入下面的初始化 <code>mod</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod init learnpackage</span><br></pre></td></tr></table></figure><p>然后尝试输入下面的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install</span><br></pre></td></tr></table></figure><p>如果一切顺利，我们的二进制文件将被编译并准备执行。在终端中输入命令 <code>learnpackage</code>，你将看到以下输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Simple interest calculation</span><br></pre></td></tr></table></figure><h2 id="Go-模块（Module）"><a href="#Go-模块（Module）" class="headerlink" title="Go 模块（Module）"></a>Go 模块（Module）</h2><p>我们将以这样的方式构造代码，使所有与单利相关的功能都在 <code>simpleinterest</code> 包中。为此，我们需要创建一个自定义包 <code>simpleinterest</code>，其中将包含用于计算单利的函数。在创建自定义包之前，我们首先需要理解 Go 模块，因为创建自定义 packages 需要用到 <strong>Go 模块</strong>。</p><p><strong>Go 模块不过是 Go 软件包的集合。</strong>现在你可能会想到一个问题：为什么我们需要 Go 模块来创建自定义包？答案是<strong>我们创建的自定义包的导入路径是从 go 模块的名称获得的</strong>。除此之外，我们的应用程序使用的所有其他第三方软件包（例如来自 github 的 源代码）将与版本一起出现在 <code>go.mod</code> 文件中。这个 <code>go.mod</code> 文件是在我们创建一个新模块时创建的。在下一部分中，你将更好地理解这一点。</p><h2 id="创建一个单利自定义包"><a href="#创建一个单利自定义包" class="headerlink" title="创建一个单利自定义包"></a>创建一个单利自定义包</h2><p><strong>属于包的源文件应放置在各自的单独文件夹中。Go 中的惯例是使用与包相同的名称来命名此文件夹。</strong></p><p>让我们在 <code>learnpackage</code> 文件夹内创建一个名为 <code>simpleinterest</code> 的文件夹。<code>mkdir simpleinterest</code> 将为我们创建此文件夹。</p><p><code>simpleinterest</code> 文件夹中的所有文件均应以 <code>package simpleinterest</code> 开头，因为它们都属于 <code>simpleinterest</code> 软件包。</p><p>在 <code>simpleinterest</code> 文件夹内创建一个文件 <code>simpleinterest.go</code>。</p><p>以下将是我们应用程序的目录结构。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── learnpackage</span><br><span class="line">│   ├── go.mod</span><br><span class="line">│   ├── main.go</span><br><span class="line">│   └── simpleinterest</span><br><span class="line">│       └── simpleinterest.go</span><br></pre></td></tr></table></figure><p>添加下面的代码到 <code>simpleinterest.go</code> 文件中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> simpleinterest</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算并返回本金 p 的单利，持续时间 t 年的利率 r</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Calculate</span><span class="params">(p <span class="type">float64</span>, r <span class="type">float64</span>, t <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">    interest := p * (r / <span class="number">100</span>) * t</span><br><span class="line">    <span class="keyword">return</span> interest</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们创建了一个函数 <code>Calculate</code>，该函数计算并返回单利。此功能不言自明，它计算并返回单利。</p><p>请注意，函数名称 <strong>Calculate</strong> 以大写字母开头。这是必不可少的，我们后边会解释为什么需要这样做。</p><h2 id="导入自定义包"><a href="#导入自定义包" class="headerlink" title="导入自定义包"></a>导入自定义包</h2><p>要使用自定义包，我们必须首先将其导入。导入路径是模块的名称，该名称后跟的是程序包的子目录和程序包名称。在我们的例子中，模块名称为 <code>learnpackage</code>，而软件包 <code>simpleinterest</code> 位于 <code>learnpackage</code> 下的 <code>simpleinterest</code> 文件夹中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">├── learnpackage</span><br><span class="line">│   └── simpleinterest</span><br></pre></td></tr></table></figure><p>因此 <code>import &quot;learnpackage/simpleinterest&quot;</code> 这行代码将会引入 simpleinterest 包。</p><p>如果我们有这样的目录结构</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">learnpackage</span><br><span class="line">│   └── finance</span><br><span class="line">│       └── simpleinterest</span><br></pre></td></tr></table></figure><p>导入语句则应该是 <code>import &quot;learnpackage/finance/simpleinterest&quot;</code></p><p>在 <code>main.go</code> 文件中添加相应代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;learnpackage/simpleinterest&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Simple interest calculation&quot;</span>)</span><br><span class="line">    p := <span class="number">5000.0</span></span><br><span class="line">    r := <span class="number">10.0</span></span><br><span class="line">    t := <span class="number">1.0</span></span><br><span class="line">    si := simpleinterest.Calculate(p, r, t)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Simple interest is&quot;</span>, si)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码导入 <code>simpleinterest</code> 包，并使用 <code>Calculate</code> 函数计算单利。标准库中的软件包不需要模块名称前缀，因此 <code>fmt</code> 可以在没有模块前缀的情况下工作。当应用程序运行时，输出将是：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Simple interest calculation</span><br><span class="line">Simple interest is 500</span><br></pre></td></tr></table></figure><h2 id="导出名称"><a href="#导出名称" class="headerlink" title="导出名称"></a>导出名称</h2><p>我们在单利包中将函数 <code>Calculate</code> 大写。这在 Go 中具有特殊含义。 任何以大写字母开头的变量或函数都会在 go 中导出名称。在 Go 中只能从其他程序包访问导出的函数和变量。在我们的例子中，我们想从主程序包访问 <code>Calculate</code> 函数。 因此，这是大写的。</p><p>如果在 <code>simpleinterest.go</code> 中将函数名称从 <code>Calculate</code> 更改为 <code>calculate</code>，并且如果我们尝试在 <code>main.go</code> 中使用<code>simpleinterest.calculate(p，r，t)</code> 调用函数，则编译器将报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># learnpackage</span><br><span class="line">./main.go:13:8: undefined: simpleinterest.Calculate</span><br></pre></td></tr></table></figure><p>因此，如果要访问包外部的函数，应该将其大写。</p><h2 id="init-函数"><a href="#init-函数" class="headerlink" title="init 函数"></a><code>init</code> 函数</h2><p>Go 中的每个包都可以包含一个 <code>init</code> 函数。<code>init</code> 函数不能有任何返回类型，也不能有任何参数。在我们的源代码中不能显式调用 <code>init</code> 函数。程序包初始化时将自动调用它。初始化函数的语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>init</code> 函数可用于执行初始化任务，也可用于在执行开始之前验证程序的正确性。包的初始化顺序如下：</p><ol><li>首先对包级的变量进行初始化</li><li>接下来调用 <code>init</code> 函数。包可以具有多个 <code>init</code> 函数（在单个文件中或分布在多个文件中），并且按将其呈现给编译器的顺序进行调用。</li></ol><p>如果一个包导入了其他包，则首先初始化导入的软件包。</p><p>一个包即使从多个包中导入，也只会被初始化一次。</p><p>让我们对应用程序进行一些修改，以了解 <code>init</code> 函数。</p><p>首先，让我们将 <code>init</code> 函数添加到 <code>simpleinterest.go</code> 文件中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> simpleinterest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 添加 init 函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Simple interest package initialized&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Calculate 计算并返回本金 p 的单利，持续时间 t 年的利率 r</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Calculate</span><span class="params">(p <span class="type">float64</span>, r <span class="type">float64</span>, t <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">    interest := p * (r / <span class="number">100</span>) * t</span><br><span class="line">    <span class="keyword">return</span> interest</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们添加了一个简单的 <code>init</code> 函数，该函数仅打印 已初始化的单利包</p><p>现在，让我们修改主程序包。我们知道，在计算单利时，本金、利率和持续时间应大于零。我们将使用 <code>init</code> 函数和 <code>main.go</code> 文件中的包级别变量定义此检查。</p><p>将 <code>main.go</code> 修改为以下内容：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;learnpackage/simpleinterest&quot;</span> <span class="comment">// 导入自定义的包</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> p, r, t = <span class="number">5000.0</span>, <span class="number">10.0</span>, <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* init 函数检查 p, r 和 t 是否大于 0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;Main package initialized&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> p &lt; <span class="number">0</span> &#123;</span><br><span class="line">        log.Fatal(<span class="string">&quot;Principal is less than zero&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> r &lt; <span class="number">0</span> &#123;</span><br><span class="line">        log.Fatal(<span class="string">&quot;Rate of interest is less than zero&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> t &lt; <span class="number">0</span> &#123;</span><br><span class="line">        log.Fatal(<span class="string">&quot;Duration is less than zero&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Simple interest calculation&quot;</span>)</span><br><span class="line">    si := simpleinterest.Calculate(p, r, t)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Simple interest is&quot;</span>, si)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是对 <code>main.go</code> 所做的更改</p><ol><li><strong>p</strong>、<strong>r</strong> 和 ** t ** 变量从 <code>main</code> 函数级移至包级的。 2.增加了 <code>init</code> 函数。如果本金、利率或持续时间小于零，则使用 <code>init</code> 函数打印日志并终止程序执行。</li></ol><p>初始化的顺序如下：</p><ol><li>首先初始化导入的软件包。因此，首先初始化 <code>simpleinterest</code> 包，然后调用它的 <code>init</code> 方法。</li><li>接下来初始化包级别变量 <code>p</code>，<code>r</code> 和 <code>t</code>。</li><li><code>init</code> 函数在 <code>main</code> 中调用。 4.最后调用 <code>main</code> 函数。</li></ol><p>如果运行该程序，将得到以下输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Simple interest package initialized</span><br><span class="line">Main package initialized</span><br><span class="line">Simple interest calculation</span><br><span class="line">Simple interest is 500</span><br></pre></td></tr></table></figure><p>如预期的那样，首先调用 <code>simpleinterest</code> 包的 <code>init</code> 函数，然后初始化包级变量 <code>p</code>，<code>r</code> 和 <code>t</code>。接下来调用 <code>main</code> 包的 <code>init</code> 函数。它检查<code>p</code>、<code>r</code> 和 <code>t</code> 是否小于零，并在条件为真时终止。现在你可以假定 <code>if p &lt;0</code> 将检查 <code>p</code> 是否小于 <code>0</code>，如果小于<code>0</code>，则程序将终止。我们为 <code>r</code> 和 <code>t</code> 写了类似的条件。在这种情况下，所有这些条件都是假的，程序将继续执行。最后，调用 <code>main</code> 函数。</p><p>让我们对该程序进行一些修改以学习 <code>init</code> 函数的用法。修改 <code>main.go</code> 这一行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p, r, t = <span class="number">5000.0</span>, <span class="number">10.0</span>, <span class="number">1.0</span></span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p, r, t = <span class="number">-5000.0</span>, <span class="number">10.0</span>, <span class="number">1.0</span></span><br></pre></td></tr></table></figure><p>我们已经将 <code>p</code> 初始化为负数。</p><p>现在，如果你运行该应用程序，你将看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Simple interest package initialized</span><br><span class="line">Main package initialized</span><br><span class="line">2020/02/15 21:25:12 Principal is less than zero</span><br></pre></td></tr></table></figure><p><code>p</code> 是负数。因此，当 <code>init</code> 函数运行时，程序在打印 <code>Principal is less than zero</code> 后终止。</p><h2 id="空白标识符的使用"><a href="#空白标识符的使用" class="headerlink" title="空白标识符的使用"></a>空白标识符的使用</h2><p>在 Go 中导入包却不使用是不合法的。如果这样做，编译器会抱怨。这样设计的原因是避免使未使用的包越来越多，这会大大增加编译时间。用以下内容替换 <code>main.go</code> 中的代码，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;learnpackage/simpleinterest&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的程序将会抛错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;learnpackage/simpleinterest&quot; imported but not used</span><br></pre></td></tr></table></figure><p>但是，在应用程序处于开发阶段中时，导入包并随后在代码中的某个位置（如果不是现在）使用它们是很常见的。在这种情况下，<code>_</code> 空白标识符可以为我们节省时间。</p><p>上面的程序中的错误可以通过以下代码消除：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;learnpackage/simpleinterest&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ = simpleinterest.Calculate</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>var _ = simpleinterest.Calculate</code> 使错误静音了。如果不使用包，我们应该跟踪这些错误消音器，并在应用程序开发结束时删除它们，包括导入的包。因此，建议在 <code>import</code> 语句之后在包级别编写错误消音器。</p><p>有时，即使我们不需要使用包中的任何函数或变量，也需要导入包以确保初始化发生。例如，即使我们计划在代码中的任何地方都不使用该包，我们可能仍需要确保调用 <code>simpleinterest</code> 包的 <code>init</code> 函数。空白标识符 <code>_</code> 也可以在这种情况下使用，如下所示。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    _ <span class="string">&quot;learnpackage/simpleinterest&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行以上程序将输出 <code>Simple interest package initialized</code>。我们已经成功地初始化了 <code>simpleinterest</code> 包，即使在代码中的任何地方都没有使用它。</p><p>在第 13 行中，我们仅使用 <code>area</code>，而使用 <code>_</code> 标识符来丢弃 <code>perimeter</code>。</p><blockquote><p>原文地址 <a href="https://golangbot.com/go-packages/">Go Packages</a><br>原文作者：<a href="https://golangbot.com/about/">Naveen Ramanathan</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">包用于组织 Go 源代码，以提高可重用性和可读性。包是位于同一目录中的 Go 源文件的集合。包提供了代码分隔，因此我们可以轻松维护 Go 项目。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/categories/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/categories/Golang/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Golang" scheme="https://youngjuning.js.org/tags/Golang/"/>
    
    <category term="Go 语言教程" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    <category term="Go 语言教程系列" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
    <category term="Golang 包" scheme="https://youngjuning.js.org/tags/Golang-%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言教程系列の函数</title>
    <link href="https://youngjuning.js.org/e59d3fd533b9/"/>
    <id>https://youngjuning.js.org/e59d3fd533b9/</id>
    <published>2023-03-19T07:06:00.000Z</published>
    <updated>2023-03-26T15:04:38.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数是什么？"><a href="#函数是什么？" class="headerlink" title="函数是什么？"></a>函数是什么？</h2><p>函数是执行特定任务的代码块。一个函数接受一个输入，对该输入执行一些计算，然后生成一个输出。</p><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><p>Go 语言声明一个函数的语法是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionname</span><span class="params">(parametername <span class="keyword">type</span>)</span></span> returntype &#123;</span><br><span class="line"> <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数声明以关键字 <code>func</code> 开头，后跟 <code>functionname</code>。参数在函数 <code>(</code> 和 <code>)</code> 之间指定，然后跟着的是 函数的 <code>returntype</code>。指定参数的语法是参数名称后跟类型。可以指定任意数量的参数，例如 <code>(parameter1 type，parameter2 type)</code>。然后在 <code>&#123;</code> 和 <code>&#125;</code> 之间有一个代码块，它是函数的主体。</p><p>参数和返回类型在函数中是可选的。因此，以下语法也是有效的函数声明。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionname</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>让我们编写一个函数，该函数将单个产品的价格和产品数量作为输入参数，并通过将这两个值相乘来计算总价格并返回输出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculateBill</span><span class="params">(price <span class="type">int</span>, no <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> totalPrice = price * no</span><br><span class="line">    <span class="keyword">return</span> totalPrice</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的函数有两个输入参数 <code>int</code> 类型的 <code>price</code> 和 <code>no</code>，并返回 <code>price</code> 和 <code>no</code> 的乘积 <code> totalPrice</code>。返回值也是 <code>int</code> 类型。</p><p><strong>如果连续参数具有相同的类型，我们可以不用重复书写该类型，事实上你只需要写一次就足够了。</strong> 因此，上述功能可以重写为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculateBill</span><span class="params">(price, no <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> totalPrice = price * no</span><br><span class="line">    <span class="keyword">return</span> totalPrice</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们已经准备好一个函数，让我们从代码中的某个地方调用它。 调用函数的语法是 <code>functionname(parameters)</code>。现在我们可以使用代码来调用上述函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calculateBill(<span class="number">10</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>这是使用上述函数并打印总价格的完整程序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculateBill</span><span class="params">(price, no <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> totalPrice = price * no</span><br><span class="line">    <span class="keyword">return</span> totalPrice</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    price, no := <span class="number">90</span>, <span class="number">6</span></span><br><span class="line">    totalPrice := calculateBill(price, no)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Total price is&quot;</span>, totalPrice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/FtjhPcx3ySa">Run in playground</a></p><p>上面的程序将打印出以下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Total price is 540</span><br></pre></td></tr></table></figure><h2 id="多个返回值"><a href="#多个返回值" class="headerlink" title="多个返回值"></a>多个返回值</h2><p>可以从一个函数返回多个值。让我们编写一个函数 <code>rectProps</code>，该函数接受矩形的 <code>length</code> 和 <code>width</code>，并返回矩形的 <code>area</code> 和 <code>perimeter</code>。矩形的面积是长度和宽度的乘积，周长是长度和宽度的总和的两倍。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rectProps</span><span class="params">(length, width <span class="type">float64</span>)</span></span>(<span class="type">float64</span>, <span class="type">float64</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> area = length * width</span><br><span class="line">    <span class="keyword">var</span> perimeter = (length + width) * <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> area, perimeter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    area, perimeter := rectProps(<span class="number">10.8</span>, <span class="number">5.6</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Area %f Perimeter %f&quot;</span>, area, perimeter)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/qAftE_yke_">Run in playground</a></p><p>如果一个函数返回多个返回值，那么必须在 <code>(</code> 和 <code>)</code> 之间指定它们的类型。 <code>func rectProps(length, width float64)(float64,float64)</code> 具有两个<code>float64</code> 参数 <code>length</code> 和 <code>width</code>，并且还返回两个 <code>float64</code> 值。上面的程序会打印出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Area 60.480000 Perimeter 32.800000</span><br></pre></td></tr></table></figure><h2 id="命名返回值"><a href="#命名返回值" class="headerlink" title="命名返回值"></a>命名返回值</h2><p>可以从函数返回命名值。如果已命名返回值，则可以将其视为在函数的第一行中声明为变量。</p><p>上面的 <code>rectProps</code> 函数可以使用命名的返回值重写为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rectProps</span><span class="params">(length, width <span class="type">float64</span>)</span></span>(area, perimeter <span class="type">float64</span>) &#123;</span><br><span class="line">    area = length * width</span><br><span class="line">    perimeter = (length + width) * <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="comment">// 无需明确指定返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>area</code> 和 <code>perimeter </code> 是上述函数中的命名返回值。请注意，函数中的<code>return</code> 语句不会显式返回任何值。由于在函数声明中将 <code>area</code> 和 <code> perimeter</code> 指定为返回值，因此当遇到 <code>return</code> 语句时，它们会自动从函数中返回。</p><h2 id="空白标识符"><a href="#空白标识符" class="headerlink" title="空白标识符"></a>空白标识符</h2><p><code>_</code> 是 Go 语言中的空白标识符。它可以代替任何类型的任何值。让我们看看这个空白标识符的用途。</p><p><code>rectProps</code> 函数返回矩形的面积和周长。如果我们只需要 <code>area</code> 而想要丢弃 <code>perimeter</code>，该怎么办。这时  <code>_</code> 就可以派上用场。</p><p>下面的程序仅使用从 <code>rectProps</code> 函数返回的 <code>area</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rectProps</span><span class="params">(length, width <span class="type">float64</span>)</span></span> (<span class="type">float64</span>, <span class="type">float64</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> area = length * width</span><br><span class="line">    <span class="keyword">var</span> perimeter = (length + width) * <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> area, perimeter</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    area, _ := rectProps(<span class="number">10.8</span>, <span class="number">5.6</span>) <span class="comment">// perimeter 被丢弃</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Area %f &quot;</span>, area)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/IkugSH1jIt">Run in playground</a></p><p>在第 13 行中，我们仅使用 <code>area</code>，而使用 <code>_</code> 标识符来丢弃 <code>perimeter</code>。</p><blockquote><p>原文地址 <a href="https://golangbot.com/functions/">Functions</a><br>原文作者：<a href="https://golangbot.com/about/">Naveen Ramanathan</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">函数是执行特定任务的代码块。一个函数接受一个输入，对该输入执行一些计算，然后生成一个输出。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/categories/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/categories/Golang/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Golang" scheme="https://youngjuning.js.org/tags/Golang/"/>
    
    <category term="Go 语言教程" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    <category term="Go 语言教程系列" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
    <category term="Golang 函数" scheme="https://youngjuning.js.org/tags/Golang-%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言教程系列の常量</title>
    <link href="https://youngjuning.js.org/84e9c8841ae1/"/>
    <id>https://youngjuning.js.org/84e9c8841ae1/</id>
    <published>2023-03-19T07:05:00.000Z</published>
    <updated>2023-03-26T15:04:38.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常量是什么？"><a href="#常量是什么？" class="headerlink" title="常量是什么？"></a>常量是什么？</h2><p>Go 中的常量一词用于表示固定值，例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">95</span><br><span class="line"><span class="string">&quot;I love Go&quot;</span></span><br><span class="line">67.89</span><br></pre></td></tr></table></figure><h2 id="声明一个常量"><a href="#声明一个常量" class="headerlink" title="声明一个常量"></a>声明一个常量</h2><p>关键字 <code>const</code> 用于声明常量。让我们看看如何使用 <code>const</code> 来声明一个常量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">50</span></span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/mv3B-q3h0zh">Run in playground</a></p><p>上面的代码中，<code>a</code> 是一个常量并被赋值为 <code>50</code>。</p><h2 id="声明一组常量"><a href="#声明一组常量" class="headerlink" title="声明一组常量"></a>声明一组常量</h2><p>还有另一种语法可以使用单个语句定义一组常量。下面提供了使用此语法定义一组常量的示例。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        name = <span class="string">&quot;John&quot;</span></span><br><span class="line">        age = <span class="number">50</span></span><br><span class="line">        country = <span class="string">&quot;Canada&quot;</span></span><br><span class="line">    )</span><br><span class="line">    fmt.Println(name)</span><br><span class="line">    fmt.Println(age)</span><br><span class="line">    fmt.Println(country)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/KvZ6zNz4A04">Run in playground</a></p><p>在上面的程序中，我们声明了 3 个常量 <code>name</code>、<code>age</code> 和 <code>country</code>。 执行上面的程序会打印出以下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">John</span><br><span class="line">50</span><br><span class="line">Canada</span><br></pre></td></tr></table></figure><p>顾名思义，常量不能再次重新分配任何其他值。在下面的程序中，我们试图将另一个值 <code>89</code> 分配给 <code>a</code>。这是不允许的，因为 <code>a</code> 是常量。 该程序将无法运行，并显示编译错误 <code>cannot assign to a</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">55</span> <span class="comment">//allowed</span></span><br><span class="line">a = <span class="number">89</span> <span class="comment">//reassignment not allowed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/b2J8_UQobb">Run in playground</a></p><p>常量的值应在编译时确定。因此，由于函数调用在运行时发生，因此不能将函数调用返回的值分配给常量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = math.Sqrt(<span class="number">4</span>)   <span class="comment">//allowed</span></span><br><span class="line">    <span class="keyword">const</span> b = math.Sqrt(<span class="number">4</span>) <span class="comment">//not allowed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/GBlQDcbqfn-">Run in playground</a></p><p>在上面的程序中，<code>a</code> 是一个变量，因此可以将函数 <code>math.Sqrt(4)</code> 的返回值分配给它（我们将在单独的教程中更详细地讨论函数）。</p><p><code>b</code> 是一个常量，在编译时必须确定 <code>b</code> 的值。而 <code>math.Sqrt(4)</code> 函数是在运行时确定返回值，因此 <code>const b = math.Sqrt(4)</code> 编译失败并显示错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./prog.go:9:8: const initializer math.Sqrt(4) is not a constant</span><br></pre></td></tr></table></figure><h2 id="字符串常量、有类型常量和无类型常量"><a href="#字符串常量、有类型常量和无类型常量" class="headerlink" title="字符串常量、有类型常量和无类型常量"></a>字符串常量、有类型常量和无类型常量</h2><p>在 Go 中，双引号之间包含的任何值都是字符串常量。 例如，<code>&quot;Hello World&quot;</code>，<code>&quot;Sam&quot;</code> 之类的字符串在 Go 中都是常量。</p><p>字符串常量属于什么类型？ 答案是它们是无类型的。</p><p>像 <code>&quot;Hello World&quot;</code> 这样的字符串常量没有任何类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hello = <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure><p>在上面的代码行中，常量 <code>&quot;hello&quot;</code> 没有类型。</p><p>Go 是一种强类型语言。所有变量都需要显式类型。试想一下，以下程序将无类型的常量 <code>n</code> 的值分配给变量 <code>name</code> 会发生什么？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> n = <span class="string">&quot;Sam&quot;</span></span><br><span class="line">    <span class="keyword">var</span> name = n</span><br><span class="line">    fmt.Printf(<span class="string">&quot;type %T value %v&quot;</span>, name, name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/oFv_cFuEucL">Run in playground</a></p><p>答案是未类型的常量具有与之关联的默认类型，并且仅当一行代码需要它时，它们才提供默认类型。在 <code>var name = n</code> 的语句中，<code>name</code> 需要一个类型，它是从字符串常量 <code>n</code> 的默认类型（即字符串）中获取的。</p><p>有没有办法创建有类型的常量呢？答案是肯定的。下面的代码会创建一个有类型的常量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> typedhello <span class="type">string</span> = <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure><p><strong>上面的代码中的 <code>typedhello</code> 是字符串类型的常量。</strong></p><p>Go 是一种强类型语言。分配期间不允许混合类型。让我们看看下面的程序来理解下这意味着什么。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> defaultName = <span class="string">&quot;Sam&quot;</span> <span class="comment">//allowed</span></span><br><span class="line">    <span class="keyword">type</span> myString <span class="type">string</span></span><br><span class="line">    <span class="keyword">var</span> customName myString = <span class="string">&quot;Sam&quot;</span> <span class="comment">//allowed</span></span><br><span class="line">    customName = defaultName <span class="comment">//not allowed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/1Q-vudNn_9">Run in playground</a></p><p>在上面的代码中，我们首先创建一个变量 <code>defaultName</code>，并将常量 <code>Sam</code> 分配给它。<strong>常量 <code>Sam</code> 的默认类型是 <code>string</code>，因此 <code>defaultName</code> 赋值后的类型是 <code>string</code>。</strong>.</p><p>在下一行中，我们创建一个新类型 <code>myString</code>，它是字符串类型的别名。</p><p>然后，我们创建一个类型为 <code>myString</code> 的变量 <code>customName</code>，并为其分配常量 <code>&quot;Sam&quot;</code>。由于常量 <code>&quot;Sam&quot;</code> 是无类型的，因此可以将其分配给任何 <code>string</code> 变量。Go 允许这种分配，并且 <code>customName</code> 的类型为 <code>myString</code>。</p><p>现在，我们有一个字符串类型的变量 <code>defaultName</code> 和另一个 <code>myString</code> 类型的变量 <code>customName</code>。即使我们知道 <code>myString</code> 是字符串的别名，Go 的强类型策略也不允许将一种类型的变量分配给另一种类型。因此，不允许 <code>customName = defaultName</code> 这种分配，并且编译器将引发错误 <code>./prog.go:7:20: cannot use defaultName (type string) as type myString in assignment</code>。</p><h2 id="布尔常量"><a href="#布尔常量" class="headerlink" title="布尔常量"></a>布尔常量</h2><p>布尔常量与字符串常量没有什么不同。它们是两个无类型的常量 <code>true</code> 和 <code>false</code>。字符串常量的相同规则也适用于布尔值，因此在此不再赘述。以下是一个解释布尔常量的简单程序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> trueConst = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">type</span> myBool <span class="type">bool</span></span><br><span class="line">    <span class="keyword">var</span> defaultBool = trueConst <span class="comment">//allowed</span></span><br><span class="line">    <span class="keyword">var</span> customBool myBool = trueConst <span class="comment">//allowed</span></span><br><span class="line">    defaultBool = customBool <span class="comment">//not allowed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/h9yzC6RxOR">Run in playground</a></p><p>上面的程序的意思是不言而喻的。</p><h2 id="数字常量"><a href="#数字常量" class="headerlink" title="数字常量"></a>数字常量</h2><p>数字常量包含整形、浮点型和复数常量。这些概念使得数字常量很容易混淆。让我们看一些示例以使事情变得清楚。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">5</span></span><br><span class="line">    <span class="keyword">var</span> intVar <span class="type">int</span> = a</span><br><span class="line">    <span class="keyword">var</span> int32Var <span class="type">int32</span> = a</span><br><span class="line">    <span class="keyword">var</span> float64Var <span class="type">float64</span> = a</span><br><span class="line">    <span class="keyword">var</span> complex64Var <span class="type">complex64</span> = a</span><br><span class="line">    fmt.Println(<span class="string">&quot;intVar&quot;</span>,intVar, <span class="string">&quot;\nint32Var&quot;</span>, int32Var, <span class="string">&quot;\nfloat64Var&quot;</span>, float64Var, <span class="string">&quot;\ncomplex64Var&quot;</span>,complex64Var)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/a8sxVNdU8M">Run in playground</a></p><p>在上面的程序中，常量 <code>a</code> 是无类型的，其值是 5。你可能想知道 <code>a</code> 的默认类型是什么，如果它确实有一个，那么我们如何将其分配给不同类型的变量。答案在于 <code>a</code> 的语法。以下程序将使事情更加清楚。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">5</span></span><br><span class="line">    <span class="keyword">var</span> f = <span class="number">5.6</span></span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">5</span> + <span class="number">6i</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;i&#x27;s type is %T, f&#x27;s type is %T, c&#x27;s type is %T&quot;</span>, i, f, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/0-eVCbJ76B5">Run in playground</a></p><p>在上面的程序中，每个变量的类型由数字常量的语法确定。从语法上看，<code>5</code> 是整数，<code>5.6</code> 是浮点数，而 <code>5 + 6i</code> 是复数。当上面的程序运行时，它会打印：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i<span class="string">&#x27;s type is int, f&#x27;</span>s <span class="built_in">type</span> is float64, c<span class="string">&#x27;s type is complex128</span></span><br></pre></td></tr></table></figure><p>有了这些知识，让我们尝试了解以下程序的运行原理。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">5</span></span><br><span class="line">    <span class="keyword">var</span> intVar <span class="type">int</span> = a</span><br><span class="line">    <span class="keyword">var</span> int32Var <span class="type">int32</span> = a</span><br><span class="line">    <span class="keyword">var</span> float64Var <span class="type">float64</span> = a</span><br><span class="line">    <span class="keyword">var</span> complex64Var <span class="type">complex64</span> = a</span><br><span class="line">    fmt.Println(<span class="string">&quot;intVar&quot;</span>,intVar, <span class="string">&quot;\nint32Var&quot;</span>, int32Var, <span class="string">&quot;\nfloat64Var&quot;</span>, float64Var, <span class="string">&quot;\ncomplex64Var&quot;</span>,complex64Var)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/_zu0iK-Hyj">Run in playground</a></p><p>在上面的程序中，<code>a</code> 的值是 <code>5</code>，而 <code>a</code> 的语法是通用的。它可以表示浮点数，整数或者是没有虚部的复数。 因此，可以将其分配给任何兼容类型。这些常量的默认类型可以被认为是根据上下文动态生成的。 <code>var complex64Var complex64 = a</code> 要求 <code>a</code> 是一个复数，因此它成为一个复数常数。</p><h2 id="数字表达式"><a href="#数字表达式" class="headerlink" title="数字表达式"></a>数字表达式</h2><p>数字常量可以在表达式中自由混合和匹配，并且仅当将它们分配给变量或在代码中需要类型的任何位置使用时，才需要类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5.9</span> / <span class="number">8</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;a&#x27;s type is %T and value is %v&quot;</span>, a, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/Nsak9scUAWg">Run in playground</a></p><p>在上面的程序中，<code>5.9</code> 是语法上的浮点数，<code>8</code> 是语法上的整数。不过，仍允许使用 <code>5.9 / 8</code>，这是因为它们都是数字常量。除法的结果是<code>0.7375</code> 是 <code>float</code>，因此变量 <code>a</code> 是 <code>float</code> 类型。该程序的输出是：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a<span class="string">&#x27;s type is float64 and value is 0.7375</span></span><br></pre></td></tr></table></figure><blockquote><p>原文地址 <a href="https://golangbot.com/constants/">Constants</a><br>原文作者：<a href="https://golangbot.com/about/">Naveen Ramanathan</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">Go 中的常量一词用于表示固定值</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/categories/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/categories/Golang/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Golang" scheme="https://youngjuning.js.org/tags/Golang/"/>
    
    <category term="Go 语言教程" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    <category term="Go 语言教程系列" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
    <category term="Go 常量" scheme="https://youngjuning.js.org/tags/Go-%E5%B8%B8%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言教程系列の数据类型</title>
    <link href="https://youngjuning.js.org/6fecb073913f/"/>
    <id>https://youngjuning.js.org/6fecb073913f/</id>
    <published>2023-03-19T07:04:00.000Z</published>
    <updated>2023-03-26T15:04:38.328Z</updated>
    
    <content type="html"><![CDATA[<p>下面是 Go 语言中可用的基础类型：</p><ul><li>bool</li><li>Numeric Types</li><li>int8, int16, int32, int64, int</li><li>uint8, uint16, uint32, uint64, uint</li><li>float32, float64</li><li>complex64, complex128</li><li>byte</li><li>rune</li><li>string</li></ul><h2 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h2><p><code>bool</code> 表示 <code>boolean</code> 类型，用来表达 <code>true</code> 或 <code>false</code> 的。</p><blockquote><p>生存还是毁灭，这是一个问题！</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="literal">true</span></span><br><span class="line">    b := <span class="literal">false</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;a:&quot;</span>, a, <span class="string">&quot;b:&quot;</span>, b)</span><br><span class="line">    c := a &amp;&amp; b</span><br><span class="line">    fmt.Println(<span class="string">&quot;c:&quot;</span>, c)</span><br><span class="line">    d := a || b</span><br><span class="line">    fmt.Println(<span class="string">&quot;d:&quot;</span>, d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/v_W3HQ0MdY">Run in playground</a></p><p>上面的程序中，变量<code>a</code> 被分配了 <code>true</code>，变量<code>b</code> 被分配了 <code>false</code>。<code>c</code> 被分配了 <code>a &amp;&amp; b</code> 表达式的值。当 <code>a</code> 和 <code>b</code> 的值都为 <code>true</code> 时 <code>&amp;&amp;</code> 操作符返回 <code>true</code>。因此上面的变量 <code>c</code> 的值是 <code>false</code>。</p><p>当 <code>a</code> 或 <code>b</code> 的值为 <code>true</code> 时，<code>||</code> 操作符返回 <code>true</code>。在这个例子中，因为 <code>a</code> 的值是 <code>true</code>，所以变量 <code>d</code> 的值是 <code>true</code>。上面的程序执行后会输出以下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a: <span class="literal">true</span> b: <span class="literal">false</span></span><br><span class="line">c: <span class="literal">false</span></span><br><span class="line">d: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="有符号整形"><a href="#有符号整形" class="headerlink" title="有符号整形"></a>有符号整形</h2><ul><li><strong>int8</strong>：表示 8 位有符号整数<ul><li><strong>size</strong>：8 位</li><li><strong>range</strong>：-128 到 127</li></ul></li><li><strong>int16</strong>：表示 16 位有符号整数<ul><li><strong>size</strong>：16  位</li><li><strong>range</strong>：-32768 到 32767</li></ul></li><li><strong>int32</strong>：表示 32 位有符号整数<ul><li><strong>size</strong>：32 位</li><li><strong>range</strong>：-2147483648 到 2147483647</li></ul></li><li><strong>int64</strong>：表示 64 位有符号整数<ul><li><strong>size</strong>：64 位</li><li><strong>range</strong>：-9223372036854775808 到 9223372036854775807</li></ul></li><li><strong>int</strong>：代表 32 或 64 位整数，具体取决于基础平台。除非需要使用特定大小的整数，否则通常应该使用 <code>int</code> 表示整数。<ul><li><strong>size</strong>：32 位操作系统中是 32 位，64 位操作系统中是 64 位。</li><li><strong>range</strong>：32 位操作系统中是 -2147483648 到 2147483647，64 位操作系统中是 -9223372036854775808 到 9223372036854775807</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">89</span></span><br><span class="line">    b := <span class="number">95</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;value of a is&quot;</span>, a, <span class="string">&quot;and b is&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/NyDPsjkma3">Run in playground</a></p><p>上面的程序会输出 <code>value of a is 89 and b is 95</code>。</p><p>在上面的程序中，<code>a</code> 是 <code>int</code> 类型，<code>b</code> 的类型是从分配给它的值中推断出来的（95）。如上所述，<code>int</code> 的大小在 32 位系统中为 32 位，在 64 位系统中为 64 位。让我们继续进行验证。</p><p>可以使用 <code>Printf</code> 函数中的 <code>％T</code> 格式说明符来打印变量的类型。Go 有一个 <a href="https://golang.org/pkg/unsafe/">unsafe</a> 包，该包拥有 <code>Sizeof</code> 函数，该函数以字节为单位返回传递给它的变量的大小。不安全的软件包应谨慎使用，因为使用它的代码可能存在可移植性问题，但是出于本教程的目的，我们可以使用它。</p><p>以下程序输出变量 <code>a</code> 和 <code>b</code> 的类型和大小。<code>％T</code> 是格式说明符，用于打印类型，而 <code>％d</code> 用于打印尺寸。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">89</span></span><br><span class="line">  b := <span class="number">95</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;value of a is&quot;</span>, a, <span class="string">&quot;and b is&quot;</span>, b)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;type of a is %T, size of a is %d&quot;</span>, a, unsafe.Sizeof(a)) <span class="comment">//type and size of a</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;\ntype of b is %T, size of b is %d&quot;</span>, b, unsafe.Sizeof(b)) <span class="comment">//type and size of b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/mFsmjVk5oc">Run in playground</a></p><p>上面的程序将输出以下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">value of a is 89 and b is 95</span><br><span class="line"><span class="built_in">type</span> of a is int, size of a is 4</span><br><span class="line"><span class="built_in">type</span> of b is int, size of b is 4</span><br></pre></td></tr></table></figure><p>我们可以从上面的输出中推断出 <code>a</code> 和 <code>b</code> 的类型为 <code>int</code>，它们的大小为 32 位（4 个字节）。如果在 64 位系统上运行上述程序，输出将有所不同。 在 64 位系统中，<code>a</code> 和 <code>b</code> 占用 64 位（8 字节）。</p><h2 id="无符号整形"><a href="#无符号整形" class="headerlink" title="无符号整形"></a>无符号整形</h2><ul><li><strong>uint8</strong>：代表 8 位无符号整形<ul><li><strong>size</strong>：8 位</li><li><strong>range</strong>：0 到 255</li></ul></li><li><strong>uint16</strong>：代表 16 位无符号整形<ul><li><strong>size</strong>：16 位</li><li><strong>range</strong>：0 到 65535</li></ul></li><li><strong>uint32</strong>：代表 32 位无符号整形<ul><li><strong>size</strong>：32  位</li><li><strong>range</strong>：0 到 4294967295</li></ul></li><li><strong>uint64</strong>：代表 64 位无符号整形<ul><li><strong>size</strong>：64 位</li><li><strong>range</strong>：0 到 18446744073709551615</li></ul></li><li><strong>uint</strong>： 表示 32 或 64 位无符号整数，具体取决于基础平台。<ul><li><strong>size</strong>：在 32 位系统中为 32 位，在 64 位系统中为 64 位。</li><li><strong>range</strong>：在 32 位系统中是 0 到 4294967295，在 62 位操作系统中是 0 到 18446744073709551615</li></ul></li></ul><h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><ul><li><strong>float32</strong>：32 位浮点数</li><li><strong>float64</strong>：64 位浮点数</li></ul><p>下面是一个简单的程序，用于说明整数和浮点类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  a, b := <span class="number">5.67</span>, <span class="number">8.97</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;type of a %T b %T\n&quot;</span>, a, b)</span><br><span class="line">  sum := a + b</span><br><span class="line">  diff := a - b</span><br><span class="line">  fmt.Println(<span class="string">&quot;sum&quot;</span>, sum, <span class="string">&quot;diff&quot;</span>, diff)</span><br><span class="line">  no1, no2 := <span class="number">56</span>, <span class="number">89</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;sum&quot;</span>, no1+no2, <span class="string">&quot;diff&quot;</span>, no1-no2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/upwUCprT-j">Run in playground</a></p><p><code>a</code> 和 <code>b</code> 的类型是从分配给它们的值推断出来的。在这种情况下，<code>a</code> 和 <code>b</code> 的类型为 <code>float64</code>。（<code>float64</code> 是浮点值的默认类型）。我们将 <code>a</code> 和 <code>b</code> 相加并将其分配给变量 <code>sum</code>。我们从 <code>a</code> 中减去 <code>b</code> 并将其分配给 <code>diff</code>。然后打印出 <code>sum</code> 和 <code>diff</code>。使用 <code>no1</code> 和 <code>no2</code> 进行类似的计算。上面的程序将打印：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> of a float64 b float64</span><br><span class="line"><span class="built_in">sum</span> 14.64 diff -3.3000000000000007</span><br><span class="line"><span class="built_in">sum</span> 145 diff -33</span><br></pre></td></tr></table></figure><h2 id="复数（complex）类型"><a href="#复数（complex）类型" class="headerlink" title="复数（complex）类型"></a>复数（complex）类型</h2><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E5%A4%8D%E6%95%B0_(%E6%95%B0%E5%AD%A6)">复数</a>，为实数的延伸，它使任一多项式方程都有根。——维基百科</p></blockquote><ul><li><strong>complex64</strong>：具有 <code>float32</code> 实部和虚部的复数</li><li><strong>complex128</strong>：具有 <code>float64</code> 实部和虚部的复数</li></ul><p>内置函数 <code>complex</code> 用于构造具有实部和虚部的复数。<code>complex</code> 函数具有以下定义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">complex</span><span class="params">(r, i FloatType)</span></span> ComplexType</span><br></pre></td></tr></table></figure><p>它以实部和虚部作为参数，并返回复数类型。实部和虚部都必须是同一类型。即 <code>float32</code> 或 <code>float64</code>。如果实部和虚部都为 <code>float32</code>，则此函数返回类型为 <code>complex64</code> 的复数值。如果实部和虚部都为 <code>float64</code> 类型，则此函数返回 <code>complex128</code> 类型的复数值：</p><p>复数可以使用短声明语法创建：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c := <span class="number">6</span> + <span class="number">7i</span></span><br></pre></td></tr></table></figure><p>让我们来写一个小程序助于理解复数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  c1 := <span class="built_in">complex</span>(<span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line">  c2 := <span class="number">8</span> + <span class="number">27i</span></span><br><span class="line">  cadd := c1 + c2</span><br><span class="line">  fmt.Println(<span class="string">&quot;sum:&quot;</span>, cadd)</span><br><span class="line">  cmul := c1 * c2</span><br><span class="line">  fmt.Println(<span class="string">&quot;product:&quot;</span>, cmul)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/kEz1uKCdKs">Run in playground</a></p><p>在上面的程序中，<code>c1</code> 和 <code>c2</code> 是两个复数。<code>c1</code> 的实部为 5，虚部为 7。 <code>c2</code> 具有实部 8 和虚部 27。<code>cadd</code> 被分配为 <code>c1</code> 和 <code>c2</code> 的和，而 <code>cmul</code> 被分配为 <code>c1</code> 和 <code>c2</code> 的乘积。该程序将输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>: (13+34i)</span><br><span class="line">product: (-149+191i)</span><br></pre></td></tr></table></figure><h2 id="其他数字类型"><a href="#其他数字类型" class="headerlink" title="其他数字类型"></a>其他数字类型</h2><ul><li><strong>byte</strong>：<code>uint8</code> 的别名</li><li><strong>rune</strong>：<code>int32</code> 的别名</li></ul><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>在 Go 语言中，字符串是字节的集合。如果这个定义没有任何意义，那也没关系。现在，我们可以假设字符串是字符的集合。</p><p>让我们使用字符串类型来写一个程序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  first := <span class="string">&quot;Naveen&quot;</span></span><br><span class="line">  last := <span class="string">&quot;Ramanathan&quot;</span></span><br><span class="line">  name := first +<span class="string">&quot; &quot;</span>+ last</span><br><span class="line">  fmt.Println(<span class="string">&quot;My name is&quot;</span>,name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/CI6phwSVel">Run in playground</a></p><p>在上面的程序中，首先分配了字符串 <code>Naveen</code>，最后分配了字符串 <code>Ramanathan</code>。可以使用 <code>+</code> 运算符将字符串连接在一起。为 <code>name</code> 分配了 <code>first</code> 的值，该值连接到一个空格，后跟一个 <code>last</code>。上面的程序将输出 <code>My name is Naveen Ramanathan</code>。</p><p>还有一些可以对字符串执行的操作。我们将在单独的教程中介绍这些内容。</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>Go 对于类型明确非常严格。没有自动类型提升或转换。让我们看一个例子来理解这意味着什么：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  i := <span class="number">55</span> <span class="comment">//int</span></span><br><span class="line">  j := <span class="number">67.8</span> <span class="comment">//float64</span></span><br><span class="line">  sum := i + j <span class="comment">//int + float64 not allowed</span></span><br><span class="line">  fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/m-TMRpmmnm">Run in playground</a></p><p>上面的代码在 C 语言中是完全合法的。但是在使用 go 的情况下，这将行不通。 <code>i</code> 是 <code>int</code> 类型，<code>j</code> 是 <code>float64</code> 类型。我们正在尝试添加 2 个不同类型的数字，这是不允许的。运行程序时，你将得到 <code>main.go：10:invalid operation:i + j(mismatched types int and float64)</code> 的错误。</p><p>要解决该错误，<code>i</code> 和 <code>j</code> 应该具有相同的类型。让我们将 <code>j</code> 转换为 <code>int</code>。<code>T(v)</code> 是将值 <code>v</code> 转换为类型 <code>T</code> 的语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  i := <span class="number">55</span> <span class="comment">//int</span></span><br><span class="line">  j := <span class="number">67.8</span> <span class="comment">//float64</span></span><br><span class="line">  sum := i + <span class="type">int</span>(j) <span class="comment">//j is converted to int</span></span><br><span class="line">  fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/mweu3n3jMy">Run in playground</a></p><p>现在，当你运行上述程序时，你会看到 <code>122</code> 作为输出。</p><p>分配也是如此。需要进行显式类型转换才能将一种类型的变量分配给另一种类型。以下程序能够证实这一点：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  i := <span class="number">10</span></span><br><span class="line">  <span class="keyword">var</span> j <span class="type">float64</span> = <span class="type">float64</span>(i) <span class="comment">//this statement will not work without explicit conversion</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;j&quot;</span>, j)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/Y2uSYYr46c">Run in playground</a></p><p>在第 9 行中，<code>i</code> 转换为 <code>float64</code>，然后被分配给 <code>j</code>。当你尝试将 <code>i</code> 分配给 <code>j</code> 而不进行任何类型转换时，编译器将引发错误。</p><blockquote><p>原文地址 <a href="https://golangbot.com/types/">Types</a><br>原文作者：<a href="https://golangbot.com/about/">Naveen Ramanathan</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">本文介绍了 Go 的数据类型。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/categories/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/categories/Golang/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Golang" scheme="https://youngjuning.js.org/tags/Golang/"/>
    
    <category term="Go 语言教程" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    <category term="Go 语言教程系列" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
    <category term="Go 数据类型" scheme="https://youngjuning.js.org/tags/Go-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言教程系列の变量</title>
    <link href="https://youngjuning.js.org/019671ed10fd/"/>
    <id>https://youngjuning.js.org/019671ed10fd/</id>
    <published>2023-03-19T07:03:00.000Z</published>
    <updated>2023-03-26T15:04:38.328Z</updated>
    
    <content type="html"><![CDATA[<p>这是我们 Golang 教程系列中的第三篇教程，它涉及 Golang 中的变量。</p><p>你可以先阅读 <a href="https://juejin.cn/post/6942876429625327653">《Go 语言教程系列》Hello World | Go 主题月</a> 来了解关于配置 Go 和运行 hello world 程序的信息。</p><h2 id="变量是什么？"><a href="#变量是什么？" class="headerlink" title="变量是什么？"></a>变量是什么？</h2><p>变量是为内存地址指定的名称，用于存储特定类型的值。Go 中有多种语法来声明变量。让我们一一看一下。</p><h2 id="声明单个变量"><a href="#声明单个变量" class="headerlink" title="声明单个变量"></a>声明单个变量</h2><p><strong>var name type</strong> 是声明单个变量的语法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> age <span class="type">int</span> <span class="comment">// 变量声明</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;My age is&quot;</span>, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/lvKWH29bwke">Run in playground</a></p><p>语句 <code>var age int</code> 声明了一个类型为 <code>int</code> 的名为 <code>age</code> 的变量。我们没有为该变量赋任何值。如果未为变量分配任何值，则 Go 会使用变量类型的“零值”自动将其初始化。在这种情况下，为年龄分配了值 <code>0</code>，即 <code>int</code>的零值。如果运行此程序，则可以看到以下输出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My age is <span class="number">0</span></span><br></pre></td></tr></table></figure><p>可以为变量分配给其类型的任何值。在上面的程序中，可以为 <code>age</code> 分配任何整数值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> age <span class="type">int</span> <span class="comment">// 变量声明</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;My age is&quot;</span>, age)</span><br><span class="line">    age = <span class="number">29</span> <span class="comment">// 分配</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;My age is&quot;</span>, age)</span><br><span class="line">    age = <span class="number">54</span> <span class="comment">// 分配</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;My new age is&quot;</span>, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/hSsWbF-3lQU">Run in playground</a></p><p>上面的程序将打印以下输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">My age is  <span class="number">0</span></span><br><span class="line">My age is <span class="number">29</span></span><br><span class="line">My <span class="built_in">new</span> age is <span class="number">54</span></span><br></pre></td></tr></table></figure><h2 id="声明一个具有初始值的变量"><a href="#声明一个具有初始值的变量" class="headerlink" title="声明一个具有初始值的变量"></a>声明一个具有初始值的变量</h2><p>声明变量时，还可以为其提供初始值。以下是声明具有初始值的变量的语法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="keyword">type</span> = initialvalue</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> age <span class="type">int</span> = <span class="number">29</span> <span class="comment">// 带有初始值的变量声明</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;My age is&quot;</span>, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/NAbtaE0pjZ8">Run in playground</a></p><p>在上面的程序中，<code>age</code>是类型为 <code>int</code> 的变量，其初始值为 <code>29</code>。上面的程序将输出以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My age is 29</span><br></pre></td></tr></table></figure><p>它显示年龄已经用值 29 初始化。</p><h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><p>如果变量具有初始值，Go 将自动使用该初始值来推断该变量的类型。 因此，如果变量具有初始值，则可以删除变量声明中的 <code>type</code>。</p><p>如果使用以下语法声明了变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = initialvalue</span><br></pre></td></tr></table></figure><p>Go 会自动从初始值推断出该变量的类型。</p><p>在下面的示例中，我们可以看到变量 <code>age</code> 的类型 <code>int</code> 已在第 6 行中删除。由于变量的初始值为 29，因此 Go 可以推断出它的类型为 <code>int</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">29</span> <span class="comment">// 类型将被推断为 int</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;My age is&quot;</span>, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/meyJPveRLrK">Run in playground</a></p><h2 id="多变量声明"><a href="#多变量声明" class="headerlink" title="多变量声明"></a>多变量声明</h2><p>多变量声明可以使用单行语句来声明多个变量。</p><p><code>var name1, name2 type = initialvalue1, initialvalue2</code> 是多变量声明的语法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> width, height <span class="type">int</span> = <span class="number">100</span>, <span class="number">50</span> <span class="comment">// 声明多变量</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;width is&quot;</span>, width, <span class="string">&quot;height is&quot;</span>, height)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/4aOQyt55ah">Run in playground</a></p><p>如果变量具有初始值，则可以删除该类型。 由于上述程序具有变量的初始值，因此可以删除 <code>int</code> 类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> width, height = <span class="number">100</span>, <span class="number">50</span> <span class="comment">// int 被移除了</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;width is&quot;</span>, width, <span class="string">&quot;height is&quot;</span>, height)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/f7deGqYFNEL">Run in playground</a></p><p>上面的程序将以 <code>print width is 100 height is 50</code> 作为输出。</p><p>就像你现在可能已经猜到的那样，如果没有为 <code>width</code> 和 <code>height</code> 指定初始值，则它们的初始值将被指定为 <code>0</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> width, height <span class="type">int</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;width is&quot;</span>, width, <span class="string">&quot;height is&quot;</span>, height)</span><br><span class="line">    width = <span class="number">100</span></span><br><span class="line">    height = <span class="number">50</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;new width is&quot;</span>, width, <span class="string">&quot;new height is&quot;</span>, height)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/-4CnqDgWOKG">Run in playground</a></p><p>上面的程序会打印如下内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">width is 0 height is 0</span><br><span class="line">new width is 100 new height is 50</span><br></pre></td></tr></table></figure><p>在某些情况下，我们可能希望在单个语句中声明属于不同类型的变量。这样做的语法是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    name1 = initialvalue1</span><br><span class="line">    name2 = initialvalue2</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>以下程序使用上述语法声明不同类型的变量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        name   = <span class="string">&quot;naveen&quot;</span></span><br><span class="line">        age    = <span class="number">29</span></span><br><span class="line">        height <span class="type">int</span></span><br><span class="line">    )</span><br><span class="line">    fmt.Println(<span class="string">&quot;my name is&quot;</span>, name, <span class="string">&quot;, age is&quot;</span>, age, <span class="string">&quot;and height is&quot;</span>, height)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/7pkp74h_9L">Run in playground</a></p><p>在这里，我们声明了一个 <code>string</code> 类型的变量 <code>name</code>，类型为 <code>age</code> 的变量和 <code>height</code> 为 int 的变量。</p><p>运行以上程序将打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my name is naveen , age is 29 and height is 0</span><br></pre></td></tr></table></figure><h2 id="短声明"><a href="#短声明" class="headerlink" title="短声明"></a>短声明</h2><p>Go 还提供了另一种简洁的声明变量的方法。这被称为短声明，它使用<code>:=</code> 运算符。</p><p><code>name := initialvalue</code> 是声明变量的简写语法。</p><p>以下程序使用简写形式的语法来声明变量 <code>count</code>，并将其初始化为 <code> 10</code>。Go 会自动推断 <code>count</code> 是 <code>int</code> 类型的，因为它已经用整数值 <code>10</code>初始化了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    count := <span class="number">10</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Count =&quot;</span>,count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/L5_8aru7VQM">Run in playground</a></p><p>以上程序将打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Count = 10</span><br></pre></td></tr></table></figure><p>It is also possible to declare multiple variables in a single line using short hand syntax.</p><p>你也可以使用短声明在一行内声明多个变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  name, age := <span class="string">&quot;naveen&quot;</span>, <span class="number">29</span> <span class="comment">// short hand declaration</span></span><br><span class="line"></span><br><span class="line">  fmt.Println(<span class="string">&quot;my name is&quot;</span>, name, <span class="string">&quot;age is&quot;</span>, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/ctqgw4w6kx">Run in playground</a></p><p>上面的程序声明了两个变量，分别是类型为 <code>string</code> 的 <code>name</code> 和类型为 <code>int</code> 的 <code>age</code>。</p><p>如果运行上述程序，则可以看到 <code>my name is naveen age is 29</code> 被打印出来。</p><p>短声明要求赋值左侧所有变量的初始值。以下程序将显示错误 <code>assignment mismatch: 2 variables but 1 values</code>。这是因为 <code>age</code> 尚未分配值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  name, age := <span class="string">&quot;naveen&quot;</span> <span class="comment">//error</span></span><br><span class="line"></span><br><span class="line">  fmt.Println(<span class="string">&quot;my name is&quot;</span>, name, <span class="string">&quot;age is&quot;</span>, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/wZd2HmDvqw">Run in playground</a></p><p>仅当 <code>:=</code> 左侧至少有一个新声明的变量时，才可以使用简写语法。注意以下程序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a, b := <span class="number">20</span>, <span class="number">30</span> <span class="comment">// declare variables a and b</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;a is&quot;</span>, a, <span class="string">&quot;b is&quot;</span>, b)</span><br><span class="line">    b, c := <span class="number">40</span>, <span class="number">50</span> <span class="comment">// b is already declared but c is new</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;b is&quot;</span>, b, <span class="string">&quot;c is&quot;</span>, c)</span><br><span class="line">    b, c = <span class="number">80</span>, <span class="number">90</span> <span class="comment">// assign new values to already declared variables b and c</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;changed b is&quot;</span>, b, <span class="string">&quot;c is&quot;</span>, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/MSUYR8vazB">Run in playground</a></p><p>在上面的程序中，在第 8 行中，已经声明了<strong>b</strong>，但是新声明了<strong>c</strong>，因此它可以工作并输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a is 20 b is 30</span><br><span class="line">b is 40 c is 50</span><br><span class="line">changed b is 80 c is 90</span><br></pre></td></tr></table></figure><p>而如果我们运行以下程序，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a, b := <span class="number">20</span>, <span class="number">30</span> <span class="comment">//a and b declared</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;a is&quot;</span>, a, <span class="string">&quot;b is&quot;</span>, b)</span><br><span class="line">    a, b := <span class="number">40</span>, <span class="number">50</span> <span class="comment">//error, no new variables</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/EYTtRnlDu3">Run in playground</a></p><p>它将显示错误 <code>/prog.go:8:10: no new variables on left side of :=</code> ，这是因为变量 <strong>a</strong> 和 <strong>b</strong> 已经声明，并且 <code>:=</code> 左侧没有新声明的变量。</p><p>还可以为变量分配在运行时计算的值。注意以下程序，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a, b := <span class="number">145.8</span>, <span class="number">543.8</span></span><br><span class="line">    c := math.Min(a, b)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Minimum value is&quot;</span>, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/Kk84pOyFgQB">Run in playground</a></p><p>在上述程序中，<a href="https://golang.org/pkg/math/">math</a> 是一个程序包，<a href="https://golang.org/pkg/math/#Min">Min</a> 是该程序包中的函数 。现在不用担心，我们将在后续的教程中详细讨论软件包和功能。我们需要知道的是，<code>c</code> 的值是在运行时计算出来的，它是 <code>a</code> 和 <code>b</code> 的最小值。 上面的程序将打印，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Minimum value is  145.8</span><br></pre></td></tr></table></figure><p>由于 Go 是强类型的，因此不能将声明为属于一种类型的变量分配给另一种类型的值。以下程序将打印错误 <code>cannot use &quot;naveen&quot; (type string) as type int in assignment</code>，因为 <code>age</code> 被声明为类型 <code>int</code>，并且我们正在尝试为其分配 <code>string</code> 类型的值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    age := <span class="number">29</span>      <span class="comment">// age is int</span></span><br><span class="line">    age = <span class="string">&quot;naveen&quot;</span> <span class="comment">// error since we are trying to assign a string to a variable of type int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/K5rz4gxjPj">Run in playground</a></p><p>谢谢阅读。 请在评论部分留下你的反馈和查询。<br>贵的反馈和意见。谢谢阅读。</p><blockquote><p>原文地址 <a href="https://golangbot.com/variables/">Variables</a><br>原文作者：<a href="https://golangbot.com/about/">Naveen Ramanathan</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">这是我们 Golang 教程系列中的第三篇教程，它涉及 Golang 中的变量。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/categories/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/categories/Golang/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Golang" scheme="https://youngjuning.js.org/tags/Golang/"/>
    
    <category term="Go 语言教程" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    <category term="Go 语言教程系列" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
    <category term="Golang 变量" scheme="https://youngjuning.js.org/tags/Golang-%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言教程系列のHello World</title>
    <link href="https://youngjuning.js.org/6cbf2167b038/"/>
    <id>https://youngjuning.js.org/6cbf2167b038/</id>
    <published>2023-03-19T07:02:00.000Z</published>
    <updated>2023-03-26T15:04:38.328Z</updated>
    
    <content type="html"><![CDATA[<p>这是《Golang 教程系列》的第二篇。如果还没有，你可能需要先看一下我们的上一篇教程 <a href="https://juejin.cn/post/6942492190291525662">Golang 介绍和环境安装</a> 以了解一下 Golang 是什么以及如何下载 Golang。</p><p>这篇教程是基于 Go 1.16 以上的版本。</p><p>学习编程语言没有比让自己满手沾满代码的血🩸更有效的方法了。让我们一起开始第一个 Go 程序吧。（First Blood）</p><h2 id="设置开发环境"><a href="#设置开发环境" class="headerlink" title="设置开发环境"></a>设置开发环境</h2><p>让我们先创建一个编写 hello world 程序的文件夹。请打开命令行然后运行下面的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/Desktop/learngo/</span><br></pre></td></tr></table></figure><p>上面的命令将会在用户桌面创建一个名为 <code>learngo</code> 的文件夹（译者开发环境为 Macbook Pro）。你可以在任意位置创建目录编写代码。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>使用你喜爱的文本编辑器在 <code>learngo</code> 文件夹中创建一个名为 <code>main.go</code> 的文件并写入以下内容：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Go 中将包含 <code>main</code> 函数的文件命名为 <code>main.go</code> 是约定俗称的，但是其他名称也是可以使用。</p><h2 id="运行一个程序"><a href="#运行一个程序" class="headerlink" title="运行一个程序"></a>运行一个程序</h2><p>有几种不同的方式来运行 Go 程序。让我们一一看一下。</p><h3 id="1-go-install"><a href="#1-go-install" class="headerlink" title="1. go install"></a>1. <code>go install</code></h3><p>第一个运行 Go 程序的方法是使用 <code>go install</code> 命令。让我们来使用 <code>cd</code> 命令进入刚创建的 <code>learngo</code> 目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Desktop/learngo/</span><br></pre></td></tr></table></figure><p>接着运行下面的命令。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install</span><br></pre></td></tr></table></figure><p>上面的命令将编译当前程序并将其安装（拷贝）二进制可执行文件到 <code>~/go/bin</code> 目录。二进制可执行文件的名字是包含 <code>main.go</code> 文件的文件夹名。在我们示例中，它将被命名为 <code>learngo</code>。</p><p>当你尝试安装程序时，你可能会遇到以下错误。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go: cannot find main module; see <span class="string">&#x27;go help modules&#x27;</span></span><br></pre></td></tr></table></figure><p>上面的错误实际上意味着，<code>go install</code> 无法找到 main 模块，这是因为我们没有初始化 go modules，我们使用以下命令初始化模块：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod init github.com/youngjuning/learngo</span><br></pre></td></tr></table></figure><p>上面的命令会在 <code>learngo</code> 目录下创建一个 <code>go.mod</code> 文件，该文件是程序模块定义的地方，作用类似于 Node 的 <code>package.json</code> 文件。然后我再执行 <code>go install</code> 便可以成功。</p><p>你可以在命令行输入 <code>ls -al ~/go/bin/learngo</code>，然后你会发现 <code>go install</code> 实际上是把二进制可执行文件放在了 <code>~/go/bin</code> 中。</p><p>现在让我们运行编译后的二进制可执行文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/go/bin/learngo</span><br></pre></td></tr></table></figure><p>上面的命令将运行 <code>learngo</code> 并打印出以下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure><p>恭喜你！你已经成功地运行了你的第一个 Go 程序。</p><p>如果你不想每次都输入完整的 <code>~/go/bin/learngo</code> 路径来运行程序，你可以添加 <code>~/go/bin/</code> 到你的 <code>PATH</code> 中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPATH=~/.go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$GOPATH</span>/bin</span><br></pre></td></tr></table></figure><p>现在你可以在命令行中只输入 <code>learngo</code> 来运行程序。</p><p>你可能想知道，当 <code>learngo</code> 目录包含多个 Go 文件而不只是只有 <code>main.go</code> 时会发生什么。在这种情况下，<code>go install</code> 将如何工作？ 请继续往下看，我们将在了解软件包和 Go 模块时讨论这些内容。</p><h3 id="2-go-build"><a href="#2-go-build" class="headerlink" title="2. go build"></a>2. go build</h3><p>运行程序的第二个选项是使用 <code>go build</code>。<code>go build</code> 与 <code>go install</code> 非常相似，不同之处在于它不会将编译的二进制文件安装（拷贝）到路径 <code>~/go/bin/</code>，而是在 <code>go build</code> 所在的文件夹下创建二进制文件：</p><p>在命令行输入以下命令来切换当前目录到 <code>learngo</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Desktop/learngo/</span><br></pre></td></tr></table></figure><p>然后输入下面的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build</span><br></pre></td></tr></table></figure><p>上面的命令将会在当前目录下创建一个名为 <code>learngo</code> 的二进制可执行文件。<code>ls -al</code> 命令可以证实名为 <code>learngo</code> 的文件被创建了。</p><p>输入 <code>./learngo</code> 来运行程序，将会输入和前面一样的内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure><p>到此，我们用 <code>go build</code> 也成功地运行了我们的第一个 Go 程序 😁</p><h3 id="3-go-run"><a href="#3-go-run" class="headerlink" title="3. go run"></a>3. go run</h3><p>第三个运行程序的方法是使用 <code>go run</code> 命令。</p><p>在命令行输入 <code>cd ~/Desktop/learngo</code> 命令来改变当前目录为 <code>learngo</code>。</p><p>然后输入以下命令。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run main.go</span><br></pre></td></tr></table></figure><p>输入以上命令后，我们也可以看到一样的输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure><p><code>go run</code> 命令和 <code>go build</code> 或 <code>go install</code> 命令之间的一个细微差别是，<code>go run</code> 要求使用 <code>.go</code> 文件的名称作为参数。</p><p>在引擎盖下，<code>go run</code> 的工作原理与 <code>go build</code> 非常相似。无需将程序编译并安装到当前目录，而是将文件编译到一个临时位置并从该位置运行文件。如果你想知道 <code>go run</code> 将文件编译到的位置，请使用 <code>--work</code> 参数运行 <code>go run</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run --work main.go</span><br></pre></td></tr></table></figure><p>在我的场景中，运行以上命令会输出下面的内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WORK=/var/folders/mf/_fk8g5jn23gcw970pypqlv4m0000gn/T/go-build3519209434</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><p><code>WORK</code> 的值表示程序将被编译到的一个临时位置。</p><p>就我的场景而言，程序被编译到 <code>/var/folders/mf/_fk8g5jn23gcw970pypqlv4m0000gn/T/go-build3519209434</code> 。这可能因你的情况而异 😁</p><h3 id="4-Go-Playground"><a href="#4-Go-Playground" class="headerlink" title="4. Go Playground"></a>4. Go Playground</h3><p>运行程序的最后一种方法是使用 go playground。尽管此方法有一些限制，但由于我们可以使用浏览器并且不需要在本地本地安装 Go：我已经为 Hello World 程序创建了一个 playground。 <a href="https://play.golang.org/p/oXGayDtoLPh">点击此处</a> 以在线运行该程序。</p><p>你还可以使用 Go Playground 与他人分享你的源代码。</p><p>既然我们知道4种不同的方式来运行程序，那么你可能会很困惑该使用哪种方法。答案是，当我想快速检查逻辑或找出标准库函数如何工作时，通常使用 <a href="https://play.golang.org/">playground</a>。在大多数其他情况下，我更喜欢 <code>go install</code>，因为它为我提供了从终端中任何目录运行程序的选项，因为它将所有程序编译到标准的 <code>~/go/bin/</code> 路径。</p><h2 id="对-Hello-World-程序的简短解析"><a href="#对-Hello-World-程序的简短解析" class="headerlink" title="对 Hello World 程序的简短解析"></a>对 Hello World 程序的简短解析</h2><p>这是我们刚刚创建的简单的 hello world 程序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将简要讨论该程序的每一行的作用。在接下来的教程中，我们将深入研究程序的每个部分。</p><p><strong>package main</strong> - 每个 go 文件都必须以 <code>package name</code> 开始。Packages 用于提供代码分隔和可重用性。此处使用包名称 <code>main</code>。主要功能应始终保留在 main package 中。</p><p><strong>import “fmt”</strong> - <code>import</code> 语句用于导入其他软件包。在我们的例子中，<code>fmt</code> 包被导入，它将在 <code>main</code> 函数中用于将文本打印到标准输出。</p><p><strong>func main()</strong> - <code>func</code> 关键字标记函数的开始。<code>main</code> 是一个特殊函数。程序从 <code>main</code> 函数开始执行。大括号 <code>&#123;</code> 和 <code>&#125;</code> 表示 <code>main</code> 函数的开始和结束。</p><p><strong>fmt.Println(“Hello World”)</strong> - <code>fmt</code> 软件包的 <code>PrintIn</code> 函数用于将文本写入标准输出。<code>package.function()</code> 是在包中调用函数的语法。</p><p>本文的实例代码可以在 <a href="https://github.com/golangbot/hello">github</a> 下载。</p><blockquote><p>原文地址 <a href="https://golangbot.com/hello-world-gomod/">Hello World</a><br>原文作者：<a href="https://golangbot.com/about/">Naveen Ramanathan</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">学习编程语言没有比让自己满手沾满代码的血🩸更有效的方法了。让我们一起开始第一个 Go 程序吧。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/categories/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/categories/Golang/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Golang" scheme="https://youngjuning.js.org/tags/Golang/"/>
    
    <category term="Go 语言教程" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    <category term="Go 语言教程系列" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言教程系列の介绍和环境安装</title>
    <link href="https://youngjuning.js.org/f6093e483bf0/"/>
    <id>https://youngjuning.js.org/f6093e483bf0/</id>
    <published>2023-03-19T07:01:00.000Z</published>
    <updated>2023-03-26T15:04:38.328Z</updated>
    
    <content type="html"><![CDATA[<p>这是我们 Golang 教程系列中的第一篇教程。本教程介绍了 Go，并讨论了选择 Go 而不是其他编程语言的原因。我们还将学习如何在 Mac OS，Windows 和 Linux 中安装 Go。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Go 也被称为 Golang，是 Google 开发的一种开源、编译和静态类型的编程语言。Go 创作背后的关键人物是 Rob Pike，Ken Thompson 和Robert Griesemer。Go 于 2009 年 11 月公开发布。</p><p>Go 是一种通用的编程语言，语法简单并具有强大的标准库作为后盾。Go 大放异彩的关键领域之一是创建高可用性和可伸缩性的 Web 应用程序。Go 还可以用于创建命令行应用程序、桌面应用程序甚至移动应用程序。</p><h2 id="Go-的优势"><a href="#Go-的优势" class="headerlink" title="Go 的优势"></a>Go 的优势</h2><p>当大量其他语言（例如 python，ruby，nodejs …）可以实现相同需求时，为什么选择 Go 作为服务器端编程语言。</p><p>这里是我选择 Go 时发现的一些优点。</p><h3 id="简单的语法"><a href="#简单的语法" class="headerlink" title="简单的语法"></a>简单的语法</h3><p>语法简单明了，并且该语言不会因不必要的功能而显得臃肿。这使得编写可读性和可维护性的代码变得容易。</p><h3 id="易于编写并发程序"><a href="#易于编写并发程序" class="headerlink" title="易于编写并发程序"></a>易于编写并发程序</h3><p>并发是语言的固有部分。直接的影响是编写多线程程序变得简直小菜一碟。这是通过 Goroutines 和管道实现的，我们将在接下来的教程中对其进行讨论。</p><h3 id="编译语言"><a href="#编译语言" class="headerlink" title="编译语言"></a>编译语言</h3><p>Go是一种编译语言。源代码被编译为本地二进制文件。 解释语言（例如，nodejs 中使用的 JavaScript 和 Python）缺少此功能。</p><h3 id="快速编译"><a href="#快速编译" class="headerlink" title="快速编译"></a>快速编译</h3><p>Go编译器非常神奇，并且从一开始就被设计为快速的。</p><h3 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h3><p>Go 编译器支持静态链接。整个 Go 项目可以静态链接到一个大型的二进制文件中，并且可以轻松部署在云服务器中，而不必担心依赖关系。</p><h3 id="Go-工具链"><a href="#Go-工具链" class="headerlink" title="Go 工具链"></a>Go 工具链</h3><p>工具在 Go 中值得特别提及。Go 附带了功能强大的工具，可以帮助开发人员编写更好的代码。常用的工具有：</p><ul><li><code>gofmt</code>：<code>gofmt</code> 是用于自动格式化 go 源代码的。它使用制表符进行缩进，并使用空格进行对齐。</li><li><code>vet</code>：<code>vet</code> 分析 go 源代码并报告可能的可疑代码。vet 报告的所有内容都不是真正的问题，但具有捕获编译器未报告的错误的能力，例如使用 <code>Printf</code> 时格式说明符不正确。</li><li><code>golint</code>：golint 用于识别代码中的样式问题。</li></ul><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>Go 使用垃圾回收，因此内存管理几乎会自动执行，开发人员无需担心内存管理问题。 这也有助于轻松地编写并发程序。</p><h3 id="简单语言规范"><a href="#简单语言规范" class="headerlink" title="简单语言规范"></a>简单语言规范</h3><p>语言规范非常简单。 整个规范只有一个页面，你甚至可以使用它来编写自己的编译器 :)</p><h3 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h3><p>最后但并非最不重要的一点是，Go 是一个开源项目。 你可以参与 Go 项目并为该项目做出贡献。</p><h2 id="使用-Go-构建的热门产品"><a href="#使用-Go-构建的热门产品" class="headerlink" title="使用 Go 构建的热门产品"></a>使用 Go 构建的热门产品</h2><p>以下是一些使用 Go 构建的流行产品。</p><ul><li>Google 使用 Go 开发了 Kubernetes using。</li><li>Docker, 世界上最著名的容器平台是使用 Go 开发的</li><li>Dropbox 已将其性能敏感组件从 Python 迁移到 Go。</li><li>Infoblox 的 下一代网络产品是使用 Go 开发的。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Go 可以安装在 Mac，Windows 和 Linux 这三个平台上。你可以从<a href="https://golang.org/dl/">https://golang.org/dl/</a> 下载对应平台的二进制文件。</p><h3 id="Mac-OS"><a href="#Mac-OS" class="headerlink" title="Mac OS"></a>Mac OS</h3><p>从 <a href="https://golang.org/dl/">https://golang.org/dl/</a> 下载 Mac OS 安装程序。双击开始安装。按照提示进行操作，这会将 Golang 安装在 <code>/usr/local/go</code> 中，并且还将文件夹 <code>/usr/local/go/bin</code> 添加到 <code>PATH</code> 环境变量中。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>从 <a href="https://golang.org/dl/">https://golang.org/dl/</a> 下载 MSI 安装程序。双击开始安装，然后按照提示进行操作。 这会将Go安装在位置 <code>c:\Go</code>，还将目录 <code>c:\Go\bin</code> 添加到你的路径环境变量中。</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>从 <a href="https://golang.org/dl/">https://golang.org/dl/</a> 下载 tar 文件并将其解压缩到 <code>/usr/local</code>。</p><p>将 <code>/usr/local/go/bin</code> 添加到 <code>PATH</code> 环境变量中。这将在 Linux 中安装 Go。</p><h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><p>要验证 Go 安装是否成功，请在终端中键入命令 <code>go version</code>，它将输出已安装的 Go 版本。这是我终端的输出。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.16 darwin/amd64</span><br></pre></td></tr></table></figure><p>在编写本教程时，1.16 是 Go 的最新版本。这证明 Go 已成功安装。在下一个教程中，我们将在 Go 中编写第一个 Hello World 程序 :)</p><p>请提供你宝贵的反馈和意见。谢谢阅读。</p><blockquote><p>原文地址 <a href="https://golangbot.com/golang-tutorial-part-1-introduction-and-installation/">Part 1: Introduction and Installation</a><br>原文作者：<a href="https://golangbot.com/about/">Naveen Ramanathan</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">这是我们 Golang 教程系列中的第一篇教程。本教程介绍了 Go，并讨论了选择 Go 而不是其他编程语言的原因。我们还将学习如何在 Mac OS，Windows 和 Linux 中安装 Go。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/categories/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/categories/Golang/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="swiper" scheme="https://youngjuning.js.org/tags/swiper/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/tags/Golang/"/>
    
    <category term="Go 语言教程" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    <category term="Go 语言教程系列" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
    <category term="Go 安装教程" scheme="https://youngjuning.js.org/tags/Go-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Chat GPT-4 已经问世——它会改变我们的生活吗？</title>
    <link href="https://youngjuning.js.org/197cfff33155/"/>
    <id>https://youngjuning.js.org/197cfff33155/</id>
    <published>2023-03-17T06:14:20.000Z</published>
    <updated>2023-03-26T15:04:38.324Z</updated>
    
    <content type="html"><![CDATA[<p>科技世界正在庆祝最新版本的 ChatGPT-4。</p><div class="note info flat"><p>如果您还没有注册 ChatGpt，可以参考 <a href="https://youngjuning.js.org/d744d1d3d1e8/">OpenAI 推出超神 ChatGPT 注册攻略来了</a> 快速注册一个。</p></div><p>“Chat GPT已经长大了，” 哥伦比亚大学工程教授霍德•利普森说道。</p><p>作为 AI 聊天机器人的 ChatGPT 于 2022 年 11 月诞生，现在已经走向成年，其创造者微软资助的 Open AI 已经第四次更新技术，使这个神奇的机器人变得更加智能、快速和有趣。</p><p><strong>以下是一个 ChatGP T的笑话：</strong></p><ul><li>Madonna 为什么要过马路？<blockquote><p>去马路的另一边摆 POSE（strike a pose）。</p></blockquote></li></ul><p>GPT-3 能够写诗、解决问题和总结文本，但人们对其准确性存在担忧。而 GPT-4 解决了这些问题。事实上，它在 GRE、MCAT、LSAT 和 SAT 等多项测试中表现优异，甚至还可以理解图片。</p><p>“有人试过这个功能，他们给 ChatGPT 展示了我的冰箱照片，问我晚餐可以做什么？” Lipson 说。“看到酸奶和草莓后，ChatGPT 建议制作一份完美的比萨饼。这对于 AI 来说是一个重大突破。”</p><p>它可以翻译、计算和编码。对于没有医生资源的人来说，ChatGPT 的知识和专业可以拯救生命。但是，尽管 ChatGPT 带来了很多好处，技术专家们承认这种原始智能是一把双刃剑，如果被恶意利用，可能会造成不可预测的后果。</p><p>“你可以创建垃圾邮件，你可以创建非常令人信服的电子邮件，你可以欺骗人们。”Lipson 警告说。“我认为你可以使用这项技术来设计一些东西，也许我们不应该去设计和制造。”</p><p>ChatGPT-4 版本的训练速度更快，并且新的升级将不断推出。尽管非常先进，AI 仍不能理解并回应肢体语言、八卦或什么都没谈的闲聊。但是ChatGPT 4.0 版本显示，AI 的演化是指数级的。</p><p>“这既令人兴奋又令人恐惧，我必须承认。” Lipson 说。</p><blockquote><p>原文地址：<a href="https://www.fox5ny.com/news/chat-gpt-4-is-here-will-it-change-our-lives">Chat GPT-4 is here - Will it change our lives?</a><br>原文作者：<a href="https://www.fox5ny.com/person/r/ashlie-rodriguez">Ashlie Rodriguez</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">Chat GPT-4 被誉为改变游戏规则的技术，从许多方面来看它确实是。它在难题标准测试中击败人类，但它和其他 AI 工具将如何影响我们的生活呢？ FOX 5 纽约的 Ashlie Rodriguez 采访了专家，以了解一些情况。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="人工智能" scheme="https://youngjuning.js.org/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="人工智能" scheme="https://youngjuning.js.org/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="GPT-4" scheme="https://youngjuning.js.org/tags/GPT-4/"/>
    
    <category term="ChatGpt" scheme="https://youngjuning.js.org/tags/ChatGpt/"/>
    
    <category term="AI" scheme="https://youngjuning.js.org/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>2023 大陆人如何成功创建 Google 账户</title>
    <link href="https://youngjuning.js.org/382c92b68823/"/>
    <id>https://youngjuning.js.org/382c92b68823/</id>
    <published>2023-03-16T16:50:37.000Z</published>
    <updated>2023-03-26T15:04:38.324Z</updated>
    
    <content type="html"><![CDATA[<p>最近注册 Google 账号卡在了验证手机号码的步骤，应该是 Google 更新了他们的合规政策，具体报错如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678987015915.png" alt="此电话号码无法用于进行验证"></p><h1 id="切换-VPN-到美国"><a href="#切换-VPN-到美国" class="headerlink" title="切换 VPN 到美国"></a>切换 VPN 到美国</h1><p>为了模拟网络 IP，我们最好将 VPN 节点切到 Google 的总部所在国美国。洛竹收藏了一些好用的 <a href="/vpn/">科学上网</a> 工具，有需要可以试用。</p><h1 id="切换浏览器时区"><a href="#切换浏览器时区" class="headerlink" title="切换浏览器时区"></a>切换浏览器时区</h1><p>只切换 VPN 节点，我们还是无法成功验证手机号，必须将时区设置成和 VPN 节点一致才可以，使用 <a href="https://whoer.net/">whoer.net</a> 可以看到当前时区不一致：</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678987547217.png"></p><p>使用浏览器扩展 <a href="https://chrome.google.com/webstore/detail/change-timezone-time-shif/nbofeaabhknfdcpoddmfckpokmncimpj?utm_source=chrome-ntp-icon">Change Timezone (Time Shift)</a> 我们可以很方便地切换时区：</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678987441408.png"></p><h1 id="修改浏览器语言"><a href="#修改浏览器语言" class="headerlink" title="修改浏览器语言"></a>修改浏览器语言</h1><p>将浏览器的语言设置成 英语（美国），然后删除其他语言：</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678988750775.png"></p><p>然后再用 <a href="https://whoer.net/">whoer.net</a> 检查一下：</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678987676196.png"></p><p>这个时候你就可以成功注册 Google 了。</p><h1 id="跨浏览器测试平台"><a href="#跨浏览器测试平台" class="headerlink" title="跨浏览器测试平台"></a>跨浏览器测试平台</h1><p>如果以上还不行，那就是 VPN 节点不够纯净，可以使用 <a href="https://saucelabs.com/">sauce labs</a> 开一个浏览器注册。</p><h1 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h1><p>以前无知，以为 ip 地址改了身份就变了，实际能标识一个用户的方面有很多，比如：</p><ul><li>浏览器 Cookie</li><li>浏览器默认 Track</li><li>浏览器历史记录</li><li>浏览器搜索历史</li><li>电脑设置</li><li>电脑分辨率</li><li>浏览器语言</li></ul><p>校验严格的网站会禁止禁用 Cookie，不带 Cookie 或者网络是匿名的都会认为是异常用户，另外批量处理很容易触发封号，最近互关 Twitter，手动点的多了就被锁账号了。</p>]]></content>
    
    
    <summary type="html">本文介绍了 2023 年大陆人如何成功创建一个新的 Google 账户，完美解决“此电话号码无法用于进行验证”。</summary>
    
    
    
    <category term="Google" scheme="https://youngjuning.js.org/categories/Google/"/>
    
    
    <category term="Google Account" scheme="https://youngjuning.js.org/tags/Google-Account/"/>
    
    <category term="科学上网" scheme="https://youngjuning.js.org/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    <category term="谷歌账号" scheme="https://youngjuning.js.org/tags/%E8%B0%B7%E6%AD%8C%E8%B4%A6%E5%8F%B7/"/>
    
    <category term="大陆" scheme="https://youngjuning.js.org/tags/%E5%A4%A7%E9%99%86/"/>
    
  </entry>
  
  <entry>
    <title>「已解决」Mac 电脑删除软件报 “不能完成此操作,xxx 已锁定”</title>
    <link href="https://youngjuning.js.org/a4996cdebca4/"/>
    <id>https://youngjuning.js.org/a4996cdebca4/</id>
    <published>2023-03-16T15:15:12.000Z</published>
    <updated>2023-03-26T15:04:38.332Z</updated>
    
    <content type="html"><![CDATA[<p>公司用的 VPN 在前一段时间强制给电脑添加了全屏水印，但是我的个人电脑为了随时支持，也安装了内网 VPN，这个水印是不能去掉的，所以我就想着卸载这个软件，但是卸载的时候就报错了，不能完成此操作，xxx 已锁定，这个时候我们就需要使用终端来卸载这些软件了。</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678980050589.png" alt="不能完成此操作,xxx 已锁定"></p><h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><blockquote><p>注意：请替换 xxx 为要删除的 app</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/ls -dleO@ /Applications/xxx.app</span><br></pre></td></tr></table></figure><h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><blockquote><p>注意：请替换 xxx 为要删除的 app</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/chflags -R noschg /Applications/xxx.app</span><br></pre></td></tr></table></figure><p>这两行命令执行完后，发现 logo 上的小锁消失了，于是开开心心的单击右键，移除，解决。</p><h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><p>卸载了之后，这流氓软件还是会存在一个杀不死的 xxxAgent 进程，真是醉了。脑残的安全部门，不能给个一键卸载的选项吗？</p><p>参考 <a href="https://www.jianshu.com/p/68014c7e5210">mac 解决kill无法强制杀死后台程序的问题</a>，直接删除文件夹，恼人的水印就没有了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -rf /opt/.yunshu/</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">很多公司的内网 VPN 软件都是需要管理员权限才能安装的，但是有时候我们需要卸载这些软件，但是卸载的时候会报错，不能完成此操作，xxx 已锁定，这个时候我们就需要使用终端来卸载这些软件了。</summary>
    
    
    
    <category term="Mac" scheme="https://youngjuning.js.org/categories/Mac/"/>
    
    
    <category term="Mac" scheme="https://youngjuning.js.org/tags/Mac/"/>
    
    <category term="VPN" scheme="https://youngjuning.js.org/tags/VPN/"/>
    
    <category term="卸载软件" scheme="https://youngjuning.js.org/tags/%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="终端" scheme="https://youngjuning.js.org/tags/%E7%BB%88%E7%AB%AF/"/>
    
    <category term="苹果电脑" scheme="https://youngjuning.js.org/tags/%E8%8B%B9%E6%9E%9C%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
</feed>
