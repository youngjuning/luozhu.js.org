<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>洛竹的博客</title>
  
  <subtitle>真理无穷，一寸欢喜。</subtitle>
  <link href="https://youngjuning.js.org/atom.xml" rel="self"/>
  
  <link href="https://youngjuning.js.org/"/>
  <updated>2023-03-23T07:00:19.418Z</updated>
  <id>https://youngjuning.js.org/</id>
  
  <author>
    <name>洛竹</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「已解决」TypeError: moment().tz is not a function</title>
    <link href="https://youngjuning.js.org/3ee8e89b57ce/"/>
    <id>https://youngjuning.js.org/3ee8e89b57ce/</id>
    <published>2023-03-21T04:41:19.000Z</published>
    <updated>2023-03-23T07:00:19.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>迁移项目时下面的代码编译报错 <code>TypeError: moment().tz is not a function</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myDate = <span class="title function_">moment</span>().<span class="title function_">tz</span>(<span class="literal">undefined</span>, vm.<span class="property">timeZone</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法 1"></a>解决办法 1</h1><p>使用 <code>moment-timezone</code> 代替：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment-timezone&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法 2"></a>解决办法 2</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;moment-timezone&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;迁移项目时下面的代码编译报错 &lt;code&gt;TypeError: moment().tz is not a function&lt;/code&gt;：&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    <category term="issues" scheme="https://youngjuning.js.org/categories/issues/"/>
    
    <category term="moment" scheme="https://youngjuning.js.org/categories/issues/moment/"/>
    
    
    <category term="moment" scheme="https://youngjuning.js.org/tags/moment/"/>
    
    <category term="moment-timezone" scheme="https://youngjuning.js.org/tags/moment-timezone/"/>
    
    <category term="TypeError" scheme="https://youngjuning.js.org/tags/TypeError/"/>
    
    <category term="moment().tz" scheme="https://youngjuning.js.org/tags/moment-tz/"/>
    
  </entry>
  
  <entry>
    <title>2023 能赚钱的悬赏软件推荐</title>
    <link href="https://youngjuning.js.org/4dabea032500/"/>
    <id>https://youngjuning.js.org/4dabea032500/</id>
    <published>2023-03-20T03:51:45.000Z</published>
    <updated>2023-03-23T07:00:19.414Z</updated>
    
    <content type="html"><![CDATA[<p>悬赏软件是一种通过发布任务、悬赏金等方式吸引用户完成任务并获得奖励的应用程序。在这些平台上，用户可以发布各种各样的任务，如填写问卷、测试应用、写文章、翻译文本、拍照等等，其他用户可以接受这些任务并完成它们，获取相应的奖励。</p><h1 id="悬赏软件能赚到钱吗？"><a href="#悬赏软件能赚到钱吗？" class="headerlink" title="悬赏软件能赚到钱吗？"></a>悬赏软件能赚到钱吗？</h1><p>使用悬赏软件可以赚到一定的零花钱或者是收入，但具体赚多少取决于任务的类型和数量，以及自己的能力和时间投入。一些悬赏软件提供的任务奖励较低，而另一些则可能提供更高的奖励。除此之外，一些悬赏软件可能还会要求达到一定的任务数量或者质量才能提现，因此需要具体了解每个平台的规则和要求。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>在使用悬赏软件时，需要注意以下几点：</p><ol><li>不要盲目接受任务，要根据自己的能力和时间合理选择任务。</li><li>完成任务时要认真仔细，保证质量，否则可能会导致任务被拒绝或者扣除奖励。</li><li>注意个人信息和隐私保护，不要泄露个人敏感信息。</li><li>不要轻信一些涉及到付款或者转账的任务，避免上当受骗。</li></ol><p>总之，悬赏软件可以作为一种赚取零花钱或者收入的方式，但需要谨慎使用，选择正规、可信的平台，并根据自己的能力和时间合理选择任务。</p><h1 id="常见的悬赏软件"><a href="#常见的悬赏软件" class="headerlink" title="常见的悬赏软件"></a>常见的悬赏软件</h1><ul><li>百度天天领现金：签到领积分、吃饭补贴、睡觉补贴、0 元领水果、邀好友赚钱、做任务赚金币、看广告赚钱</li><li>悟空浏览器：最大特色是悟空自动赚积分，提现靠谱。</li><li>美团众包：提供各种任务包，如拍照、调研、晒单等，奖励方式多样。</li><li>微信读书：通过阅读完成任务，获得读书币，可以用于提现或换取各种奖励。</li><li>拼多多：提供签到、邀请好友、浏览商品等任务，奖励丰富。</li><li>任务猫：提供各种任务，如浏览网页、下载应用、完成问卷等，奖励较高。</li><li>小米有品：提供签到、分享、晒单等任务，奖励小米积分，可以兑换商品。</li><li>闲鱼：提供发布闲置物品、邀请好友等任务，奖励为闲鱼金币，可以用于购物。</li><li>任务行：提供各种任务，如拍照、录音、调查等，奖励方式多样。</li></ul><p>这些悬赏软件都有自己的特点和规则，用户在使用时要仔细阅读相关条款和规定，确保自己的权益得到保障。</p><h1 id="免手续费悬赏软件"><a href="#免手续费悬赏软件" class="headerlink" title="免手续费悬赏软件"></a>免手续费悬赏软件</h1><p>有网友表示，自己辛辛苦苦做任务赚钱，但每次提现都要扣手续费，让人很不舒服。问我有没有不需要提现手续费的任务应用程序。分享 2 款免手续费的赏金软件提现，纯干货。</p><h2 id="优赏吧"><a href="#优赏吧" class="headerlink" title="优赏吧"></a>优赏吧</h2><p>优赏吧也已经运营了几年。最低取款 1 元即付，不扣除取款手续费。即使它不是一个整数，所有的提款都可以一次完成。它是整个网络之中唯一的一个。。</p><p>它还具有分红树的功能。做任务的红包水果类似于种树的水果。时候到了，钱收了，工作也就完成了。。</p><p>不需要身份验证，界面干净，使用起来很舒服。</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1679284811377.png"></p><h2 id="赏帮"><a href="#赏帮" class="headerlink" title="赏帮"></a>赏帮</h2><p>赏帮的受欢迎程度是有目共睹的，也是一款提现不收手续费的打赏软件。最低1元开始，但需要是整数倍。</p><p>平台的操作更用心，更受欢迎。新手注册会给一个小红包，并且在排行榜之上有额外的奖励。它是非常稳定的，可以用于长期试验赚一点钱。</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1679285041134.png"></p><p>目前，这两款软件提现都不收取手续费。当然，趣闲大哥也可以做，但需要用积分兑换，这是多了一个步骤，很多人都不知道这个功能。对新手来说是很不友好的，所以我觉得应该排除。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;悬赏软件是一种通过发布任务、悬赏金等方式吸引用户完成任务并获得奖励的应用程序。在这些平台上，用户可以发布各种各样的任务，如填写问卷、测试应用、写文章、翻译文本、拍照等等，其他用户可以接受这些任务并完成它们，获取相应的奖励。&lt;/p&gt;
&lt;h1 id=&quot;悬赏软件能赚到钱吗？&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="副业" scheme="https://youngjuning.js.org/categories/%E5%89%AF%E4%B8%9A/"/>
    
    <category term="网赚" scheme="https://youngjuning.js.org/categories/%E5%89%AF%E4%B8%9A/%E7%BD%91%E8%B5%9A/"/>
    
    
    <category term="悬赏软件" scheme="https://youngjuning.js.org/tags/%E6%82%AC%E8%B5%8F%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="提现" scheme="https://youngjuning.js.org/tags/%E6%8F%90%E7%8E%B0/"/>
    
    <category term="手续费" scheme="https://youngjuning.js.org/tags/%E6%89%8B%E7%BB%AD%E8%B4%B9/"/>
    
    <category term="优赏吧" scheme="https://youngjuning.js.org/tags/%E4%BC%98%E8%B5%8F%E5%90%A7/"/>
    
    <category term="赏帮" scheme="https://youngjuning.js.org/tags/%E8%B5%8F%E5%B8%AE/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言系列教程の字符串</title>
    <link href="https://youngjuning.js.org/276138721f40/"/>
    <id>https://youngjuning.js.org/276138721f40/</id>
    <published>2023-03-19T23:20:39.000Z</published>
    <updated>2023-03-23T07:00:19.414Z</updated>
    
    <content type="html"><![CDATA[<p>在 Go 中，String 值得特别一提，因为与其他语言相比，它们在实现上有所不同。</p><h2 id="String-是什么？"><a href="#String-是什么？" class="headerlink" title="String 是什么？"></a>String 是什么？</h2><p><strong>在 Go 中，一个字符串是字节的一个切片。字符串可以通过将一组字符放在双引号内来创建</strong></p><p>让我们看看一个简单的例子，创建一个 <code>string</code> 并打印出来。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">    fmt.Println(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/o9OVDgEMU0">Run in playground</a></p><p>上述程序将打印 <code>Hello World</code>。</p><p>Go 中的字符串是 <a href="https://naveenr.net/unicode-character-set-and-utf-8-utf-16-utf-32-encoding/">符合 Unicode 标准</a> 并且是 <a href="https://naveenr.net/unicode-character-set-and-utf-8-utf-16-utf-32-encoding/">UTF-8 编码</a> 的。</p><h2 id="访问一个字符串的单个字节"><a href="#访问一个字符串的单个字节" class="headerlink" title="访问一个字符串的单个字节"></a>访问一个字符串的单个字节</h2><p>由于字符串是字节的一个切片，所以可以访问字符串的每个字节。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printBytes</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Bytes: &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;%x &quot;</span>, s[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  name := <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;String: %s\n&quot;</span>, name) <span class="comment">// 输入的字符串被打印出来</span></span><br><span class="line">    printBytes(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/B3KgBBQhiN9">Run in playground</a></p><p><code>%s</code> 是用于打印字符串的格式化标识符。<code>len(s)</code> 返回字符串中的字节数，我们使用 <code>for</code> 循环以十六进制符号打印这些字节。<code>%x</code> 是十六进制的格式指定符。上述程序的输出结果是：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String: Hello World</span><br><span class="line">Bytes: 48 65 6c 6c 6f 20 57 6f 72 6c 64</span><br></pre></td></tr></table></figure><p>这是 <code>Hello World</code> 的 <a href="https://mothereff.in/utf-8#Hello%20World">Unicode UT8 编码</a> 值. 为了更好地理解字符串，需要对 Unicode 和 UTF-8 有一个基本的了解。 我推荐阅读 <a href="https://naveenr.net/unicode-character-set-and-utf-8-utf-16-utf-32-encoding/">https://naveenr.net/unicode-character-set-and-utf-8-utf-16-utf-32-encoding/</a> 了解更多 Unicode 和 UTF-8 的知识。</p><h2 id="访问字符串的单个字符"><a href="#访问字符串的单个字符" class="headerlink" title="访问字符串的单个字符"></a>访问字符串的单个字符</h2><p>让我们对上述程序稍作修改，以打印字符串的字符。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printBytes</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Bytes: &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%x &quot;</span>, s[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printChars</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Characters: &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%c &quot;</span>, s[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;String: %s\n&quot;</span>, name)</span><br><span class="line">    printChars(name)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    printBytes(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/ZkXmyVNsqv7">Run in playground</a></p><p><code>%c</code> 格式化标识符用于打印 <code>printChars</code> 方法中字符串参数中的字符。该程序打印的是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String: Hello World</span><br><span class="line">Characters: H e l l o   W o r l d</span><br><span class="line">Bytes: 48 65 6c 6c 6f 20 57 6f 72 6c 64</span><br></pre></td></tr></table></figure><p>虽然上面的程序看起来是访问字符串的单个字符的合法方式，但这有一个严重的错误。让我们来看看这个错误是什么。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printBytes</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Bytes: &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%x &quot;</span>, s[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printChars</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Characters: &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%c &quot;</span>, s[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;String: %s\n&quot;</span>, name)</span><br><span class="line">    printChars(name)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    printBytes(name)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">    name = <span class="string">&quot;Señor&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;String: %s\n&quot;</span>, name)</span><br><span class="line">    printChars(name) <span class="comment">//</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    printBytes(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/2hyVf8l9fiO">Run in playground</a></p><p>上述程序的输出是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String: Hello World</span><br><span class="line">Characters: H e l l o   W o r l d</span><br><span class="line">Bytes: 48 65 6c 6c 6f 20 57 6f 72 6c 64</span><br><span class="line"></span><br><span class="line">String: Señor</span><br><span class="line">Characters: S e Ã ± o r</span><br><span class="line">Bytes: 53 65 c3 b1 6f 72</span><br></pre></td></tr></table></figure><p>我们试图打印 <strong>Señor</strong> 的字符，但它输出 <strong>S e Ã ± o r</strong>，这是错误的。为什么这个程序对 <code>Señor</code> 会出错，而对 <code>Hello World </code> 却能完全正常工作。原因是 <code>ñ</code> 的 Unicode 码位是 <code>U+00F1</code>，其 <a href="https://mothereff.in/utf-8#%C3%B1">UTF-8编码</a> 占用了 2 个字节 <code>c3</code> 和 <code>b1</code>。我们试图打印字符，假设每个代码点是一个字节，这是错误的。<strong>在 UTF-8 编码中，一个代码点可以占用 1个以上的字节。</strong>那么我们如何解决这个问题？这就需要 <strong>rune</strong> 拯救我们的地方了。</p><h2 id="Rune"><a href="#Rune" class="headerlink" title="Rune"></a>Rune</h2><p>Rune 是 Go 中的一个内置类型，它是 <code>int32</code> 的别名。Rune 在 Go 中代表一个 Unicode 代码点。不管这个代码点占用多少字节，它都可以用 Rune 来表示。让我们修改上面的程序，用 Rune 来打印字符。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printBytes</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Bytes: &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%x &quot;</span>, s[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printChars</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Characters: &quot;</span>)</span><br><span class="line">    runes := []<span class="type">rune</span>(s) <span class="comment">// 字符串被转换为 runes 的切片</span></span><br><span class="line">    <span class="comment">// 然后我们对其进行循环，并显示这些字符。</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(runes); i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%c &quot;</span>, runes[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;String: %s\n&quot;</span>, name)</span><br><span class="line">    printChars(name)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    printBytes(name)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">    name = <span class="string">&quot;Señor&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;String: %s\n&quot;</span>, name)</span><br><span class="line">    printChars(name)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    printBytes(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/n8rsfagm2SJ">Run in playground</a></p><p>上述程序打印出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String: Hello World</span><br><span class="line">Characters: H e l l o   W o r l d</span><br><span class="line">Bytes: 48 65 6c 6c 6f 20 57 6f 72 6c 64</span><br><span class="line"></span><br><span class="line">String: Señor</span><br><span class="line">Characters: S e ñ o r</span><br><span class="line">Bytes: 53 65 c3 b1 6f 72</span><br></pre></td></tr></table></figure><p>上述输出是完美的。只是我们想要的😀。</p><h2 id="使用-for-range-循环访问单个-Rune"><a href="#使用-for-range-循环访问单个-Rune" class="headerlink" title="使用 for range 循环访问单个 Rune"></a>使用 <code>for range</code> 循环访问单个 Rune</h2><p>上面的程序是一个完美的方式来迭代一个字符串的各个 Rune。但是 Go 为我们提供了一种更简单的方法，即使用 <code>for range</code> 循环来实现这一目的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">charsAndBytePosition</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用 for range 循环迭代 string</span></span><br><span class="line">    <span class="keyword">for</span> index, <span class="type">rune</span> := <span class="keyword">range</span> s &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%c starts at byte %d\n&quot;</span>, <span class="type">rune</span>, index)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;Señor&quot;</span></span><br><span class="line">    charsAndBytePosition(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/0ldNBeffjYI">Run in playground</a></p><p>循环返回 Rune 开始的字节的位置，同时返回 Rune 的位置。这个程序输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S starts at byte 0</span><br><span class="line">e starts at byte 1</span><br><span class="line">ñ starts at byte 2</span><br><span class="line">o starts at byte 4</span><br><span class="line">r starts at byte 5</span><br></pre></td></tr></table></figure><p>从上面的输出可以看出，<code>ñ</code> 占用了 2 个字节，因为下一个字符 <code>o</code> 是从第 4 字节开始的，而不是第 3 字节😀。</p><h2 id="从一个字节片中创建一个字符串"><a href="#从一个字节片中创建一个字符串" class="headerlink" title="从一个字节片中创建一个字符串"></a>从一个字节片中创建一个字符串</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    byteSlice := []<span class="type">byte</span>&#123;<span class="number">0x43</span>, <span class="number">0x61</span>, <span class="number">0x66</span>, <span class="number">0xC3</span>, <span class="number">0xA9</span>&#125;</span><br><span class="line">    str := <span class="type">string</span>(byteSlice)</span><br><span class="line">    fmt.Println(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/Vr9pf8X8xO">Run in playground</a></p><p><code>byteSlice</code> 包含字符串 <code>Café</code>的 <a href="https://mothereff.in/utf-8#Caf%C3%A9">UTF-8编码</a> 十六进制字节。该程序打印出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Café</span><br></pre></td></tr></table></figure><p>如果我们有相当于十六进制的十进制值，怎么办？上面的程序能工作吗？让我们来看看。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    byteSlice := []<span class="type">byte</span>&#123;<span class="number">67</span>, <span class="number">97</span>, <span class="number">102</span>, <span class="number">195</span>, <span class="number">169</span>&#125; <span class="comment">// 十进制相当于 &#123;&#x27;\x43&#x27;, &#x27;\x61&#x27;, &#x27;\x66&#x27;, &#x27;\xC3&#x27;, &#x27;\xA9&#x27;&#125;</span></span><br><span class="line">    str := <span class="type">string</span>(byteSlice)</span><br><span class="line">    fmt.Println(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/jgsRowW6XN">Run in playground</a></p><p>小数点值也可以，上述程序也会打印出 <code>Café</code>。</p><blockquote><p>原文地址 <a href="https://golangbot.com/strings/">Golang tutorial series Strings</a><br>原文作者：<a href="https://golangbot.com/about/">Naveen Ramanathan</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">在 Go 中，一个字符串是字节的一个切片。字符串可以通过将一组字符放在双引号内来创建</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/categories/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/categories/Golang/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Golang" scheme="https://youngjuning.js.org/tags/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/tags/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Go 字符串" scheme="https://youngjuning.js.org/tags/Go-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="Go String" scheme="https://youngjuning.js.org/tags/Go-String/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言教程系列の介绍和环境安装</title>
    <link href="https://youngjuning.js.org/5bef57ffb8d9/"/>
    <id>https://youngjuning.js.org/5bef57ffb8d9/</id>
    <published>2023-03-19T07:18:06.000Z</published>
    <updated>2023-03-23T07:00:19.414Z</updated>
    
    <content type="html"><![CDATA[<p>这是我们 Golang 教程系列中的第一篇教程。本教程介绍了 Go，并讨论了选择 Go 而不是其他编程语言的原因。我们还将学习如何在 Mac OS，Windows 和 Linux 中安装 Go。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Go 也被称为 Golang，是 Google 开发的一种开源、编译和静态类型的编程语言。Go 创作背后的关键人物是 Rob Pike，Ken Thompson 和Robert Griesemer。Go 于 2009 年 11 月公开发布。</p><p>Go 是一种通用的编程语言，语法简单并具有强大的标准库作为后盾。Go 大放异彩的关键领域之一是创建高可用性和可伸缩性的 Web 应用程序。Go 还可以用于创建命令行应用程序、桌面应用程序甚至移动应用程序。</p><h2 id="Go-的优势"><a href="#Go-的优势" class="headerlink" title="Go 的优势"></a>Go 的优势</h2><p>当大量其他语言（例如 python，ruby，nodejs …）可以实现相同需求时，为什么选择 Go 作为服务器端编程语言。</p><p>这里是我选择 Go 时发现的一些优点。</p><h3 id="简单的语法"><a href="#简单的语法" class="headerlink" title="简单的语法"></a>简单的语法</h3><p>语法简单明了，并且该语言不会因不必要的功能而显得臃肿。这使得编写可读性和可维护性的代码变得容易。</p><h3 id="易于编写并发程序"><a href="#易于编写并发程序" class="headerlink" title="易于编写并发程序"></a>易于编写并发程序</h3><p>并发是语言的固有部分。直接的影响是编写多线程程序变得简直小菜一碟。这是通过 Goroutines 和管道实现的，我们将在接下来的教程中对其进行讨论。</p><h3 id="编译语言"><a href="#编译语言" class="headerlink" title="编译语言"></a>编译语言</h3><p>Go是一种编译语言。源代码被编译为本地二进制文件。 解释语言（例如，nodejs 中使用的 JavaScript 和 Python）缺少此功能。</p><h3 id="快速编译"><a href="#快速编译" class="headerlink" title="快速编译"></a>快速编译</h3><p>Go编译器非常神奇，并且从一开始就被设计为快速的。</p><h3 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h3><p>Go 编译器支持静态链接。整个 Go 项目可以静态链接到一个大型的二进制文件中，并且可以轻松部署在云服务器中，而不必担心依赖关系。</p><h3 id="Go-工具链"><a href="#Go-工具链" class="headerlink" title="Go 工具链"></a>Go 工具链</h3><p>工具在 Go 中值得特别提及。Go 附带了功能强大的工具，可以帮助开发人员编写更好的代码。常用的工具有：</p><ul><li><code>gofmt</code>：<code>gofmt</code> 是用于自动格式化 go 源代码的。它使用制表符进行缩进，并使用空格进行对齐。</li><li><code>vet</code>：<code>vet</code> 分析 go 源代码并报告可能的可疑代码。vet 报告的所有内容都不是真正的问题，但具有捕获编译器未报告的错误的能力，例如使用 <code>Printf</code> 时格式说明符不正确。</li><li><code>golint</code>：golint 用于识别代码中的样式问题。</li></ul><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>Go 使用垃圾回收，因此内存管理几乎会自动执行，开发人员无需担心内存管理问题。 这也有助于轻松地编写并发程序。</p><h3 id="简单语言规范"><a href="#简单语言规范" class="headerlink" title="简单语言规范"></a>简单语言规范</h3><p>语言规范非常简单。 整个规范只有一个页面，你甚至可以使用它来编写自己的编译器 :)</p><h3 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h3><p>最后但并非最不重要的一点是，Go 是一个开源项目。 你可以参与 Go 项目并为该项目做出贡献。</p><h2 id="使用-Go-构建的热门产品"><a href="#使用-Go-构建的热门产品" class="headerlink" title="使用 Go 构建的热门产品"></a>使用 Go 构建的热门产品</h2><p>以下是一些使用 Go 构建的流行产品。</p><ul><li>Google 使用 Go 开发了 Kubernetes using。</li><li>Docker, 世界上最著名的容器平台是使用 Go 开发的</li><li>Dropbox 已将其性能敏感组件从 Python 迁移到 Go。</li><li>Infoblox 的 下一代网络产品是使用 Go 开发的。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Go 可以安装在 Mac，Windows 和 Linux 这三个平台上。你可以从<a href="https://golang.org/dl/">https://golang.org/dl/</a> 下载对应平台的二进制文件。</p><h3 id="Mac-OS"><a href="#Mac-OS" class="headerlink" title="Mac OS"></a>Mac OS</h3><p>从 <a href="https://golang.org/dl/">https://golang.org/dl/</a> 下载 Mac OS 安装程序。双击开始安装。按照提示进行操作，这会将 Golang 安装在 <code>/usr/local/go</code> 中，并且还将文件夹 <code>/usr/local/go/bin</code> 添加到 <code>PATH</code> 环境变量中。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>从 <a href="https://golang.org/dl/">https://golang.org/dl/</a> 下载 MSI 安装程序。双击开始安装，然后按照提示进行操作。 这会将Go安装在位置 <code>c:\Go</code>，还将目录 <code>c:\Go\bin</code> 添加到你的路径环境变量中。</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>从 <a href="https://golang.org/dl/">https://golang.org/dl/</a> 下载 tar 文件并将其解压缩到 <code>/usr/local</code>。</p><p>将 <code>/usr/local/go/bin</code> 添加到 <code>PATH</code> 环境变量中。这将在 Linux 中安装 Go。</p><h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><p>要验证 Go 安装是否成功，请在终端中键入命令 <code>go version</code>，它将输出已安装的 Go 版本。这是我终端的输出。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.16 darwin/amd64</span><br></pre></td></tr></table></figure><p>在编写本教程时，1.16 是 Go 的最新版本。这证明 Go 已成功安装。在下一个教程中，我们将在 Go 中编写第一个 Hello World 程序 :)</p><p>请提供你宝贵的反馈和意见。谢谢阅读。</p><blockquote><p>原文地址 <a href="https://golangbot.com/golang-tutorial-part-1-introduction-and-installation/">Part 1: Introduction and Installation</a><br>原文作者：<a href="https://golangbot.com/about/">Naveen Ramanathan</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">这是我们 Golang 教程系列中的第一篇教程。本教程介绍了 Go，并讨论了选择 Go 而不是其他编程语言的原因。我们还将学习如何在 Mac OS，Windows 和 Linux 中安装 Go。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/categories/Golang/"/>
    
    <category term="Go 语言系列教程" scheme="https://youngjuning.js.org/categories/Golang/Go-%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="swiper" scheme="https://youngjuning.js.org/tags/swiper/"/>
    
    <category term="Golang" scheme="https://youngjuning.js.org/tags/Golang/"/>
    
    <category term="Go 语言教程" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    
    <category term="Go 语言教程系列" scheme="https://youngjuning.js.org/tags/Go-%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
    <category term="Go 安装教程" scheme="https://youngjuning.js.org/tags/Go-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Chat GPT-4 已经问世——它会改变我们的生活吗？</title>
    <link href="https://youngjuning.js.org/197cfff33155/"/>
    <id>https://youngjuning.js.org/197cfff33155/</id>
    <published>2023-03-17T06:14:20.000Z</published>
    <updated>2023-03-23T07:00:19.414Z</updated>
    
    <content type="html"><![CDATA[<p>科技世界正在庆祝最新版本的 ChatGPT-4。</p><div class="note info flat"><p>如果您还没有注册 ChatGpt，可以参考 <a href="https://youngjuning.js.org/d744d1d3d1e8/">OpenAI 推出超神 ChatGPT 注册攻略来了</a> 快速注册一个。</p></div><p>“Chat GPT已经长大了，” 哥伦比亚大学工程教授霍德•利普森说道。</p><p>作为 AI 聊天机器人的 ChatGPT 于 2022 年 11 月诞生，现在已经走向成年，其创造者微软资助的 Open AI 已经第四次更新技术，使这个神奇的机器人变得更加智能、快速和有趣。</p><p><strong>以下是一个 ChatGP T的笑话：</strong></p><ul><li>Madonna 为什么要过马路？<blockquote><p>去马路的另一边摆 POSE（strike a pose）。</p></blockquote></li></ul><p>GPT-3 能够写诗、解决问题和总结文本，但人们对其准确性存在担忧。而 GPT-4 解决了这些问题。事实上，它在 GRE、MCAT、LSAT 和 SAT 等多项测试中表现优异，甚至还可以理解图片。</p><p>“有人试过这个功能，他们给 ChatGPT 展示了我的冰箱照片，问我晚餐可以做什么？” Lipson 说。“看到酸奶和草莓后，ChatGPT 建议制作一份完美的比萨饼。这对于 AI 来说是一个重大突破。”</p><p>它可以翻译、计算和编码。对于没有医生资源的人来说，ChatGPT 的知识和专业可以拯救生命。但是，尽管 ChatGPT 带来了很多好处，技术专家们承认这种原始智能是一把双刃剑，如果被恶意利用，可能会造成不可预测的后果。</p><p>“你可以创建垃圾邮件，你可以创建非常令人信服的电子邮件，你可以欺骗人们。”Lipson 警告说。“我认为你可以使用这项技术来设计一些东西，也许我们不应该去设计和制造。”</p><p>ChatGPT-4 版本的训练速度更快，并且新的升级将不断推出。尽管非常先进，AI 仍不能理解并回应肢体语言、八卦或什么都没谈的闲聊。但是ChatGPT 4.0 版本显示，AI 的演化是指数级的。</p><p>“这既令人兴奋又令人恐惧，我必须承认。” Lipson 说。</p><blockquote><p>原文地址：<a href="https://www.fox5ny.com/news/chat-gpt-4-is-here-will-it-change-our-lives">Chat GPT-4 is here - Will it change our lives?</a><br>原文作者：<a href="https://www.fox5ny.com/person/r/ashlie-rodriguez">Ashlie Rodriguez</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">Chat GPT-4 被誉为改变游戏规则的技术，从许多方面来看它确实是。它在难题标准测试中击败人类，但它和其他 AI 工具将如何影响我们的生活呢？ FOX 5 纽约的 Ashlie Rodriguez 采访了专家，以了解一些情况。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="人工智能" scheme="https://youngjuning.js.org/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="人工智能" scheme="https://youngjuning.js.org/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="GPT-4" scheme="https://youngjuning.js.org/tags/GPT-4/"/>
    
    <category term="ChatGpt" scheme="https://youngjuning.js.org/tags/ChatGpt/"/>
    
    <category term="AI" scheme="https://youngjuning.js.org/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>2023 大陆人如何成功创建 Google 账户</title>
    <link href="https://youngjuning.js.org/382c92b68823/"/>
    <id>https://youngjuning.js.org/382c92b68823/</id>
    <published>2023-03-16T16:50:37.000Z</published>
    <updated>2023-03-23T07:00:19.414Z</updated>
    
    <content type="html"><![CDATA[<p>最近注册 Google 账号卡在了验证手机号码的步骤，应该是 Google 更新了他们的合规政策，具体报错如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678987015915.png" alt="此电话号码无法用于进行验证"></p><h1 id="切换-VPN-到美国"><a href="#切换-VPN-到美国" class="headerlink" title="切换 VPN 到美国"></a>切换 VPN 到美国</h1><p>为了模拟网络 IP，我们最好将 VPN 节点切到 Google 的总部所在国美国。洛竹收藏了一些好用的 <a href="/vpn/">科学上网</a> 工具，有需要可以试用。</p><h1 id="切换浏览器时区"><a href="#切换浏览器时区" class="headerlink" title="切换浏览器时区"></a>切换浏览器时区</h1><p>只切换 VPN 节点，我们还是无法成功验证手机号，必须将时区设置成和 VPN 节点一致才可以，使用 <a href="https://whoer.net/">whoer.net</a> 可以看到当前时区不一致：</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678987547217.png"></p><p>使用浏览器扩展 <a href="https://chrome.google.com/webstore/detail/change-timezone-time-shif/nbofeaabhknfdcpoddmfckpokmncimpj?utm_source=chrome-ntp-icon">Change Timezone (Time Shift)</a> 我们可以很方便地切换时区：</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678987441408.png"></p><h1 id="修改浏览器语言"><a href="#修改浏览器语言" class="headerlink" title="修改浏览器语言"></a>修改浏览器语言</h1><p>将浏览器的语言设置成 英语（美国），然后删除其他语言：</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678988750775.png"></p><p>然后再用 <a href="https://whoer.net/">whoer.net</a> 检查一下：</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678987676196.png"></p><p>这个时候你就可以成功注册 Google 了。</p><h1 id="跨浏览器测试平台"><a href="#跨浏览器测试平台" class="headerlink" title="跨浏览器测试平台"></a>跨浏览器测试平台</h1><p>如果以上还不行，那就是 VPN 节点不够纯净，可以使用 <a href="https://saucelabs.com/">sauce labs</a> 开一个浏览器注册。</p><h1 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h1><p>以前无知，以为 ip 地址改了身份就变了，实际能标识一个用户的方面有很多，比如：</p><ul><li>浏览器 Cookie</li><li>浏览器默认 Track</li><li>浏览器历史记录</li><li>浏览器搜索历史</li><li>电脑设置</li><li>电脑分辨率</li><li>浏览器语言</li></ul><p>校验严格的网站会禁止禁用 Cookie，不带 Cookie 或者网络是匿名的都会认为是异常用户，另外批量处理很容易触发封号，最近互关 Twitter，手动点的多了就被锁账号了。</p>]]></content>
    
    
    <summary type="html">本文介绍了 2023 年大陆人如何成功创建一个新的 Google 账户，完美解决“此电话号码无法用于进行验证”。</summary>
    
    
    
    <category term="Google" scheme="https://youngjuning.js.org/categories/Google/"/>
    
    
    <category term="Google Account" scheme="https://youngjuning.js.org/tags/Google-Account/"/>
    
    <category term="科学上网" scheme="https://youngjuning.js.org/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    <category term="谷歌账号" scheme="https://youngjuning.js.org/tags/%E8%B0%B7%E6%AD%8C%E8%B4%A6%E5%8F%B7/"/>
    
    <category term="大陆" scheme="https://youngjuning.js.org/tags/%E5%A4%A7%E9%99%86/"/>
    
  </entry>
  
  <entry>
    <title>「已解决」Mac 电脑删除软件报 “不能完成此操作,xxx 已锁定”</title>
    <link href="https://youngjuning.js.org/a4996cdebca4/"/>
    <id>https://youngjuning.js.org/a4996cdebca4/</id>
    <published>2023-03-16T15:15:12.000Z</published>
    <updated>2023-03-23T07:00:19.418Z</updated>
    
    <content type="html"><![CDATA[<p>公司用的 VPN 在前一段时间强制给电脑添加了全屏水印，但是我的个人电脑为了随时支持，也安装了内网 VPN，这个水印是不能去掉的，所以我就想着卸载这个软件，但是卸载的时候就报错了，不能完成此操作，xxx 已锁定，这个时候我们就需要使用终端来卸载这些软件了。</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678980050589.png" alt="不能完成此操作,xxx 已锁定"></p><h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><blockquote><p>注意：请替换 xxx 为要删除的 app</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/ls -dleO@ /Applications/xxx.app</span><br></pre></td></tr></table></figure><h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><blockquote><p>注意：请替换 xxx 为要删除的 app</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/chflags -R noschg /Applications/xxx.app</span><br></pre></td></tr></table></figure><p>这两行命令执行完后，发现 logo 上的小锁消失了，于是开开心心的单击右键，移除，解决。</p><h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><p>卸载了之后，这流氓软件还是会存在一个杀不死的 xxxAgent 进程，真是醉了。脑残的安全部门，不能给个一键卸载的选项吗？</p><p>参考 <a href="https://www.jianshu.com/p/68014c7e5210">mac 解决kill无法强制杀死后台程序的问题</a>，直接删除文件夹，恼人的水印就没有了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -rf /opt/.yunshu/</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">很多公司的内网 VPN 软件都是需要管理员权限才能安装的，但是有时候我们需要卸载这些软件，但是卸载的时候会报错，不能完成此操作，xxx 已锁定，这个时候我们就需要使用终端来卸载这些软件了。</summary>
    
    
    
    <category term="Mac" scheme="https://youngjuning.js.org/categories/Mac/"/>
    
    
    <category term="Mac" scheme="https://youngjuning.js.org/tags/Mac/"/>
    
    <category term="VPN" scheme="https://youngjuning.js.org/tags/VPN/"/>
    
    <category term="卸载软件" scheme="https://youngjuning.js.org/tags/%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="终端" scheme="https://youngjuning.js.org/tags/%E7%BB%88%E7%AB%AF/"/>
    
    <category term="苹果电脑" scheme="https://youngjuning.js.org/tags/%E8%8B%B9%E6%9E%9C%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
  <entry>
    <title>Google Adsense 的 CTR 是什么？</title>
    <link href="https://youngjuning.js.org/e7eb0384452b/"/>
    <id>https://youngjuning.js.org/e7eb0384452b/</id>
    <published>2023-03-16T12:38:10.000Z</published>
    <updated>2023-03-23T07:00:19.418Z</updated>
    
    <content type="html"><![CDATA[<p>在互联网营销领域, 点击率对广告商和发布者都非常重要。广告商需要创建广告图形或销售线路，从而获得更高的点击率 (CTR)，而发布者则需要以增加 CTR 的方式放置广告。</p><p>我看到很多人在各个论坛上询问这个问题，所以本篇文章将有助于许多不了解点击率是什么的读者。</p><p>从博客&#x2F;出版商的角度来看，CTR是一项在赚取金钱和留住广告商方面发挥重要作用的因素之一。如果您无法给足够的点击，您的广告商就会离开。那么，让我们深入了解CTR并了解它是什么。</p><h1 id="什么是-CTR"><a href="#什么是-CTR" class="headerlink" title="什么是 CTR"></a>什么是 CTR</h1><p>CTR 代表点击率（Click through rate）。简而言之，它的意思是广告被点击的次数除以广告、广告单元或包含广告的页面被查看的次数。</p><ul><li>CTR &#x3D; 点击数 &#x2F; 展示次数</li></ul><p>简单来说，如果您发布了一则广告，并被 100 人看到，但只得到了 5 次点击，那么您的 CTR 为 5%。需要注意的是，CTR百分比越高，你将获得更好的广告效果。因此，建议在易于点击和可见的地方放置广告。现在，最常见的问题之一是什么是良好的 CTR 或者我的 Adsense 有足够的点击量，但我的收入非常低怎么办。</p><p>让我来揭开关于 Adsense 点击率的迷思，过多地点击 AdSense 广告永远不能保证良好的收入，关键在于针对能给予高带权值广告的点击。这样的广告，“即使很少点击也会产生比 100 次点击更多的收益”。我将继续发布更多有关 Google Adsense 的主题，让您的 Adsense 体验更佳。如果您想不错过任何内容，请订阅 <a href="https://youngjuning.js.org/atom.xml">洛竹的博客</a> 。</p><blockquote><p>原文地址：<a href="https://www.shoutmeloud.com/what-is-ctr-in-google-adsense.html">What is CTR in Google Adsense?</a><br>原文作者：<a href="https://www.shoutmeloud.com/author/admin">Harsh Agrawal</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
    <summary type="html">CTR代表点击率（Click Though rate）。简单来说，它表示广告被点击的次数除以广告被浏览的次数。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="AdSense" scheme="https://youngjuning.js.org/categories/AdSense/"/>
    
    
    <category term="AdSenseCTR" scheme="https://youngjuning.js.org/tags/AdSenseCTR/"/>
    
    <category term="Google AdSense" scheme="https://youngjuning.js.org/tags/Google-AdSense/"/>
    
    <category term="点击率" scheme="https://youngjuning.js.org/tags/%E7%82%B9%E5%87%BB%E7%8E%87/"/>
    
    <category term="广告发布商" scheme="https://youngjuning.js.org/tags/%E5%B9%BF%E5%91%8A%E5%8F%91%E5%B8%83%E5%95%86/"/>
    
    <category term="广告联盟" scheme="https://youngjuning.js.org/tags/%E5%B9%BF%E5%91%8A%E8%81%94%E7%9B%9F/"/>
    
  </entry>
  
  <entry>
    <title>Antd Descriptions 组件隐藏 label 的冒号</title>
    <link href="https://youngjuning.js.org/6ff432235df3/"/>
    <id>https://youngjuning.js.org/6ff432235df3/</id>
    <published>2023-03-16T07:41:41.000Z</published>
    <updated>2023-03-23T07:00:19.414Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在使用 antd 的 Descriptions 组件时，发现 label 后面总是有一个冒号，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678952578255.png" alt="antd descriptions label"></p><p>代码如下：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Descriptions</span> title=<span class="string">&#x27;类型统计&#x27;</span> layout=<span class="string">&quot;vertical&quot;</span> column=&#123;<span class="number">4</span>&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;点类型统计&quot;</span>&gt;</span>73<span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Descriptions.Item</span> <span class="attr">label</span>=<span class="string">&quot;边类型统计&quot;</span>&gt;</span>29<span class="tag">&lt;/<span class="name">Descriptions.Item</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Descriptions</span>&gt;</span><br></pre></td></tr></table></figure><p>正常来说是没问题的，但是 UI 看着不顺眼，走查的时候要求去掉，但是发现没有相关属性可以配置。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>直接改 antd 的 css 样式来隐藏即可：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:<span class="selector-tag">global</span> &#123;</span><br><span class="line">  <span class="selector-class">.ant-descriptions-item-label</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="自定义-label-和-content-的-padding"><a href="#自定义-label-和-content-的-padding" class="headerlink" title="自定义 label 和 content 的 padding"></a>自定义 label 和 content 的 padding</h2><p>同样是因为 UI 走查看不顺眼，要求把 label 和 content 的 padding 值改为 4px，可以通过修改 antd 的样式来实现：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ant-descriptions-row</span> &gt; <span class="selector-tag">th</span>, <span class="selector-class">.ant-descriptions-row</span> &gt; <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文介绍了如何隐藏 antd Descriptions 组件 label 后面的冒号。</summary>
    
    
    
    <category term="issues" scheme="https://youngjuning.js.org/categories/issues/"/>
    
    <category term="antd" scheme="https://youngjuning.js.org/categories/issues/antd/"/>
    
    
    <category term="前端开发" scheme="https://youngjuning.js.org/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="antd" scheme="https://youngjuning.js.org/tags/antd/"/>
    
    <category term="descriptions" scheme="https://youngjuning.js.org/tags/descriptions/"/>
    
    <category term="antd descriptions" scheme="https://youngjuning.js.org/tags/antd-descriptions/"/>
    
  </entry>
  
  <entry>
    <title>「已解决」Using eslint with typescript - Unable to resolve path to module</title>
    <link href="https://youngjuning.js.org/a9cf5ec2f94c/"/>
    <id>https://youngjuning.js.org/a9cf5ec2f94c/</id>
    <published>2023-03-14T06:18:48.000Z</published>
    <updated>2023-03-23T07:00:19.418Z</updated>
    
    <content type="html"><![CDATA[<p>我在使用 eslint 检查 typescript 代码时，遇到了一个问题，就是无法解析路径到模块（Unable to resolve path to module）：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span>;</span><br></pre></td></tr></table></figure><p>报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2:17  error  Unable to resolve path to module <span class="string">&#x27;./app&#x27;</span>  import/no-unresolved</span><br></pre></td></tr></table></figure><p>这个问题的解决步骤如下：</p><p>1、设置 parserOptions：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;parser&quot;</span>: <span class="string">&quot;@typescript-eslint/parser&quot;</span>,</span><br><span class="line">  <span class="string">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;project&quot;</span>: <span class="string">&quot;./tsconfig.json&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、设置 <code>import/resolver</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;import/resolver&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;node&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;extensions&quot;</span>: [<span class="string">&quot;.js&quot;</span>, <span class="string">&quot;.jsx&quot;</span>, <span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.tsx&quot;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我在使用 eslint 检查 typescript 代码时，遇到了一个问题，就是无法解析路径到模块（Unable to resolve path to module）：&lt;/p&gt;
&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="前端" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Eslint" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/Eslint/"/>
    
    
    <category term="Eslint" scheme="https://youngjuning.js.org/tags/Eslint/"/>
    
    <category term="Typescript" scheme="https://youngjuning.js.org/tags/Typescript/"/>
    
    <category term="import/no-unresolved" scheme="https://youngjuning.js.org/tags/import-no-unresolved/"/>
    
  </entry>
  
  <entry>
    <title>2023 年最好用的十大跨浏览器测试工具</title>
    <link href="https://youngjuning.js.org/0e5e9e31e73b/"/>
    <id>https://youngjuning.js.org/0e5e9e31e73b/</id>
    <published>2023-03-14T05:41:49.000Z</published>
    <updated>2023-03-23T07:00:19.414Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lambdatest"><a href="#Lambdatest" class="headerlink" title="Lambdatest"></a>Lambdatest</h1><p>Lambdatest 是一种基于云的交叉浏览器测试平台，可以同时在不同操作系统和浏览器上执行自动化和手动测试。该平台支持多种编程语言和集成工具，提供实时屏幕共享和错误日志，以帮助开发人员和测试人员加快产品交付速度和质量。此外，Lambdatest 还提供用户友好的界面和灵活的付费计划，以适应各种规模和类型的项目需求。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol><li>跨浏览器测试：LambdaTest允许用户在不同的操作系统、浏览器和设备上进行测试。这使得用户可以确保他们的应用程序能够在不同的环境中正常运行。</li><li>实时测试：LambdaTest的实时测试功能允许用户在真实浏览器和实际设备上测试他们的应用程序，而不是使用模拟器或虚拟机。</li><li>自动化测试：LambdaTest集成了多个自动化测试框架，包括Selenium和Appium。这使得用户可以更快速地执行测试和获得更好的覆盖率。</li><li>特性测试：LambdaTest的特性测试功能允许用户手动、自动化地测试Web应用程序的各种特性，例如像登陆、下拉菜单、滚动等方面 。</li><li>并行测试：LambdaTest提供了并行执行测试用例的功能，使用户可以在较短的时间内完成更多的测试。</li><li>Bug 捕获工具：LambdaTest配备了一套强大的Bug记录和管理工具，帮助用户轻松捕获和管理其测试中发现的所有Bug以便追溯，解决问题。</li><li>高级安全功能：LambdaTest提供高级安全功能来保护用户敏感数据和测试结果的安全。它还包括私人网络和VPN，以确保用户的数据得到保护和安全传输。</li></ol><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li>适用于各种浏览器和操作系统：Lambdatest支持超过2000种不同类型的浏览器和操作系统，您可以在任何设备上使用该平台进行测试。</li><li>实施方便：使用Lambdatest进行测试非常容易。只需上传您想要测试的代码和测试脚本，并选择需要测试的配置，Lambdatest将处理其余部分。</li><li>高度安全：Lambdatest采用SSL &#x2F; TLS协议来保护用户敏感数据，确保最高级别的数据安全性。</li><li>支持自动化测试：您可以使用Lambdatest执行自动化测试，它与各种自动化框架和库兼容。</li><li>提供实时测试环境：Lambdatest提供实时测试环境，让您可以立即查看测试结果。这意味着您可以即时检测到错误并加以纠正，并可从开始就更好地了解应用程序的表现。</li><li>管理测试项目的方便：Lambdatest提供一个简单而直观的用户界面，使您能够轻松管理测试项目。您可以随时查看测试进度并分享测试结果。</li><li>提供竞争力价值：Lambdatest价格合理，为小型企业和初创公司提供了测试功能。</li></ul><h1 id="SauceLabs"><a href="#SauceLabs" class="headerlink" title="SauceLabs"></a>SauceLabs</h1><p>SauceLabs 是一种基于云平台的 Web 和 移动应用自动化测试工具，它提供了一种简单有效的方法来测试 web 应用和移动应用在不同操作系统、浏览器和设备上的表现。SauceLabs 平台可以在不同的环境中执行不同的自动化测试，例如独立脚本的支持、多个浏览器的同时支持等等。在 SauceLabs 中，您只需编写一次自动化脚本即可实现在 iOS、Android、Windows 或 Mac 操作系统上运行的浏览器中进行测试。</p><h2 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h2><ol><li>Cross Browser 测试：SauceLabs 允许用户同时在多个真实的浏览器和版本中运行测试，确保 Web 应用程序的兼容性。</li><li>Parallel Testing：SauceLabs 的分布式体系结构允许用户并发运行大量测试用例以获得更快的测试结果。</li><li>操作系统覆盖：SauceLabs 支持 Web 和移动应用程序测试中的所有流行操作系统 (OS) 平台。</li><li>设备模拟器和仿真：Sauce Labs 集成了模拟或模拟真实移动设备和桌面浏览器。</li><li>设备暴露：用户可以使用 SauceLabs 的套件将真实的物理 iOS 和 Android 设备连接到测试过程中。</li><li>CI&#x2F;CD 整合: SauceLabs 与常用的 CI&#x2F;CD 工具集成，包括 Jenkins、Travis CI、CircleCI 等等。</li><li>Debugging tools：SauceLabs 提供了一组调试工具帮助开发人员诊断问题，如截屏、日志、视频录制等。</li></ol><h2 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h2><p>SauceLabs 相比其他测试平台，并提供以下优势：</p><ul><li>可扩展性：随着公司团队的扩大，测试需要跟上发展的规模。SauceLabs支持可伸缩的云体系结构，允许以适合各种规模的任何一个团队或需求。</li><li>跨平台：企业对不同平台的支持要求不断增加（Windows、macOS、Linux、iOS、Android，甚至 IoT 设备），而不同的平台走向不同的趋势使得测试任务变得复杂。Sauce Labs 可以在各种浏览器和操作系统平台上执行测试，整合多个软硬件环境。</li><li>时效性：SauceLabs 可以启动无限的浏览器会话，在不需等待时间的情况下，立即在平行板上执行自动化测试，以便追求最短的周期时间（cycle time）。</li><li>成本节约：传统的广泛测试需要先从公司的测试设施或云提供商购买硬件和设备，然后运行测试来修复错误。 SauceLabs 的云测试服务减少了购买，部署，配置以及其相关管理费用。</li><li>安全性：企业级客户通常对代码库拥有完全访问权限，这意味着代码可能受到各种威胁。Sauce Labs 为每个客户专门提供虚拟机，并用于隔离和安全管控原产生的风险，确保数据和安全性。</li><li>运营可见性：Sauce Labs 提供内置的报告，运营数据和自定义仪表板来跟踪测试性能和缺陷趋势，以便全面评估测试资料的质量水平。</li></ul><h1 id="套餐对比"><a href="#套餐对比" class="headerlink" title="套餐对比"></a>套餐对比</h1><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678943419739.png" alt="跨浏览器测试平台套餐对比"></p>]]></content>
    
    
    <summary type="html">本文推荐了十个 2023 年最好用的跨浏览器测试工具</summary>
    
    
    
    <category term="前端" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="测试" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="前端测试" scheme="https://youngjuning.js.org/tags/%E5%89%8D%E7%AB%AF%E6%B5%8B%E8%AF%95/"/>
    
    <category term="跨浏览器测试" scheme="https://youngjuning.js.org/tags/%E8%B7%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B5%8B%E8%AF%95/"/>
    
    <category term="cross browser testing" scheme="https://youngjuning.js.org/tags/cross-browser-testing/"/>
    
    <category term="browserstack" scheme="https://youngjuning.js.org/tags/browserstack/"/>
    
    <category term="saucelabs" scheme="https://youngjuning.js.org/tags/saucelabs/"/>
    
    <category term="testcafe" scheme="https://youngjuning.js.org/tags/testcafe/"/>
    
    <category term="selenium" scheme="https://youngjuning.js.org/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>「已解决」Parsing error: The keyword &#39;enum&#39; is reserved</title>
    <link href="https://youngjuning.js.org/2b120c3058c6/"/>
    <id>https://youngjuning.js.org/2b120c3058c6/</id>
    <published>2023-03-14T04:10:32.000Z</published>
    <updated>2023-03-23T07:00:19.414Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>我正在使用 TypeScript 和 React 进行开发。这个项目是通过 CRA 生成的，并且我在 <code>.eslintrc.json</code> 中使用了 react-app 的配置。然而，我决定使用 <code>eslint-config-airbnb</code>，因此我添加了它并更改了我的 <code>.eslintrc.json</code> 文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;airbnb&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>但是，我当我定义一个 <code>enum</code> 时，Eslint 抛出了 <code>Parsing error: The keyword enum is reserved</code> 的错误。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`Parsing error: The keyword &#x27;enum&#x27; is reserved eslint`</span></span><br></pre></td></tr></table></figure><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>当你使用 <code>eslint-config-airbnb</code> 时，你需要安装 <code>@typescript-eslint/parser</code> 和 <code>@typescript-eslint/eslint-plugin</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @typescript-eslint/parser -D</span><br></pre></td></tr></table></figure><p>然后，你需要在 <code>.eslintrc.json</code> 中添加以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@typescript-eslint/parser&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;@typescript-eslint&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>此外你可能还需要安装 <code>eslint-plugin-import</code>、<code>eslint-plugin-react</code>、<code>eslint-plugin-jsx-a11y</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add eslint-plugin-import eslint-plugin-react eslint-plugin-jsx-a11y -D</span><br></pre></td></tr></table></figure><p>然后，你需要在 <code>.eslintrc.json</code> 中添加以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;react&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;jsx-a11y&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="推荐方案"><a href="#推荐方案" class="headerlink" title="推荐方案"></a>推荐方案</h1><p>直接使用 <a href="https://www.npmjs.com/package/eslint-config-airbnb-typescript">eslint-config-airbnb-typescript</a> 快速配置。</p>]]></content>
    
    
    <summary type="html">本文介绍了如何解决 Eslint 警告 Parsing error: The keyword &#39;enum&#39; is reserved</summary>
    
    
    
    <category term="前端" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    <category term="EsLint" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/EsLint/"/>
    
    
    <category term="React" scheme="https://youngjuning.js.org/tags/React/"/>
    
    <category term="TypeScript" scheme="https://youngjuning.js.org/tags/TypeScript/"/>
    
    <category term="Eslint" scheme="https://youngjuning.js.org/tags/Eslint/"/>
    
    <category term="airbnb" scheme="https://youngjuning.js.org/tags/airbnb/"/>
    
    <category term="enum" scheme="https://youngjuning.js.org/tags/enum/"/>
    
  </entry>
  
  <entry>
    <title>使用 React Router 优化单页应用程序（SPAs）</title>
    <link href="https://youngjuning.js.org/3c335a370ab4/"/>
    <id>https://youngjuning.js.org/3c335a370ab4/</id>
    <published>2023-03-13T15:12:00.000Z</published>
    <updated>2023-03-23T07:00:19.418Z</updated>
    
    <content type="html"><![CDATA[<!-- DRAFT 使用 React Router 优化单页应用程序（SPAs）  --><p>React 通常用于构建单页面应用程序（SPA）。 SPA 往往具有多个页面视图。当从一个页面视图导航到另一个页面视图时，重新加载整个页面视图是一项繁琐且不那么高效的任务。实际上，它会削弱 SPA 的优势。为了正常工作，SPA 必须在需要时呈现部分视图，而不是重新加载整个页面。</p><p>在单页应用程序（SPA）中从一个页面导航到另一个页面时，路由起着重要作用。路由可以分为静态和动态两种。SPA应用程序采用动态路由方式。**在这个教程中，我们将会讨论一种流行的和React应用程序一起使用的路由库，它被称为 <a href="https://reacttraining.com/react-router/web/guides/quick-start">React Router</a>**。</p><details class="toggle" ><summary class="toggle-button" style="">原文</summary><div class="toggle-content"><p>React is often used for building single page applications (SPAs). SPAs tend to have multiple page views. When navigating from one-page view to another, reloading the entire page view is a tedious and not so efficient task. In fact, it diminishes the benefits of a SPA. To work as it should, a SPA must render parts of views when required instead of reloading the entire page.</p><p>Routing comes into the picture when navigating from one page to another in a SPA app. Routing can be categorized in two ways. Static and dynamic. SPAs follow dynamic approach. <strong>In this tutorial, we will discuss a popular routing library used with React applications known as <a href="https://reacttraining.com/react-router/web/guides/quick-start">React Router</a></strong>.</p><h1 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h1><ul><li>NodeJS v8.x.x or higher installed along with npm&#x2F;yarn</li><li>create-react-app installed globally to on your local dev machine generate a new React project</li></ul><p>Bonus: You can also, use npx to generate a new React project without installing create-react-app.</p><h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><p>To create a new React project run the following command at the desired location on your local machine.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app react-router-v4-demo</span><br></pre></td></tr></table></figure><p>Once the project is generated, traverse inside the newly created directory. This strategy is the default way to generate a new React app.</p><p>React Router as a library contains three different npm packages.</p><ul><li>react-router</li><li>react-router-dom</li><li>react-router-native</li></ul><p>Each of the packages has a different use case. The first one, <code>react-router</code> is the core package and is used with the next two packages listed above. The <code>react-router-dom</code> has to be used when building a web application. This is what we are going to use in this tutorial. The last one, <code>react-router-native</code> tends to be used in a <a href="https://medium.com/crowdbotics/how-to-build-a-real-time-logo-detection-app-with-react-native-google-vision-api-and-crowdbotics-9ed65fbcd15">React Native</a> application.</p><p>To add React Router in the React app, execute the following command from a terminal window.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure><p>Please note that, for the rest of the tutorial, we will be using yarn as the JavaScript package manager to add or remove dependencies. If you wish to use npm, there is no one stopping you.</p><p>To run the React app, go to the terminal window and execute the command npm start. This will start the development server. You will be welcomed by the default boilerplate project screen in a web browser window on URL <code>http://localhost:3000/</code>.</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678720760813.png" alt="Edit src/App.js and save to reload"></p><h1 id="First-Route-with-React-Router"><a href="#First-Route-with-React-Router" class="headerlink" title="First Route with React Router"></a>First Route with React Router</h1><p>To create the first route in the React app, let us import BrowserRouter from react-router library.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br></pre></td></tr></table></figure><p>To create a route, we use <code>&lt;Route&gt;</code> from the react-router-dom. This is where the logic of routing is placed. It renders the UI of a component. A <code>&lt;Route&gt;</code> has a prop called path which is always matched with the current location of the app. On the basis of this prop, the desired component gets rendered. When the component is not getting rendered, Routereturns null. The component name is also passed as prop component. Look at the below snippet.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There is the functional App component that returns a BrowserRouter which holds the very first Route component. The path is currently pointing towards the Home component which has the following UI logic.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home Component<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, visit the URL on port 3000 and you will see the Home component being rendered right now.</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678721815386.png"></p><p>This is a bare minimum example. Now let us add another route with the same props like the Home. Call this route About with a similar rendering logic as Home.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">About</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>About Component<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now add this functional component as the second route, below the Home route. Also, add both routes inside a div element. A router component can hold a single child element and adding a div solves this problem and allows the router component to have as many children as we want.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Try visiting the URL <code>http://localhost:3000/about</code>. You will notice that both the components are being rendered right now on the path <code>/about</code>.</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678721636017.png"></p><p>The reason for this is that regular expression engine that React Router uses internally considers both the routes that are being started with a forward slash &#x2F; equal. To solve this issue, we can use another essential prop on the Home route called exact.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Router</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">exact</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Router</span>&gt;</span><br></pre></td></tr></table></figure><p>This exact is also known as a qualifier which states that the path must match the exactly the &#x2F; and nothing after it, such as <code>/about</code> Now, if you visit the browser window at the URL <code>http://localhost:3000/about</code> you will notice that only the about component is getting rendered this time.</p><h1 id="What-is-BrowserRouter"><a href="#What-is-BrowserRouter" class="headerlink" title="What is BrowserRouter?"></a>What is BrowserRouter?</h1><p>Do you remember reading earlier about that <code>react-router-dom</code> is used only in case of web applications? Well, <code>react-router-dom</code> library holds two types of routers API for a React application to use. One is called BrowserRouter that you have seen in action in the previous section. The other one is called HashRouter.</p><p>A BrowserRouter will always listen to URLs like: <code>http://localhost:3000/about</code> whereas a HashRouter will have <code>http://localhost:3000/#/about</code>, as the name suggests, uses a hash # in between. So why did we use the BrowserRouter?</p><p>BrowserRouter is a popular choice among modern day web applications. The main reason behind is that it uses HTML5 History API to keep track of the router history of your React app. The HashRouter has a use case for legacy browsers where window.location.hash is still being used to keep a track of routes in a SPA.</p><h2 id="DIY-Exercise-👇"><a href="#DIY-Exercise-👇" class="headerlink" title="DIY Exercise 👇"></a>DIY Exercise 👇</h2><p>Here is a small task for you. Modify directory structure like below screenshot and separate the two functional components Home and about in their own component files such that, in future, if they grow with more JSX to render.</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678721953570.png"></p><p>You can totally skip this if you want and move on to the next section. But performing this small task will benefit you to have an understanding of the above concepts.</p><h1 id="The-Link-Component"><a href="#The-Link-Component" class="headerlink" title="The Link Component"></a>The Link Component</h1><p>To navigate between to web pages in HTML, there is an <code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code> anchor tag available. However, using this traditional approach will lead to a browser refresh. In order to overcome this, React Router API offers a Link component that can be used to navigate to a particular URL or a component.</p><p>Let us try to create a navigation menu with this new knowledge. Import Link from <code>react-router-dom</code> in <code>App.js</code> file. Here is the modified snippet of App component.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;./components/Home&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;./components/About&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> <span class="attr">10</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">padding:</span> <span class="attr">10</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            Home</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">padding:</span> <span class="attr">10</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            About</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">exact</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure><p>In the above snippet, notice that all the Links are being added before all the Route components. The styling attributes inside style are optional for now. Start the development server and visit the browser window and you will notice a navigation menu pops up at the top. Try clicking links to navigate between different components.</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678722050699.png"></p><p>Wherever a <code>Link</code> is rendered in a React project, an anchor <code>&lt;a&gt;</code> will be rendered in the application’s HTML.</p><h1 id="Active-Links-with-NavLink"><a href="#Active-Links-with-NavLink" class="headerlink" title="Active Links with NavLink"></a>Active Links with NavLink</h1><p>In React Router API, NavLink is the extended version of the <code>Link</code> component. You can say that is a special type of the Link that can style itself as to represent the active state when matches the current route.</p><p>To demonstrate this, first, let us replace all the <code>Link</code> tags with NavLink in <code>App.js</code> file.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Route</span>, <span class="title class_">NavLink</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;./components/Home&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;./components/About&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> <span class="attr">10</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">padding:</span> <span class="attr">10</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            Home</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">padding:</span> <span class="attr">10</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            About</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">exact</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure><p>At this point, each NavLink link is going to behave like an ordinary Link component which means there is no change so far. To make a link active, add an activeClassName prop to that. Such as below.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">NavLink</span> to=<span class="string">&#x27;/&#x27;</span> style=&#123;&#123; <span class="attr">padding</span>: <span class="number">10</span> &#125;&#125; activeClassName=<span class="string">&#x27;active&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>To set up the corresponding CSS for this to work, open <code>App.css</code> file and add the below.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Do not forget to import this file inside <code>App.js</code>. Also, modify the about route to have an activeClassName.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./App.css&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &#123;<span class="comment">/* */</span>&#125;</span><br><span class="line">  &lt;nav style=&#123;&#123; <span class="attr">margin</span>: <span class="number">10</span> &#125;&#125;&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">activeClassName</span>=<span class="string">&#x27;active&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Home</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">activeClassName</span>=<span class="string">&#x27;active&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          About</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line">  &lt;/nav&gt;</span><br><span class="line"></span><br><span class="line"> &#123;<span class="comment">/* */</span>&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Go back to the browser, open develop tools like below and you will notice, at first, the Home route has a class name active.</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678722233048.png"></p><p>Try navigating to the About route and see what happens.</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678722243666.png"></p><p>On navigating to About route did you notice that the active class name is also added to the corresponding route? However, the Home route still has the active class even though the URL matches the <code>/about</code>. Why?</p><p>The way NavLink works is almost similar to Route component in React Router API. To make sure that only one route has the class active state, try modifying the home route in the navigation menu, as below.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//App.js</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">NavLink</span> to=<span class="string">&#x27;/&#x27;</span> exact activeClassName=<span class="string">&#x27;active&#x27;</span>&gt;</span><br><span class="line">  <span class="title class_">Home</span></span><br><span class="line">&lt;/<span class="title class_">NavLink</span>&gt;</span><br></pre></td></tr></table></figure><p>You will get the desired output this time.</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678722287934.png"></p><h1 id="Adding-Parameters-to-the-Routes"><a href="#Adding-Parameters-to-the-Routes" class="headerlink" title="Adding Parameters to the Routes"></a>Adding Parameters to the Routes</h1><p>In this section, you will learn how to create and manage dynamic routes based on a query parameter such as <code>:id</code>. We start by creating a static array in <code>App.js</code> file that will serve as the mock data.</p><p>The idea is to demonstrate a route as <code>/posts</code> which displays all the posts that are coming from the array. However, each post in the array will be having an id or a unique identifier. Using that unique identifier, you will be approaching the concept of dynamic content rendering by writing the logic for URLs such as <code>/posts/:id</code> where :id will be represented by the specific id of a post.</p><p>To start, let us add a bunch of mock posts in the state inside a new component file called <code>components/posts.js</code>.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Posts.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;../App.css&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Posts</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">posts</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&quot;Hello Blog World!&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">&quot;My second post&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">&quot;What is React Router?&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;posts&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Posts List<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Posts</span></span><br></pre></td></tr></table></figure><p>The corresponding styles to the above are added in <code>App.css</code> file for brevity.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.posts</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.posts</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.posts</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, import the newly created component inside App.js where other routes already exist.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//App.js</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Posts</span> <span class="keyword">from</span> <span class="string">&quot;./components/Posts&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> <span class="attr">10</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">exact</span> <span class="attr">activeClassName</span>=<span class="string">&#x27;active&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Home</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">activeClassName</span>=<span class="string">&#x27;active&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            About</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/posts&#x27;</span> <span class="attr">activeClassName</span>=<span class="string">&#x27;active&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Posts</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">exact</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/posts&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Posts&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure><p>The existing navigation menu has a new route and its called Posts.</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678722701566.png"></p><p>Open Posts.js to rend er the list of Posts and display them as a list whenever the current location in the web browser matches <code>/posts</code>.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;../App.css&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">&#123; match &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>ID: &#123;match.params.id&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Posts</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">posts</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;Hello Blog World!&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;My second post&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;What is React Router?&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; posts &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;posts&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Posts List<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;posts.map(post =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;post.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">posts</span>/$&#123;<span class="attr">post.id</span>&#125;`&#125;&gt;</span>&#123;post.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/posts/:id&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Child&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Posts</span></span><br></pre></td></tr></table></figure><p>Also, the Child component reads anything coming from the URL parameters, such as, in the above case, the id of each post. A match object contains information about how a <code>&lt;Route path&gt;</code> matched the URL, thus, in our case, the id of each post.</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678722789204.png"></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Hopefully, by now, you are familiar with the basic concepts of how React Router library works. It is a powerful library that helps you build better React apps. If you want to learn more about React Router visit its official documentation here.</p><p>You can find the complete for the tutorial at this Github repo.</p></div></details><blockquote><p>原文地址：<a href="https://www.crowdbotics.com/blog/introduction-to-react-router-v4-with-reactjs">https://www.crowdbotics.com/blog/introduction-to-react-router-v4-with-reactjs</a><br>原文作者：<a href="https://www.crowdbotics.com/author/amanhimself">amanhimself</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- DRAFT 使用 React Router 优化单页应用程序（SPAs）  --&gt;

&lt;p&gt;React 通常用于构建单页面应用程序（SPA）。 SPA 往往具有多个页面视图。当从一个页面视图导航到另一个页面视图时，重新加载整个页面视图是一项繁琐且不那么高效的任务。实际上</summary>
      
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="前端" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/React/"/>
    
    
    <category term="SPA" scheme="https://youngjuning.js.org/tags/SPA/"/>
    
    <category term="React" scheme="https://youngjuning.js.org/tags/React/"/>
    
    <category term="React Router" scheme="https://youngjuning.js.org/tags/React-Router/"/>
    
    <category term="单页应用程序" scheme="https://youngjuning.js.org/tags/%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>「已解决」EADDRINUSE: address already in use</title>
    <link href="https://youngjuning.js.org/4475c84c4024/"/>
    <id>https://youngjuning.js.org/4475c84c4024/</id>
    <published>2023-03-09T18:25:43.000Z</published>
    <updated>2023-03-23T07:00:19.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>当你尝试重启一个 Node 应用时，上一个应用没有正确关闭，你可能会看到一个“listen EADDRINUSE: address already in use”错误，例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">⇒  npm start</span><br><span class="line">&gt; react-app-es6-jest@0.0.1 start /Users/admin/Code/WorkSpace/react-app-es6-jest</span><br><span class="line">&gt; concurrently <span class="string">&quot;npm run start:server&quot;</span> <span class="string">&quot;npm run start:client&quot;</span></span><br><span class="line"></span><br><span class="line">[0]</span><br><span class="line">[0] &gt; react-app-es6-jest@0.0.1 start:server /Users/admin/Code/WorkSpace/react-app-es6-jest</span><br><span class="line">[0] &gt; nodemon src/server/index.js --watch src/server -e js --<span class="built_in">exec</span> babel-node</span><br><span class="line">[0]</span><br><span class="line">[0] [nodemon] 2.0.1</span><br><span class="line">[0] [nodemon] to restart at any time, enter `rs`</span><br><span class="line">[0] [nodemon] watching <span class="built_in">dir</span>(s): src/server/**/*</span><br><span class="line">[0] [nodemon] watching extensions: js</span><br><span class="line">[0] [nodemon] starting `babel-node src/server/index.js`</span><br><span class="line">[0] events.js:174</span><br><span class="line">[0]       throw er; // Unhandled <span class="string">&#x27;error&#x27;</span> event</span><br><span class="line">[0]       ^</span><br><span class="line">[0]</span><br><span class="line">[0] Error: listen EADDRINUSE: address already <span class="keyword">in</span> use :::3000</span><br><span class="line">[0]     at Server.setupListenHandle [as _listen2] (net.js:1279:14)</span><br><span class="line">[0]     at listenInCluster (net.js:1327:12)</span><br><span class="line">[0]     at Server.listen (net.js:1414:7)</span><br><span class="line">[0]     at Function.listen (/Users/admin/Code/WorkSpace/react-app-es6-jest/node_modules/express/lib/application.js:618:24)</span><br><span class="line">[0] [nodemon] app crashed - waiting <span class="keyword">for</span> file changes before starting...</span><br></pre></td></tr></table></figure><h1 id="问题背后的原因"><a href="#问题背后的原因" class="headerlink" title="问题背后的原因"></a>问题背后的原因</h1><p><code>process.on(&#39;exit&#39;, ...)</code> 不会在进程崩溃或被杀死时调用。它只在事件循环结束时调用，因为 <code>server.close()</code> 会结束事件循环（它仍然必须等待当前运行的堆栈），所以将其放在 exit 事件中是没有意义的。</p><blockquote><p>译者注：有时候直接关闭 vscode 会导致进程没有正确关闭，这时候也可能会出现这个问题。</p></blockquote><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>该应用程序的正确修复是</p><ul><li>在 <code>server.listen()</code> 之前检查端口是否已经被占用</li><li>在崩溃时，可以使用 <code>process.on(&#39;uncaughtException&#39;, ..)</code> 进行处理。</li><li>在 kill 操作上，可以使用 <code>process.on(&#39;SIGTERM&#39;, ..)</code> 进行处理。</li></ul><p>当出现 EADDRINUSE 问题时，为了解决它，您需要手动终止该进程。为此，您需要找到进程的进程 ID（PID）。您知道该进程占用了机器或服务器上的特定端口。</p><h2 id="手动杀死进程"><a href="#手动杀死进程" class="headerlink" title="手动杀死进程"></a>手动杀死进程</h2><h3 id="Mac-x2F-Linux"><a href="#Mac-x2F-Linux" class="headerlink" title="Mac&#x2F;Linux"></a>Mac&#x2F;Linux</h3><p>找到与该端口关联的进程ID（PID）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ lsof -i tcp:3000</span><br><span class="line">COMMAND PID   USER  FD  TYPE DEVICE             SIZE/OFF NODE NAME</span><br><span class="line">node    44475 chen5 31u IPv4 0x8b1721168764e4bf 0t0 TCP *:strexec-s (LISTEN)</span><br></pre></td></tr></table></figure><p>这将返回使用该端口的任何进程的详细信息，包括PID。然后可以使用以下命令杀死该进程：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> -9 44475</span><br></pre></td></tr></table></figure><p>请注意，<code>-9</code> 选项强制终止进程而不考虑其当前状态，并立即使其退出。当需要强制关闭一个已经挂起或占据端口的进程时，通常需要使用此选项。</p><p>如果你遇到权限问题，请尝试在命令前加上sudo。例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">kill</span> -9 44475</span><br></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h4 id="解决方案-1：任务管理器"><a href="#解决方案-1：任务管理器" class="headerlink" title="解决方案 1：任务管理器"></a>解决方案 1：任务管理器</h4><p>打开“任务管理器”应用程序 (taskman.exe)，从进程或服务选项卡根据 PID 列进行排序。要显示 PID 列，请右键单击标头行并从列表中选择 PID。右键单击要停止的进程，然后选择“结束任务”</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678416348850.png" alt="example in Windows, source from Internet"></p><h4 id="解决方案-2：命令行"><a href="#解决方案-2：命令行" class="headerlink" title="解决方案 2：命令行"></a>解决方案 2：命令行</h4><p>以管理员身份打开CMD（命令提示符）窗口，通过导航到 <code>开始 &gt; 运行 &gt; 输入cmd &gt; 右键单击“命令提示符”</code>，然后选择“以管理员身份运行”打开 。</p><p><img src="https://cdn.jsdelivr.net/gh/youngjuning/images@main/1678416450947.png" alt="source from Google Search"></p><p>可以使用命令提示符来查找与特定端口相关的进程ID。在管理员模式下打开CMD窗口，然后使用” netstat “命令来获取所有处于活动状态的端口以及占用者的进程ID。以下是要使用的完整命令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -ano|findstr <span class="string">&quot;PID :3000&quot;</span></span><br><span class="line">Proto Local Address Foreign Address State PID</span><br><span class="line">TCP 0.0.0.0:3000 0.0.0.0:0 LISTENING 18264</span><br></pre></td></tr></table></figure><p>其中 <code>-a</code> 选项显示所有正在使用的端口（而不仅仅是与当前用户相关的端口）。<code>-n</code> 选项停止主机名查询（这需要很长时间）。<code>-o</code> 选项列出负责端口活动的进程 ID。最后，<code>findstr</code> 命令匹配包含 PID 字符串的标题行，并查找指定的端口。例如， <code>PID :3000</code>。</p><p>然后终止此进程（<code>/f</code> 是强制）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ taskkill /pid 18264 /f</span><br></pre></td></tr></table></figure><blockquote><p>原文地址：<a href="https://114.li/jscdep">How to kill server when seeing “EADDRINUSE: address already in use”</a><br>原文作者：<a href="https://bindichen.medium.com/">BChen</a><br>译文出自：<a href="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/">洛竹翻译计划</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;当你尝试重启一个 Node 应用时，上一个应用没有正确关闭，你可能会看到一个“listen EADDRINUSE: address alre</summary>
      
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="前端" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="issues" scheme="https://youngjuning.js.org/categories/issues/"/>
    
    <category term="NodeJs" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/NodeJs/"/>
    
    
    <category term="Node" scheme="https://youngjuning.js.org/tags/Node/"/>
    
    <category term="EADDRINUSE" scheme="https://youngjuning.js.org/tags/EADDRINUSE/"/>
    
    <category term="address already in use" scheme="https://youngjuning.js.org/tags/address-already-in-use/"/>
    
    <category term="进程" scheme="https://youngjuning.js.org/tags/%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>基于 lerna 的多包 JavaScript 项目搭建维护</title>
    <link href="https://youngjuning.js.org/4e0dc52b8e3c/"/>
    <id>https://youngjuning.js.org/4e0dc52b8e3c/</id>
    <published>2023-03-08T10:26:27.000Z</published>
    <updated>2023-03-23T07:00:19.422Z</updated>
    
    <content type="html"><![CDATA[<p>将大型代码仓库分割成多个独立版本化的 软件包（package）对于代码共享来说非常有用。但是，如果某些更改 跨越了多个代码仓库的话将变得很麻烦并且难以跟踪，并且，跨越多个代码仓库的测试将迅速变得非常复杂。</p><p>为了解决这些（以及许多其它）问题，某些项目会将 代码仓库分割成多个软件包（package），并将每个软件包存放到独立的代码仓库中。但是，例如 Babel、 React、Angular、Ember、Meteor、Jest 等项目以及许多其他项目则是在 一个代码仓库中包含了多个软件包（package）并进行开发。</p><p>Lerna 是一种工具，针对 使用 git 和 npm 管理多软件包代码仓库的工作流程进行优化。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="全局安装-lerna"><a href="#全局安装-lerna" class="headerlink" title="全局安装 lerna"></a>全局安装 lerna</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install lerna -g</span><br></pre></td></tr></table></figure><h3 id="初始化-lerna-项目"><a href="#初始化-lerna-项目" class="headerlink" title="初始化 lerna 项目"></a>初始化 lerna 项目</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lerna init --independent</span><br></pre></td></tr></table></figure><p>你的代码仓库目前应该是如下结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lerna-repo/</span><br><span class="line">  packages/</span><br><span class="line">  package.json</span><br><span class="line">  lerna.json</span><br></pre></td></tr></table></figure><h2 id="创建-package"><a href="#创建-package" class="headerlink" title="创建 package"></a>创建 package</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ lerna create module-1</span><br><span class="line">$ lerna create module-2</span><br></pre></td></tr></table></figure><h2 id="yarn-workspaces-amp-Lerna-Hoisting"><a href="#yarn-workspaces-amp-Lerna-Hoisting" class="headerlink" title="yarn workspaces &amp; Lerna Hoisting"></a>yarn workspaces &amp; Lerna Hoisting</h2><p>使用 <a href="https://yarnpkg.com/lang/zh-Hans/docs/workspaces/">yarn workspaces</a> 结合 Lerna <code>useWorkspaces</code> 可以实现 <a href="https://github.com/lerna/lerna/blob/main/doc/hoist.md">Lerna Hoisting</a>。这并不是多此一举，这可以让你在统一的地方（根目录）管理依赖，这即节省时间又节省空间。</p><p>配置 lerna.json:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;npmClient&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yarn&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;useWorkspaces&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>顶级 package.json 必须包含一个 workspaces 数组:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;workspaces&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;packages/*&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="npm-registry"><a href="#npm-registry" class="headerlink" title="npm registry"></a>npm registry</h2><h3 id="搭建-verdaccio"><a href="#搭建-verdaccio" class="headerlink" title="搭建 verdaccio"></a>搭建 verdaccio</h3><blockquote><p>verdaccio 是一个开源轻量的 npm 私服</p></blockquote><p>全局安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install verdaccio -g</span><br></pre></td></tr></table></figure><p>配置 <code>~/.config/verdaccio/config.yaml</code> uplinks:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># a list of other known repositories we can talk to</span></span><br><span class="line"><span class="attr">uplinks:</span></span><br><span class="line">  <span class="attr">npmjs:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://registry.npmjs.org/</span></span><br><span class="line">  <span class="attr">taobao:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://registry.npm.taobao.org/</span></span><br></pre></td></tr></table></figure><h3 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h3><p>0、run <code>sudo npm i -g pm2</code></p><p>1、run <code>pm2 start verdaccio</code> &amp; <code>pm2 startup</code></p><p>outputs:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[PM2] Init System found: launchd</span><br><span class="line">[PM2] To setup the Startup Script, copy/paste the following <span class="built_in">command</span>:</span><br><span class="line">sudo <span class="built_in">env</span> PATH=<span class="variable">$PATH</span>:/usr/local/bin /usr/local/lib/node_modules/pm2/bin/pm2 startup launchd -u luozhu --hp /Users/luozhu</span><br></pre></td></tr></table></figure><p>2、run <code>sudo env PATH=$PATH:/usr/local/bin /usr/local/lib/node_modules/pm2/bin/pm2 startup launchd -u luozhu --hp /Users/luozhu</code></p><p>outputs:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[PM2] Freeze a process list on reboot via:</span><br><span class="line">$ pm2 save</span><br><span class="line"></span><br><span class="line">[PM2] Remove init script via:</span><br><span class="line">$ pm2 unstartup launchd</span><br></pre></td></tr></table></figure><h3 id="修改-lerna-publishConfig"><a href="#修改-lerna-publishConfig" class="headerlink" title="修改 lerna publishConfig"></a>修改 lerna publishConfig</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lerna.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;ignoreChanges&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;ignored-file&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;**/__tests__/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;**/*.md&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;publish&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;registry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:4873&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;conventionalCommits&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chore(release): publish&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果子包是带 <code>scope</code> 的，需要为子包设置 <code>publishConfig.access</code></p></blockquote><h2 id="commitlint-amp-commitizen"><a href="#commitlint-amp-commitizen" class="headerlink" title="commitlint &amp; commitizen"></a>commitlint &amp; commitizen</h2><blockquote><p>请参考我之前的文章 <a href="https://juejin.im/post/6877462747631026190">一文搞定规范化 Git Commit</a></p></blockquote><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn install</span><br></pre></td></tr></table></figure><h3 id="package-依赖"><a href="#package-依赖" class="headerlink" title="package 依赖"></a>package 依赖</h3><p>给指定 package 安装依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 或者（推荐）</span></span><br><span class="line">$ lerna add lodash packages/module-1</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ lerna add lodash --scope=module-1</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ lerna add lodash **/module-1</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ yarn workspace module-1 add lodash</span><br></pre></td></tr></table></figure><p>给所有 package 安装依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lerna add lodash</span><br></pre></td></tr></table></figure><h3 id="workspace-之间的依赖"><a href="#workspace-之间的依赖" class="headerlink" title="workspace 之间的依赖"></a>workspace 之间的依赖</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ lerna add module-2 --scope module-1</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ lerna add module-2 packages/module-1</span><br></pre></td></tr></table></figure><h3 id="共用的工具依赖"><a href="#共用的工具依赖" class="headerlink" title="共用的工具依赖"></a>共用的工具依赖</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -WD typescript</span><br></pre></td></tr></table></figure><h2 id="lerna-json"><a href="#lerna-json" class="headerlink" title="lerna.json"></a>lerna.json</h2><ul><li>version: 当前仓库的版本，Independent mode 请设置为 <code>independent</code></li><li>npmClient: 指定运行命令的客户端程序（默认是 npm）</li><li>ignoreChanges: 一个不包含在 <code>lerna changed/publish</code> 的 glob 数组。使用这个去阻止发布不必要的更新，比如修复 <code>README.md</code></li><li>command<ul><li>publish<ul><li>registry：设置自定义的 npm 代理（比如使用 verdaccio 搭建的私服）</li><li>conventionalCommits：<code>lerna version</code> 会自动决定 version bump 和生成 CHANGELOG 文件</li><li>message：一个 publish 时的自定义 commit 信息。详情请查看<a href="https://github.com/lerna/lerna/blob/main/commands/version#--message-msg">@lerna&#x2F;version</a></li></ul></li></ul></li></ul><h2 id="npm-scripts"><a href="#npm-scripts" class="headerlink" title="npm scripts"></a>npm scripts</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;release:beta&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lerna publish --canary --pre-dist-tag=beta --preid=beta --yes&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;release:rc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lerna publish prerelease --pre-dist-tag=rc --preid=rc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;release:next&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lerna publish prerelease --pre-dist-tag=next --preid=next&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;release:preminor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lerna publish preminor --pre-dist-tag=next --preid=next&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;release:premajor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lerna publish premajor --pre-dist-tag=next --preid=next&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;release&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lerna publish&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;release:minor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lerna publish minor&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;release:major&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lerna publish major&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git cz&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>本文首发于「<a href="https://youngjuning.js.org/">洛竹的官方网站</a>」，同步于公众号「<a href="https://cdn.jsdelivr.net/gh/youngjuning/images/20210418112129.jpeg">洛竹早茶馆</a>」和「<a href="https://juejin.cn/user/325111174662855">掘金专栏</a>」。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;将大型代码仓库分割成多个独立版本化的 软件包（package）对于代码共享来说非常有用。但是，如果某些更改 跨越了多个代码仓库的话将变得很麻烦并且难以跟踪，并且，跨越多个代码仓库的测试将迅速变得非常复杂。&lt;/p&gt;
&lt;p&gt;为了解决这些（以及许多其它）问题，某些项目会将 代码仓</summary>
      
    
    
    
    <category term="前端" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://youngjuning.js.org/tags/JavaScript/"/>
    
    <category term="npm" scheme="https://youngjuning.js.org/tags/npm/"/>
    
    <category term="lerna" scheme="https://youngjuning.js.org/tags/lerna/"/>
    
    <category term="yarn" scheme="https://youngjuning.js.org/tags/yarn/"/>
    
  </entry>
  
  <entry>
    <title>基于 Probot 实现 GitHub NPM 发布机器人🤖</title>
    <link href="https://youngjuning.js.org/aa64469afff6/"/>
    <id>https://youngjuning.js.org/aa64469afff6/</id>
    <published>2023-03-08T09:21:07.000Z</published>
    <updated>2023-03-23T07:00:19.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于-Github-Apps"><a href="#关于-Github-Apps" class="headerlink" title="关于 Github Apps"></a>关于 Github Apps</h2><p>GitHub Apps 是 GitHub 中优秀的产品。一个 GitHub App 通过 API 直接使用自己的身份进行操作，这意味着你不需要作为一个单独的用户维护一个机器人或服务账户。</p><p>GitHub Apps 可以被直接安装到组织或者用户账号上，并且可以赋予它们访问指定仓库的权限。它们带有内置的 webhook 和狭窄的特定权限。设置 GitHub 应用程序时，可以选择希望它访问的仓库。比如你可以设置一个叫 <code>MyGitHub</code> 的应用程序，该应用程序有且仅有 <code>octocat</code> 仓库的写入 <code>issues</code> 的权限。安装 GitHub App 需要你是组织的所有者或对仓库拥有 admin 权限。</p><h2 id="关于-Probot"><a href="#关于-Probot" class="headerlink" title="关于 Probot"></a>关于 Probot</h2><p>Probot 是一个基于 Node.js 构建 GitHub Apps 的框架。它旨在消除所有繁琐的事情，如接收和验证 webhooks 以及做认证动作，这样你就可以专注于你想要实现的功能。Probot 应用程序非常容易编写、部署和分享。大多数流行的 Probot 应用被托管，所以你不需要做任何部署和管理工作。这里有几个基于 Probot 构建的应用：</p><ul><li><a href="https://probot.github.io/apps/eslint-disable/">ESLint Disable Watcher</a> - 当 pr 中尝试禁用 eslint 规则时进行评论。</li><li><a href="https://probot.github.io/apps/dco/">Developer Certificate of Origin</a> - 强制 Pull Requests 符合 DCO 规范</li><li><a href="https://probot.github.io/apps/issue-check/">Issue Check</a> - 根据关键字和任务列表检查 issues 以确保包含必要的信息</li><li><a href="https://probot.github.io/apps/pull/">Pull</a> - Keep your forks up-to-date.</li></ul><p>你可以在<a href="https://probot.github.io/apps/">特色应用</a>或<a href="https://github.com/search?q=topic:probot-app&type=Repositories">GitHub probot-app 话题</a>浏览更多应用。</p><h2 id="Hello-Probot"><a href="#Hello-Probot" class="headerlink" title="Hello Probot"></a>Hello Probot</h2><p>一个 Probot 应用本质上是导出一个函数的 <a href="https://nodejs.org/api/modules.html">Node.js 模块</a>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// your code here</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>app</code> 参数是 <a href="https://probot.github.io/api/latest/classes/probot.html">Probot</a> 类的实例，该实例可以让你访问所有的 GitHub 精华。</p><p><code>aap.on</code> 负责监听所有 <a href="https://probot.github.io/docs/webhooks/">GitHub 触发的 webhook 事件</a>，当 GitHub 上发生任何有趣的事情，你的应用程序想知道的时候，它会通知你。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&#x27;issues.opened&#x27;</span>, <span class="keyword">async</span> context =&gt; &#123;</span><br><span class="line">    <span class="comment">// 一个新的 issue 被打开，我们应该做些什么呢？</span></span><br><span class="line">    context.<span class="property">log</span>.<span class="title function_">info</span>(context.<span class="property">payload</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>传递给事件处理程序的上下文包括关于被触发的事件的一切，以及一些有用的属性，以便对事件做出有用的回应。<code>context.octokit</code> 是一个经过认证的 GitHub 客户端，可以用来<a href="https://probot.github.io/docs/github-api/">进行 REST API 和 GraphQL 调用</a>，并允许你以编程方式做几乎任何你可以在 GitHub 上通过浏览器做的事情。</p><p>下面是一个当新打开 issues 时自动评论的 App。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&#x27;issues.opened&#x27;</span>, <span class="keyword">async</span> context =&gt; &#123;</span><br><span class="line">    <span class="comment">// context` 从事件中提取信息，可以传递给 GitHub API 调用。这将返回：</span></span><br><span class="line">    <span class="comment">// &#123; owner: &#x27;yourname&#x27;, repo: &#x27;yourrepo&#x27;, number: 123, body: &#x27;Hello World !&#125;</span></span><br><span class="line">    <span class="keyword">const</span> params = context.<span class="title function_">issue</span>(&#123; <span class="attr">body</span>: <span class="string">&#x27;Hello World!&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 issue 上发一条评论</span></span><br><span class="line">    <span class="keyword">return</span> context.<span class="property">octokit</span>.<span class="property">issues</span>.<span class="title function_">createComment</span>(params);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="开发一个-Probot-app"><a href="#开发一个-Probot-app" class="headerlink" title="开发一个 Probot app"></a>开发一个 Probot app</h2><p>为了开发一个 Probot app，你首先需要安装 Node.js 10.0.0 或更新的版本。</p><h3 id="生成一个新的-app"><a href="#生成一个新的-app" class="headerlink" title="生成一个新的 app"></a>生成一个新的 app</h3><p><a href="https://github.com/probot/create-probot-app">create-probot-app</a> 是开始构建一个新的 app 的最佳方式。它将生成一个新的应用程序，其中包含你所需要的一切，以开始并在生产中运行你的应用程序。</p><p>运行下面的命令生成一个项目：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-probot-app my-first-app</span><br></pre></td></tr></table></figure><p>该命令会问一系列关于你的 app 的问题，看起来就像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Let<span class="string">&#x27;s create a Probot app!</span></span><br><span class="line"><span class="string">? App name: my-first-app</span></span><br><span class="line"><span class="string">? Description of app: A &#x27;</span>Hello World<span class="string">&#x27; GitHub App built with Probot.</span></span><br><span class="line"><span class="string">? Author&#x27;</span>s full name: Katie Horne</span><br><span class="line">? Author<span class="string">&#x27;s email address: katie@auth0.com</span></span><br><span class="line"><span class="string">? GitHub user or org name: khorne3</span></span><br><span class="line"><span class="string">? Repository name: my-first-app</span></span><br><span class="line"><span class="string">? Which template would you like to use? (Use arrow keys)</span></span><br><span class="line"><span class="string">❯ basic-js</span></span><br><span class="line"><span class="string">  basic-ts (use this one for TypeScript support)</span></span><br><span class="line"><span class="string">  checks-js</span></span><br><span class="line"><span class="string">  git-data-js</span></span><br><span class="line"><span class="string">  deploy-js</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished scaffolding files!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Installing dependencies. This may take a few minutes...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Successfully created my-first-app.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Begin using your app with:</span></span><br><span class="line"><span class="string">  cd my-first-app</span></span><br><span class="line"><span class="string">  npm start</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">View your app&#x27;</span>s README <span class="keyword">for</span> more usage instructions.</span><br><span class="line"></span><br><span class="line">Visit the Probot docs:</span><br><span class="line">  https://probot.github.io/docs/</span><br><span class="line"></span><br><span class="line">Get <span class="built_in">help</span> from the community:</span><br><span class="line">  https://probot.github.io/community/</span><br><span class="line"></span><br><span class="line">Enjoy building your Probot app!</span><br></pre></td></tr></table></figure><p>创建的最重要的文件是 <code>index.js</code>（你的 app 代码所在的位置）和 <code>package.json</code>（使你的 app 成为标准 <a href="https://docs.npmjs.com/files/package.json">npm module</a>）。</p><h3 id="本地运行-app"><a href="#本地运行-app" class="headerlink" title="本地运行 app"></a>本地运行 app</h3><p>现在你已经准备好在本地运行 app 了。运行 <code>npm start</code> 来开启一个 server 吧：</p><blockquote><p>注意：如果你选择了 TypeScript 模板，请确保执行了 <code>npm run build</code>！</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ yarn start</span><br><span class="line">yarn run v1.22.10</span><br><span class="line">$ probot run ./lib/index.js</span><br><span class="line">INFO (server): Running Probot v11.3.0 (Node.js: v14.15.5)</span><br><span class="line">INFO (server): Forwarding https://smee.io/dz7D1zur24cGNj7 to http://localhost:3000/</span><br><span class="line">INFO (server): Listening on http://localhost:3000</span><br><span class="line">INFO (server): Connected</span><br></pre></td></tr></table></figure><h3 id="配置-GitHub-App"><a href="#配置-GitHub-App" class="headerlink" title="配置 GitHub App"></a>配置 GitHub App</h3><p>下列是自动配置 GitHub App 的步骤：</p><ol><li>在本地命令行中执行 <code>npm start</code>。</li><li>访问 <a href="http://localhost:3000/">http://localhost:3000</a> 查看下一步。</li><li>你会看到类似下面的页面。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e1601ae833f47a1815d79cb1dea2e6f~tplv-k3u1fbpfcp-zoom-1.image"></p><ol start="4"><li>点击 <strong>Register a GitHub App</strong> 按钮继续。</li><li>接着，你需要给你的 App 取一个没有被占用的名字，注意：如果你看到类似 <code>Name is reserved for the account @tuya</code> 的提示，这意味着你不能使用已存在的 GitHub organization 的名字作为 app 的名字（除非你是该组织的 owner）</li></ol><h2 id="GitHub-Release-时-npm-publish"><a href="#GitHub-Release-时-npm-publish" class="headerlink" title="GitHub Release 时 npm publish"></a>GitHub Release 时 <code>npm publish</code></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5e7c791feb140cbb537a79c89450842~tplv-k3u1fbpfcp-zoom-1.image"></p><p>实现 GitHub CI 自动发布 NPM 包，主要是为了合理管理对外 npm 发布权限。而比较通用的发布时机是在 GitHub release 时。基于上面流程图的分析，我们可以看出 released 状态时执行 <code>npm publish</code> 最合适。</p><p>我们实现的具体逻辑是，当 Probot app 监听到 <code>release.released</code> 事件时，处理发布前的操作。重要的是我们需要根据 <code>package.json</code> 中的 <code>version</code> 字段匹配出 tag，比如：</p><ul><li>1.0.0：tag 为 latest 的 1.0.0</li><li>1.0.0-beta.0：tag 为 beta 的 1.0.0-beta.0</li><li>1.0.0-alpha.0：tag 为 alpha 的 1.0.0-alpha</li></ul><h2 id="NPM-自动发布实现原理"><a href="#NPM-自动发布实现原理" class="headerlink" title="NPM 自动发布实现原理"></a>NPM 自动发布实现原理</h2><p>发布之前我们需要拉取仓库代码、取出版本和 tag、设置 NPM publish Token 等工作。先上核心代码，后面我们详细解析。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;release.released&#x27;</span>, <span class="keyword">async</span> context =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isTuya</span>(context)) <span class="keyword">return</span>;</span><br><span class="line">  app.<span class="title function_">log</span>(<span class="string">&#x27;npm publishing&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">repository</span>: repo &#125; = context.<span class="property">payload</span>;</span><br><span class="line">  <span class="keyword">const</span> downloadDefaultBranch = <span class="string">`<span class="subst">$&#123;repo.full_name&#125;</span>#<span class="subst">$&#123;context.payload.release.tag_name&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> downLoadTempDir = <span class="string">`<span class="subst">$&#123;os.tmpdir()&#125;</span>/<span class="subst">$&#123;repo.full_name&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">download</span>(downloadDefaultBranch, downLoadTempDir);</span><br><span class="line">  <span class="keyword">const</span> &#123; version, scripts &#125; = <span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;downLoadTempDir&#125;</span>/package.json`</span>);</span><br><span class="line">  <span class="keyword">const</span> tag = <span class="regexp">/^\d\.\d\.\d-(.*)\.\d$/</span>.<span class="title function_">exec</span>(version)</span><br><span class="line">    ? <span class="regexp">/^\d\.\d\.\d-(.*)\.\d$/</span>.<span class="title function_">exec</span>(version)[<span class="number">1</span>]</span><br><span class="line">    : <span class="string">&#x27;latest&#x27;</span>;</span><br><span class="line">  <span class="comment">// 如果有 build 脚本则先执行 build 脚本</span></span><br><span class="line">  <span class="keyword">if</span> (scripts.<span class="property">build</span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">execSh</span>(<span class="string">`cd <span class="subst">$&#123;downLoadTempDir&#125;</span> &amp;&amp; npm install &amp;&amp; npm run build`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">npmPublish</span>(&#123;</span><br><span class="line">      <span class="attr">package</span>: <span class="string">`<span class="subst">$&#123;downLoadTempDir&#125;</span>/package.json`</span>,</span><br><span class="line">      <span class="attr">token</span>: process.<span class="property">env</span>.<span class="property">NPM_AUTH_TOKEN</span>,</span><br><span class="line">      <span class="attr">registry</span>: <span class="string">&#x27;https://registry.npmjs.org/&#x27;</span>,</span><br><span class="line">      tag,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="property">type</span> === <span class="string">&#x27;none&#x27;</span>) &#123;</span><br><span class="line">      app.<span class="property">log</span>.<span class="title function_">error</span>(</span><br><span class="line">        <span class="string">`You can&#x27;t publish duplicate version <span class="subst">$&#123;result.package&#125;</span>@<span class="subst">$&#123;result.version&#125;</span>`</span>,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    app.<span class="property">log</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="NPM-Publish-Token"><a href="#NPM-Publish-Token" class="headerlink" title="NPM Publish Token"></a>NPM Publish Token</h3><h4 id="申请-NPM-Publish-Token"><a href="#申请-NPM-Publish-Token" class="headerlink" title="申请 NPM Publish Token"></a>申请 NPM Publish Token</h4><p><strong>1. 访问 npmjs.com 进入 Access Tokens 页面</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e077e9f9d0a4dc8bde0a24e121461c3~tplv-k3u1fbpfcp-zoom-1.image"></p><p><strong>2. 点击 Generate New Token 按钮</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82e09021f85c413d80ac77ed3df6746e~tplv-k3u1fbpfcp-zoom-1.image"></p><p><strong>3. Token 类型选择 Publish</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/256574d0e063410aa50c85d469346809~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="保证-NPM-Publish-Token-安全性"><a href="#保证-NPM-Publish-Token-安全性" class="headerlink" title="保证 NPM Publish Token 安全性"></a>保证 NPM Publish Token 安全性</h4><p>NPM Token 是不能被别人看到的，为了达到这个目的，首先项目需要设置为私有的，然后将 Token 放到 <code>.env</code> 中，通过 <code>process.env.NPM_AUTH_TOKEN</code> 获取。另外谨记不要在日志中打印环境变量。</p><h4 id="保证-GitHub-App-安全性"><a href="#保证-GitHub-App-安全性" class="headerlink" title="保证 GitHub App 安全性"></a>保证 GitHub App 安全性</h4><p>如果把 GitHub App 发布为 public 的，那么任何仓库都可以安装该应用，这不是我们想要的结果。解决办法有两个，一是将应用注册为 private 类型的，二是在监听回调中判断是否是允许的组织或者用户。我选择的是第二种方案，校验函数如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isTuya</span> = context =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; full_name &#125; = context.<span class="property">payload</span>.<span class="property">repository</span>;</span><br><span class="line">  <span class="keyword">return</span> full_name.<span class="title function_">startsWith</span>(<span class="string">&#x27;youngjuning&#x27;</span>) || full_name.<span class="title function_">startsWith</span>(<span class="string">&#x27;tuya&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><p>我们选择了 download-git-repo 下载 git 仓库，但是该仓库不支持 Promise，我们做一下简单的改造：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> download = <span class="built_in">require</span>(<span class="string">&#x27;download-git-repo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">repo, tempDir</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">download</span>(repo, tempDir, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="literal">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="npmPublish"><a href="#npmPublish" class="headerlink" title="npmPublish"></a>npmPublish</h3><p>我们选择了 @jsdevtools&#x2F;npm-publish 执行发布动作，该仓库除了编程调用外，还可以作为 GitHub Action 和命令行工具使用。需要注意的是，我们需要用正则取出我们要发布的 tag：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tag = <span class="regexp">/^\d\.\d\.\d-(.*)\.\d$/</span>.<span class="title function_">exec</span>(version)</span><br><span class="line">  ? <span class="regexp">/^\d\.\d\.\d-(.*)\.\d$/</span>.<span class="title function_">exec</span>(version)[<span class="number">1</span>]</span><br><span class="line">  : <span class="string">&#x27;latest&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="lerna-publish"><a href="#lerna-publish" class="headerlink" title="lerna publish"></a>lerna publish</h3><p>lerna 管理版本由于是一次可能发布多个仓库，所以无法使用上面提到的发布流程。针对 lerna，我设计的发布流程是监听到 push 动作后取最新的一条 commit，匹配是否包含 <code>chore(release): publish</code>。具体原理如下：</p><ol><li>判断 push 分支是否是主分支且提交信息包含 <code>chore(release): publish</code></li><li>因为是 lerna publish，所以需要使用 simple-git 这个库 clone 项目。</li><li>由于 lerna publish <a href="https://github.com/lerna/lerna/issues/2404">不支持 token</a>，我们采用将 <code>//registry.npmjs.org/:_authToken=$&#123;process.env.NPM_AUTH_TOKEN&#125;</code> 写入 <code>.npmrc</code> 的方式完成带 token 的发布。</li><li>最后，我们需要使用 <code>from-git</code> 的方式执行 <code>lerna publish</code>，<code>from-git</code> 的场景便是本地执行 <code>lerna version</code>，在 CI 中执行 <code>lerna publish</code>。</li></ol><p>完整代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;push&#x27;</span>, <span class="keyword">async</span> context =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isTuya</span>(context)) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    context.<span class="property">payload</span>.<span class="property">ref</span>.<span class="title function_">indexOf</span>(context.<span class="property">payload</span>.<span class="property">repository</span>.<span class="property">default_branch</span>) !==</span><br><span class="line">      -<span class="number">1</span> &amp;&amp;</span><br><span class="line">    context.<span class="property">payload</span>.<span class="property">head_commit</span>.<span class="property">message</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;chore(release): publish&#x27;</span>) === <span class="number">0</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    app.<span class="title function_">log</span>(<span class="string">&#x27;push event&#x27;</span>);</span><br><span class="line">    <span class="title function_">execSh</span>(<span class="string">`git --version`</span>);</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">repository</span>: repo &#125; = context.<span class="property">payload</span>;</span><br><span class="line">    <span class="keyword">const</span> cloneTempDir = <span class="string">`<span class="subst">$&#123;os.tmpdir()&#125;</span>/<span class="subst">$&#123;repo.full_name&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> git.<span class="title function_">clone</span>(repo.<span class="property">clone_url</span>, cloneTempDir);</span><br><span class="line">      <span class="keyword">const</span> &#123; devDependencies &#125; = <span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;cloneTempDir&#125;</span>/package.json`</span>);</span><br><span class="line">      <span class="keyword">if</span> (devDependencies[<span class="string">&#x27;lerna&#x27;</span>]) &#123;</span><br><span class="line">        app.<span class="title function_">log</span>(<span class="string">&#x27;lerna publishing&#x27;</span>);</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">execSh</span>(</span><br><span class="line">          <span class="string">`cd <span class="subst">$&#123;cloneTempDir&#125;</span> &amp;&amp; echo //registry.npmjs.org/:_authToken=<span class="subst">$&#123;process.env.NPM_AUTH_TOKEN&#125;</span> &gt; .npmrc`</span>,</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">execSh</span>(</span><br><span class="line">          <span class="string">`cd <span class="subst">$&#123;cloneTempDir&#125;</span> &amp;&amp; npm install &amp;&amp; npm run build &amp;&amp; ./node_modules/.bin/lerna publish from-git --yes --no-verify-access`</span>,</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">execSh</span>(<span class="string">`rm -rf <span class="subst">$&#123;cloneTempDir&#125;</span>`</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">execSh</span>(<span class="string">`rm -rf <span class="subst">$&#123;cloneTempDir&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Glitch-部署"><a href="#Glitch-部署" class="headerlink" title="Glitch 部署"></a>Glitch 部署</h2><p>如果你有自己的服务器，可以直接将机器人程序部署到自己的服务器。我这里使用官方推荐的 Glitch 服务部署。Glitch 可以免费托管 node 应用并且直接在浏览器中编辑他们。对于简单的应用完全够了。</p><ol><li>注册并在 <a href="https://glitch.com/">Glitch</a> 新建项目，选择 <strong>Import from GitHub</strong>，弹窗写上应用 github 地址，或者使用 <a href="https://github.com/behaviorbot/new-issue-welcome">https://github.com/behaviorbot/new-issue-welcome</a> 作为模板导入后再将自己的代码复制过来。</li><li>打开 <code>.env</code> 文件使用以下内容替代：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">APP_ID=&lt;your app id&gt;</span><br><span class="line">WEBHOOK_SECRET=&lt;your app secret&gt;</span><br><span class="line">PRIVATE_KEY_PATH=&lt;your private_key&gt;</span><br><span class="line">NODE_ENV=production</span><br><span class="line">NPM_AUTH_TOKEN=3c2c104e-9f1f-4fc5-903e-726610b75ce1</span><br><span class="line">INPUT_TOKEN=</span><br></pre></td></tr></table></figure><ol start="4"><li>将 glitch 链接设置为 GitHub App 的 webhook 地址即可，之后更新代码，glitch 会自动更新部署。</li></ol><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>Probot App 的初始权限在 <code>app.yml</code> 文件中，如果 App 已经创建了，又想要更新权限，可以在 <a href="https://github.com/settings/apps">https://github.com/settings/apps</a> 中更新。我所用的权限配置请点击 <a href="https://glitch.com/edit/#!/tuya-robot?path=app.yml%3A119%3A0">app.yml</a> 查看。</p><blockquote><p>本文首发于「<a href="https://youngjuning.js.org/">洛竹的官方网站</a>」，同步于公众号「<a href="https://cdn.jsdelivr.net/gh/youngjuning/images/20210418112129.jpeg">洛竹早茶馆</a>」和「<a href="https://juejin.cn/user/325111174662855">掘金专栏</a>」。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于-Github-Apps&quot;&gt;&lt;a href=&quot;#关于-Github-Apps&quot; class=&quot;headerlink&quot; title=&quot;关于 Github Apps&quot;&gt;&lt;/a&gt;关于 Github Apps&lt;/h2&gt;&lt;p&gt;GitHub Apps 是 GitHub 中</summary>
      
    
    
    
    <category term="运维" scheme="https://youngjuning.js.org/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="NPM" scheme="https://youngjuning.js.org/tags/NPM/"/>
    
    <category term="GitHub" scheme="https://youngjuning.js.org/tags/GitHub/"/>
    
    <category term="Probot" scheme="https://youngjuning.js.org/tags/Probot/"/>
    
    <category term="机器人" scheme="https://youngjuning.js.org/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Array 完全指南</title>
    <link href="https://youngjuning.js.org/bb5ef5a07d1c/"/>
    <id>https://youngjuning.js.org/bb5ef5a07d1c/</id>
    <published>2023-03-08T09:17:16.000Z</published>
    <updated>2023-03-23T07:00:19.414Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScript 数组的每一项可以保存任何类型的数据；而且大小是可以动态调整的，即可以随着数据的添加自动增长以容纳新增数据。</p><h1 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="title class_">Array</span>() <span class="comment">// []</span></span><br><span class="line">colors = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>) <span class="comment">// [empty × 10]</span></span><br><span class="line">colors = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>) <span class="comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="数组字面量表示法"><a href="#数组字面量表示法" class="headerlink" title="数组字面量表示法"></a>数组字面量表示法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [] <span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>] <span class="comment">// 创建一个包含 3 个字符串的数组</span></span><br><span class="line"><span class="keyword">var</span> values = [<span class="number">1</span>, <span class="number">2</span>] <span class="comment">// 不要这样！这样会创建一个包含2或3项的数组</span></span><br><span class="line"><span class="keyword">var</span> options = [, , , , ,] <span class="comment">// 不要这样！这样会创建一个包含5或6项的数组</span></span><br></pre></td></tr></table></figure><h1 id="读取和设置数组的值"><a href="#读取和设置数组的值" class="headerlink" title="读取和设置数组的值"></a>读取和设置数组的值</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>] <span class="comment">// 创建一个包含3个字符串的数组</span></span><br><span class="line"><span class="title function_">alert</span>(colors[<span class="number">0</span>]) <span class="comment">// 显示第1项</span></span><br><span class="line">colors[<span class="number">2</span>] = <span class="string">&#x27;black&#x27;</span> <span class="comment">// 修改第3项</span></span><br><span class="line">colors[<span class="number">3</span>] = <span class="string">&#x27;brown&#x27;</span> <span class="comment">// 新增第4项</span></span><br></pre></td></tr></table></figure><h1 id="length-属性"><a href="#length-属性" class="headerlink" title="length 属性"></a>length 属性</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>] <span class="comment">// 创建一个包含3个字符串的数组</span></span><br><span class="line"><span class="title function_">alert</span>(colors.<span class="property">length</span>) <span class="comment">// 显示数组长度</span></span><br><span class="line">colors[colors.<span class="property">length</span>] = <span class="string">&#x27;black&#x27;</span> <span class="comment">// 在位置3添加一种颜色</span></span><br><span class="line">colors[colors.<span class="property">length</span>] = <span class="string">&#x27;brown&#x27;</span> <span class="comment">// 在位置4再添加一种颜色</span></span><br></pre></td></tr></table></figure><h1 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = []</span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(array)) &#123;</span><br><span class="line">  <span class="comment">// 对数组执行某些操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Array-isArray-Polyfill"><a href="#Array-isArray-Polyfill" class="headerlink" title="Array.isArray Polyfill"></a>Array.isArray Polyfill</h2><p>如果是实际项目可以配置 <code>@babel/polyfill</code> 或者 <code>transform-runtime</code>，这不在本文的讨论范围</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="property">isArray</span>) &#123;</span><br><span class="line">  <span class="title class_">Array</span>.<span class="property">isArray</span> = <span class="keyword">function</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arg) === <span class="string">&#x27;[object Array]&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ES1-方法"><a href="#ES1-方法" class="headerlink" title="ES1 方法"></a>ES1 方法</h1><ul><li><code>Array.prototype.join</code>: <code>join()</code> 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。<strong>原始数组不会被改变</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// join</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="title function_">join</span>()) <span class="comment">// &quot;red,blue,green&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="title function_">join</span>(<span class="string">&#x27;|&#x27;</span>)) <span class="comment">// &quot;red|blue|green&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="title function_">join</span>(<span class="string">&#x27;|&#x27;</span>)) <span class="comment">// &quot;red|blue|green&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;red|blue|green&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;|&#x27;</span>)) <span class="comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]</span></span><br></pre></td></tr></table></figure><ul><li><code>Array.prototype.reverse()</code>: <code>reverse()</code> 方法将数组中元素的位置颠倒，并返回该数组。<strong>该方法会改变原数组</strong>。</li><li><code>Array.prototype.sort()</code>: <code>sort()</code> 方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的; sort 方法接收一个比较函数作为参数，如果第一参数应该位于第二个参数之前则返回负数，如果第一个参数应该位于第二个之后则返回一个正数。<strong>该方法会改变原数组</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reverse</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="title function_">reverse</span>()) <span class="comment">// [5, 4, 3, 2, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// sort</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sort</span>(<span class="params">arr, asc = <span class="literal">true</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (asc) &#123;</span><br><span class="line">      <span class="keyword">return</span> a - b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b - a</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sort</span>(colors)) <span class="comment">// [1, 3, 5, 10, 20]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sort</span>(colors, <span class="literal">false</span>)) <span class="comment">// [20, 10, 5, 3, 1]</span></span><br></pre></td></tr></table></figure><h1 id="ES3-方法"><a href="#ES3-方法" class="headerlink" title="ES3 方法"></a>ES3 方法</h1><ul><li><code>Array.prototype.push</code>: <code>push()</code> 方法可以接受任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。<strong>该方法会改变原数组</strong>。</li><li><code>Array.prototype.pop</code>: <code>pop()</code> 方法从数组末尾移除最后一项，减少数组的 <code>length</code> 值，并返回该项。<strong>该方法会改变原数组</strong>。</li><li><code>Array.prototype.shift</code>: <code>shift()</code> 方法能够移除数组中的第一项并返回该项, 同时将数组长度减 1。<strong>该方法会改变原数组</strong>。</li><li><code>Array.prototype.unshift</code>: <code>unshift()</code> 方法能够在数组前端添加任意个项，并返回新数组的长度。<strong>该方法会改变原数组</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// push、pop</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> count = colors.<span class="title function_">push</span>(<span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;brown&#x27;</span>) <span class="comment">// 向末尾推入两项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count) <span class="comment">// 5</span></span><br><span class="line"><span class="keyword">var</span> item = colors.<span class="title function_">pop</span>() <span class="comment">// 取得最后一项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// &quot;brown&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// shift、unshift</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> count = colors.<span class="title function_">unshift</span>(<span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;brown&#x27;</span>) <span class="comment">// 向开头推入两项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count) <span class="comment">// 5</span></span><br><span class="line"><span class="keyword">var</span> item = colors.<span class="title function_">shift</span>() <span class="comment">// 取得第一项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// &quot;red&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>Array.prototype.concat()</code>: <code>concat()</code> 方法用于合并两个或多个数组。<strong>原始数组不会被改变</strong>，而是返回一个新数组。</li><li><code>Array.prototype.slice()</code>: <code>slice()</code> 方法返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的浅拷贝（包括 <code>begin</code>，不包括 <code>end</code>）。<strong>原始数组不会被改变</strong>。</li><li><code>Array.prototype.splice()</code>: <code>splice()</code> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。<strong>此方法会改变原数组</strong>。<ul><li><strong>删除</strong>: 可以删除任意数量的项，只需指定 2 个参数: 要删除的第一项的位置和要删除的项数。例如，<code>splice(0, 2)</code> 会删除数组中的前两项。</li><li><strong>插入</strong>: 可以向指定位置插入任意数量的项，只需要提供 3 个参数：起始位置、0（要删除的项数）和要插入的项。如果要插入多个项，可以再传入任意多个项。例如，<code>splice(2, 0, &quot;red&quot;, &quot;green&quot;)</code> 会从当前数组的位置 2 开始插入字符串 <code>&quot;red&quot;</code> 和 <code>green</code>。</li><li><strong>替换</strong>: 可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需要指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项不必与删除的项数相等。例如，<code>splice(2, 1, &quot;red&quot;, &quot;green&quot;)</code> 会删除当前数组位置 2 的项，然后再从位置 2 开始插入字符串 <code>&quot;red&quot;</code> 和 <code>green</code>。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// concat</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> colors1 = [<span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;brown&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="title function_">concat</span>(colors1)) <span class="comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;, &quot;brown&quot;]</span></span><br><span class="line"><span class="comment">// slice</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果 `slice()` 方法的参数中有一个负数，则用数组长度加上该数来确定相应地位置。例如，在一个包含5项的数组上调用 `slice(-2, -1)` 与调用 `slice(3, 4)` 得到的结果相同。如果结束位置小于起始位置，则返回空数组。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;brown&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> colors2 = colors.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> colors3 = colors.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors2) <span class="comment">// [&quot;blue&quot;, &quot;green&quot;, &quot;black&quot;, &quot;brown&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors3) <span class="comment">// [&quot;blue&quot;, &quot;green&quot;, &quot;black&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * splice() 方法始终都会返回一个数组，该数组中包含从原始数组中删除的项（如果没有删除任何项，则返回一个空数组）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> removed = colors.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>) <span class="comment">// 删除第一项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors) <span class="comment">// [&quot;green&quot;, &quot;blue&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed) <span class="comment">// [&quot;red&quot;] 返回的数组中只包含一项</span></span><br><span class="line"></span><br><span class="line">removed = colors.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>) <span class="comment">// 从位置 1 开始插入两项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors) <span class="comment">// [&quot;green&quot;, &quot;red&quot;, &quot;orange&quot;, &quot;blue&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed) <span class="comment">// 返回的是一个空数组</span></span><br><span class="line"></span><br><span class="line">removed = colors.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;purple&#x27;</span>) <span class="comment">// 删除一项，增加两项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors) <span class="comment">// [&quot;green&quot;, &quot;red&quot;, &quot;purple&quot;, &quot;orange&quot;, &quot;blue&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed) <span class="comment">// yellow，返回的数组中只包含一项</span></span><br></pre></td></tr></table></figure><h1 id="ES5-方法"><a href="#ES5-方法" class="headerlink" title="ES5 方法"></a>ES5 方法</h1><ul><li><code>Array.prototype.indexOf()</code>: <code>indexOf()</code> 方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。从数组的前面向后查找，从 <code>fromIndex</code> 处开始。</li><li><code>Array。prototype.lastIndexOf)()</code>: <code>lastIndexOf()</code> 方法返回指定元素在数组中的最后一个索引，如果不存在则返回-1。从数组的后面向前查找，从 <code>fromIndex</code> 处开始。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers.<span class="title function_">indexOf</span>(<span class="number">4</span>)) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers.<span class="title function_">lastIndexOf</span>(<span class="number">4</span>)) <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers.<span class="title function_">indexOf</span>(<span class="number">4</span>, <span class="number">4</span>)) <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers.<span class="title function_">lastIndexOf</span>(<span class="number">4</span>, <span class="number">4</span>)) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;Nicholas&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">var</span> people = [&#123; <span class="attr">name</span>: <span class="string">&#x27;Nicholas&#x27;</span> &#125;]</span><br><span class="line"><span class="keyword">var</span> morePeople</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * indexOf、lastIndexOf 在比较第一个参数与数组中的每一项时，会使用全等操作符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(people.<span class="title function_">indexOf</span>(person)) <span class="comment">// -1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(morePeople.<span class="title function_">indexOf</span>(person)) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><ul><li><code>Array.prototype.every()</code>: 对数组中的每一项运行给定函数，如果该函数对每一项都返回 <code>true</code>，则返回 <code>true</code>。</li><li><code>Array.prototype.some()</code>: 对数组中的每一项运行给定函数，如果该函数对任一项返回 <code>true</code>，则返回 <code>true</code>。</li><li><code>Array.prototype.filter()</code>: 对数组中的每一项运行给定函数，返回该函数会返回 <code>true</code> 的项组成的数组。</li><li><code>Array.prototype.map()</code>: 对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li><li><code>Array.prototype.forEach()</code>: 对数组中的每一项运行给定函数，这个方法没有返回值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// every</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> everyResult = numbers.<span class="title function_">every</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(everyResult) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// some</span></span><br><span class="line"><span class="keyword">var</span> someResult = numbers.<span class="title function_">some</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(someResult) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// filter</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> filterResult = numbers.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filterResult) <span class="comment">// [3, 4, 5, 4, 3]</span></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> mapResult = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapResult) <span class="comment">// [2, 4, 6, 8, 10, 8, 6, 4, 2]</span></span><br><span class="line"><span class="comment">// forEach</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">numbers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 执行某些操作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>Array.prototype.reduce()</code></li><li><code>Array.prototype.reduceRight()</code></li></ul><p><code>reduce()</code> 和 <code>reduceRight()</code> 方法都会迭代数组的所有项，然后构建一个最终返回的值。其中，<code>reduce()</code> 方法从数组的第一项开始，逐个遍历到最后。而 <code>reduceRight()</code> 则从数组的最后一项开始，向前遍历到第一项。</p><p>这两个参数都接受两个参数: 一个在每一项上调用的函数和（可选的）作为归并基础的初始值。传给 <code>reduce</code> 和 <code>reduceRight</code> 的函数接受 4 个参数：前一个值、当前值、项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组求和</span></span><br><span class="line"><span class="keyword">var</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> sum = values.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> prev + cur</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br><span class="line"><span class="comment">// 数组求乘积</span></span><br><span class="line"><span class="keyword">var</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> pro = values.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> prev * cur</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pro) <span class="comment">// 120</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【累加对象数组里的值】</span></span><br><span class="line"><span class="comment"> * 要累加对象数组中包含的值，必须提供初始值，以便各个item正确通过你的函数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> values = [&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">3</span> &#125;]</span><br><span class="line"><span class="keyword">var</span> sum = values.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> prev + cur.<span class="property">x</span></span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum) <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 求最大值</span></span><br><span class="line"><span class="keyword">var</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> max = values.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> prev &gt; cur ? prev : cur</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max) <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 计算数组中每个元素出现的次数</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tiff&#x27;</span>, <span class="string">&#x27;Bruce&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> countedNames = names.<span class="title function_">reduce</span>(<span class="function">(<span class="params">allNames, name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (allNames.<span class="title function_">indexOf</span>(name) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    allNames[name]++</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    allNames[name] = <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> allNames</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 按属性对object array分类</span></span><br><span class="line"><span class="keyword">var</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">26</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;李扬&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;杨六&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="attr">age</span>: <span class="number">26</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">groupBy</span> = (<span class="params">objectArray, property</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> objectArray.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> key = cur[property]</span><br><span class="line">    <span class="keyword">if</span> (!acc[key]) &#123;</span><br><span class="line">      acc[key] = [cur]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      acc[key].<span class="title function_">push</span>(cur)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> acc</span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> groupedPeople = <span class="title function_">groupBy</span>(people, <span class="string">&#x27;age&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>reduce 高级用法:</strong></p><blockquote><p>搬砖工小王拿到了这样的格式：<code>var arr = [ &#123;n ame: &#39;brick1&#39;&#125;, &#123;name: &#39;brick2&#39;&#125;, &#123;name: &#39;brick3&#39;&#125; ]</code><br>希望得到这样的数据格式：<code>brick1, brick2 &amp; brick3</code><br>当然数组异常流: <code>[&#123;name:&#39;brick1&#39;&#125;]</code> 和空数组传入得到 <code>&quot;brick1&quot;</code> 和空</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [&#123; <span class="attr">name</span>: <span class="string">&#x27;brick11&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;brick12&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;brick13&#x27;</span> &#125;]</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">carryBricks</span> = arr =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> cur.<span class="property">name</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === array.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> prev + <span class="string">&#x27; &amp; &#x27;</span> + cur.<span class="property">name</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> prev + <span class="string">&#x27;,&#x27;</span> + cur.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">carryBricks</span>(array)) <span class="comment">// &quot;brick11,brick12 &amp; brick13&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">carryBricks</span>([&#123; <span class="attr">name</span>: <span class="string">&#x27;brick1&#x27;</span> &#125;])) <span class="comment">// &quot;brick1&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">carryBricks</span>([])) <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="ES2015-x2F-ES6"><a href="#ES2015-x2F-ES6" class="headerlink" title="ES2015&#x2F;ES6"></a>ES2015&#x2F;ES6</h1><ul><li><p><code>Array.from</code>：用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）</p></li><li><p><code>Array.of</code>：用于将一组值，转换为数组</p></li><li><p><code>arr.fill(value[, start[, end]])</code>：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引</p></li><li><p><code>find()</code>：用于找出第一个符合条件的数组成员</p></li><li><p><code>findIndex()</code>：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回<code>-1</code></p></li><li><p><code>entries()</code>，<code>keys()</code> 和 values()：<code>keys()</code>是对键名的遍历、<code>values()</code>是对键值的遍历，<code>entries()</code>是对键值对的遍历</p></li></ul><h1 id="ES2016-x2F-ES7"><a href="#ES2016-x2F-ES7" class="headerlink" title="ES2016&#x2F;ES7"></a>ES2016&#x2F;ES7</h1><ul><li><code>copyWithin()</code>： 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。</li><li><code>includes()</code>：返回一个布尔值，表示某个数组是否包含给定的值</li></ul><h1 id="ES2019-x2F-ES10"><a href="#ES2019-x2F-ES10" class="headerlink" title="ES2019&#x2F;ES10"></a>ES2019&#x2F;ES10</h1><ul><li><code>flat()</code>：会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</li><li><code>flatMap()</code>： 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map">map</a> 连着深度值为1的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">flat</a> 几乎相同，但 <code>flatMap</code> 通常在合并成一种方法的效率稍微高一些</li></ul><h1 id="lodash"><a href="#lodash" class="headerlink" title="lodash"></a>lodash</h1><h2 id="数组并集"><a href="#数组并集" class="headerlink" title="数组并集"></a>数组并集</h2><ul><li><code>_.union([arrays])</code>: 创建一个按顺序排列的唯一值的数组。所有给定数组的元素值使用 SameValueZero 做等值比较。（ <code>arrays</code>（数组）的并集，按顺序返回，返回数组的元素是唯一的）</li><li><code>_.unionBy([arrays], [iteratee=_.identity])</code>: 这个方法类似 <code>_.union</code> ，除了它接受一个 <code>iteratee</code> （迭代函数），调用每一个数组（<code>array</code>）的每个元素以产生唯一性计算的标准。<code>iteratee</code> 会传入一个参数：(<code>value</code>)。</li><li><code>_.unionWith([arrays], [comparator])</code>: 这个方法类似 <code>_.union</code>， 除了它接受一个 <code>comparator</code> 调用比较 <code>arrays</code> 数组的每一个元素。 <code>comparator</code> 调用时会传入 2 个参数： (<code>arrVal</code>, <code>othVal</code>)。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="comment">// union</span></span><br><span class="line">_.<span class="title function_">union</span>([<span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>]) <span class="comment">// [2, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// unionBy</span></span><br><span class="line">_.<span class="title function_">unionBy</span>([<span class="number">2.1</span>], [<span class="number">1.2</span>, <span class="number">2.3</span>], <span class="title class_">Math</span>.<span class="property">floor</span>) <span class="comment">// [2.1, 1.2]</span></span><br><span class="line"><span class="comment">// The `_.property` iteratee shorthand.</span></span><br><span class="line">_.<span class="title function_">unionBy</span>([&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;], [&#123; <span class="attr">x</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;], <span class="string">&#x27;x&#x27;</span>) <span class="comment">// [&#123; &#x27;x&#x27;: 1 &#125;, &#123; &#x27;x&#x27;: 2 &#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// unionWith</span></span><br><span class="line"><span class="keyword">var</span> objects = [</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="number">1</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> others = [</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;,</span><br><span class="line">]</span><br><span class="line">_.<span class="title function_">unionWith</span>(objects, others, _.<span class="property">isEqual</span>) <span class="comment">// [&#123; &#x27;x&#x27;: 1, &#x27;y&#x27;: 2 &#125;, &#123; &#x27;x&#x27;: 2, &#x27;y&#x27;: 1 &#125;, &#123; &#x27;x&#x27;: 1, &#x27;y&#x27;: 1 &#125;]</span></span><br></pre></td></tr></table></figure><h2 id="数组交集"><a href="#数组交集" class="headerlink" title="数组交集"></a>数组交集</h2><ul><li><code>_.intersection([arrays])</code>: 创建唯一值的数组，这个数组包含所有给定数组都包含的元素，使用 SameValueZero 进行相等性比较。（可以理解为给定数组的交集）</li><li><code>_.intersectionBy([arrays], [iteratee=_.identity])</code>: 这个方法类似 <code>_.intersection</code>，区别是它接受一个 <code>iteratee</code> 调用每一个 arrays 的每个值以产生一个值，通过产生的值进行了比较。结果值是从第一数组中选择。iteratee 会传入一个参数：<code>(value)</code>。</li><li><code>_.intersectionWith([arrays], [comparator])</code>: 这个方法类似 <code>_.intersection</code>，区别是它接受一个 <code>comparator</code> 调用比较 arrays 中的元素。结果值是从第一数组中选择。<code>comparator</code> 会传入两个参数：<code>(arrVal, othVal)</code>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="comment">// intersection</span></span><br><span class="line">_.<span class="title function_">intersection</span>([<span class="number">2</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>])) <span class="comment">// [2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// intersectionBy</span></span><br><span class="line">_.<span class="title function_">intersectionBy</span>([<span class="number">2.1</span>, <span class="number">1.2</span>], [<span class="number">4.3</span>, <span class="number">2.4</span>], <span class="title class_">Math</span>.<span class="property">floor</span>) <span class="comment">// [2.1]</span></span><br><span class="line"><span class="comment">// The `_.property` iteratee shorthand.</span></span><br><span class="line">_.<span class="title function_">intersectionBy</span>([&#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">1</span> &#125;], [&#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">2</span> &#125;, &#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">1</span> &#125;], <span class="string">&#x27;x&#x27;</span>) <span class="comment">// =&gt; [&#123; &#x27;x&#x27;: 1 &#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// intersectionWith</span></span><br><span class="line"><span class="keyword">var</span> objects = [&#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span> &#125;, &#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">1</span> &#125;];</span><br><span class="line"><span class="keyword">var</span> others = [&#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">1</span> &#125;, &#123; <span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span> &#125;];</span><br><span class="line">_.<span class="title function_">intersectionWith</span>(objects, others, _.<span class="property">isEqual</span>) <span class="comment">// [&#123; &#x27;x&#x27;: 1, &#x27;y&#x27;: 2 &#125;]</span></span><br></pre></td></tr></table></figure><h2 id="数组差集"><a href="#数组差集" class="headerlink" title="数组差集"></a>数组差集</h2><ul><li><code>_.difference(array, [values])</code>: 创建一个具有唯一 array 值的数组，每个值不包含在其他给定的数组中。（即创建一个新数组，这个数组中的值，为第一个数字（array 参数）排除了给定数组中的值。）该方法使用 SameValueZero 做相等比较。结果值的顺序是由第一个数组中的顺序确定。</li><li><code>_.differenceBy(array, [values], [iteratee=_.identity])</code>: 这个方法类似 _.difference ，除了它接受一个 iteratee （迭代器）， 调用 array 和 values 中的每个元素以产生比较的标准。 结果值是从第一数组中选择。iteratee 会调用一个参数：(value)。（首先使用迭代器分别迭代 array 和 values 中的每个元素，返回的值作为比较值）。</li><li><code>_.differenceWith(array, [values], [comparator])</code>: 这个方法类似 <code>_.difference</code> ，除了它接受一个 <code>comparator</code> （比较器），它调用比较 <code>array</code>，<code>values</code> 中的元素。 结果值是从第一数组中选择。<code>comparator</code> 调用参数有两个：<code>(arrVal, othVal)</code>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// difference</span></span><br><span class="line">_.<span class="title function_">difference</span>([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">2</span>]) <span class="comment">// [3, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// differenceBy</span></span><br><span class="line">_.<span class="title function_">differenceBy</span>([<span class="number">3.1</span>, <span class="number">2.2</span>, <span class="number">1.3</span>], [<span class="number">4.4</span>, <span class="number">2.5</span>], <span class="title class_">Math</span>.<span class="property">floor</span>) <span class="comment">// [3.1, 1.3]</span></span><br><span class="line"><span class="comment">// The `_.property` iteratee shorthand.</span></span><br><span class="line">_.<span class="title function_">differenceBy</span>([&#123; <span class="attr">x</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;], [&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;], <span class="string">&#x27;x&#x27;</span>) <span class="comment">// [&#123; &#x27;x&#x27;: 2 &#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// differenceWith</span></span><br><span class="line"><span class="keyword">var</span> objects = [</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="number">1</span> &#125;,</span><br><span class="line">]</span><br><span class="line">_.<span class="title function_">differenceWith</span>(objects, [&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;], _.<span class="property">isEqual</span>) <span class="comment">// [&#123; &#x27;x&#x27;: 2, &#x27;y&#x27;: 1 &#125;]</span></span><br></pre></td></tr></table></figure><h2 id="数组分组"><a href="#数组分组" class="headerlink" title="数组分组"></a>数组分组</h2><ul><li><code>_.groupBy(collection, [iteratee=_.identity])</code>: 创建一个对象，<code>key</code> 是 <code>iteratee</code> 遍历 <code>collection</code>(集合) 中的每个元素返回的结果。 分组值的顺序是由他们出现在 <code>collection</code>(集合) 中的顺序确定的。每个键对应的值负责生成 <code>key</code> 的元素组成的数组。<code>iteratee</code> 调用 1 个参数： (<code>value</code>)。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line">_.<span class="title function_">groupBy</span>([<span class="number">6.1</span>, <span class="number">4.2</span>, <span class="number">6.3</span>], <span class="title class_">Math</span>.<span class="property">floor</span>) <span class="comment">// &#123; &#x27;4&#x27;: [4.2], &#x27;6&#x27;: [6.1, 6.3] &#125;</span></span><br><span class="line"><span class="comment">// The `_.property` iteratee shorthand.</span></span><br><span class="line">_.<span class="title function_">groupBy</span>([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>], <span class="string">&#x27;length&#x27;</span>) <span class="comment">// &#123; &#x27;3&#x27;: [&#x27;one&#x27;, &#x27;two&#x27;], &#x27;5&#x27;: [&#x27;three&#x27;] &#125;</span></span><br><span class="line"><span class="keyword">const</span> students = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;杨俊宁&#x27;</span>, <span class="attr">province</span>: <span class="string">&#x27;河南&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;宋光刚&#x27;</span>, <span class="attr">province</span>: <span class="string">&#x27;河南&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;谢晧曜&#x27;</span>, <span class="attr">province</span>: <span class="string">&#x27;江苏&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;李珂威&#x27;</span>, <span class="attr">province</span>: <span class="string">&#x27;河南&#x27;</span> &#125;,</span><br><span class="line">]</span><br><span class="line">_.<span class="title function_">groupBy</span>(students, <span class="string">&#x27;province&#x27;</span>)</span><br><span class="line"><span class="comment">// &#123; &#x27;江苏&#x27;: [&#123; name: &#x27;谢晧曜&#x27;, province: &#x27;江苏&#x27; &#125;], &#x27;河南&#x27;: [&#123; name: &#x27;杨俊宁&#x27;, province: &#x27;河南&#x27; &#125;, &#123; name: &#x27;宋光刚&#x27;, province: &#x27;河南&#x27; &#125;,&#123; name: &#x27;李珂威&#x27;, province: &#x27;河南&#x27; &#125;] &#125;</span></span><br></pre></td></tr></table></figure><h2 id="删除数组项"><a href="#删除数组项" class="headerlink" title="删除数组项"></a>删除数组项</h2><h3 id="根据断言删除数组项"><a href="#根据断言删除数组项" class="headerlink" title="根据断言删除数组项"></a>根据断言删除数组项</h3><ul><li><code>remove</code>: 移除数组中 predicate（断言）返回为真值的所有元素，并返回移除元素组成的数组。predicate（断言） 会传入 3 个参数： (<code>value</code>, <code>index</code>, <code>array</code>)。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> evens = _.<span class="title function_">remove</span>(array, <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array) <span class="comment">// =&gt; [1, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(evens) <span class="comment">// =&gt; [2, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> students = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;杨俊宁&#x27;</span>, <span class="attr">province</span>: <span class="string">&#x27;河南&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;宋光刚&#x27;</span>, <span class="attr">province</span>: <span class="string">&#x27;河南&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;谢晧曜&#x27;</span>, <span class="attr">province</span>: <span class="string">&#x27;江苏&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;李珂威&#x27;</span>, <span class="attr">province</span>: <span class="string">&#x27;河南&#x27;</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> removedStudent = _.<span class="title function_">remove</span>(students, <span class="function"><span class="params">student</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> student.<span class="property">province</span> === <span class="string">&#x27;江苏&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(students)</span><br><span class="line"><span class="comment">// [&#123;name: &quot;杨俊宁&quot;, province: &quot;河南&quot;&#125;, &#123;name: &quot;宋光刚&quot;, province: &quot;河南&quot;&#125;, &#123;name: &quot;李珂威&quot;, province: &quot;河南&quot;&#125;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removedStudent)</span><br><span class="line"><span class="comment">// [&#123;name: &quot;谢晧曜&quot;, province: &quot;江苏&quot;&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="根据给定值删除数组项"><a href="#根据给定值删除数组项" class="headerlink" title="根据给定值删除数组项"></a>根据给定值删除数组项</h3><ul><li><code>_.pull(array, [values])</code>: 移除数组 array 中所有和给定值相等的元素，使用 SameValueZero 进行全等比较。</li><li><code>_.pullAll(array, values)</code>: 这个方法类似 _.pull，区别是这个方法接收一个要移除值的数组。</li><li><code>_.pullAllBy(array, values, [iteratee=_.identity])</code>: 这个方法类似于 <code>_.pullAll</code> ，区别是这个方法接受一个 <code>iteratee</code>（迭代函数） 调用 <code>array</code> 和 <code>values</code>的每个值以产生一个值，通过产生的值进行了比较。<code>iteratee</code> 会传入一个参数： (<code>value</code>)。</li><li><code>_.pullAllWith(array, values, [comparator])</code>: 这个方法类似于 <code>_.pullAll</code>，区别是这个方法接受 <code>comparator</code> 调用 <code>array</code> 中的元素和 <code>values</code> 比较。<code>comparator</code> 会传入两个参数：(<code>arrVal</code>, <code>othVal</code>)。</li></ul><blockquote><p>pull 系列和 difference 系列不同之处在于 pull 系列方法会改变数组 array</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pull</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">_.<span class="title function_">pull</span>(array, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array) <span class="comment">// [1, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pullAll</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">_.<span class="title function_">pullAll</span>(array, [<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array) <span class="comment">// [1, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pullAllBy</span></span><br><span class="line"><span class="keyword">var</span> array = [&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">3</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;]</span><br><span class="line">_.<span class="title function_">pullAllBy</span>(array, [&#123; <span class="attr">x</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">3</span> &#125;], <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array) <span class="comment">// [&#123; &#x27;x&#x27;: 1 &#125;, &#123; &#x27;x&#x27;: 1 &#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pullAllWith</span></span><br><span class="line"><span class="keyword">var</span> array = [</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">5</span>, <span class="attr">y</span>: <span class="number">6</span> &#125;,</span><br><span class="line">]</span><br><span class="line">_.<span class="title function_">pullAllWith</span>(array, [&#123; <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">4</span> &#125;], _.<span class="property">isEqual</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array) <span class="comment">// [&#123; &#x27;x&#x27;: 1, &#x27;y&#x27;: 2 &#125;, &#123; &#x27;x&#x27;: 5, &#x27;y&#x27;: 6 &#125;]</span></span><br></pre></td></tr></table></figure><ul><li><code>_.pullAt(array, [indexes])</code>: 根据索引 <code>indexes</code>，移除 <code>array</code> 中对应的元素，并返回被移除元素的数组。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>]</span><br><span class="line"><span class="keyword">var</span> evens = _.<span class="title function_">pullAt</span>(array, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array) <span class="comment">// [5, 15]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(evens) <span class="comment">// [10, 20]</span></span><br></pre></td></tr></table></figure><ul><li><code>_.without(array, [values])</code>: 创建一个剔除所有给定值的新数组，剔除值的时候，使用 SameValueZero 做相等比较。不像 <code>_.pull</code>, 这个方法会返回一个新数组。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line">_.<span class="title function_">without</span>([<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// [3]</span></span><br></pre></td></tr></table></figure><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><ul><li><code>_.uniq(array)</code>: 创建一个去重后的 array 数组副本。使用了 SameValueZero 做等值比较。只有第一次出现的元素才会被保留。</li><li><code>_.uniqBy(array, [iteratee=_.identity])</code>: 这个方法类似 <code>_.uniq</code> ，除了它接受一个 <code>iteratee</code>（迭代函数），调用每一个数组（<code>array</code>）的每个元素以产生唯一性计算的标准。<code>iteratee</code> 调用时会传入一个参数：(<code>value</code>)。</li><li><code>_.uniqWith(array, [comparator])</code>: 这个方法类似 <code>_.uniq</code>， 除了它接受一个 <code>comparator</code> 调用比较 <code>array</code> 数组的每一个元素。 <code>comparator</code> 调用时会传入 2 个参数：(<code>arrVal</code>, <code>othVal</code>)。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uniq</span></span><br><span class="line">_.<span class="title function_">uniq</span>([<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>]) <span class="comment">// [2, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uniqBy</span></span><br><span class="line">_.<span class="title function_">uniqBy</span>([<span class="number">2.1</span>, <span class="number">1.2</span>, <span class="number">2.3</span>], <span class="title class_">Math</span>.<span class="property">floor</span>) <span class="comment">// [2.1, 1.2]</span></span><br><span class="line"><span class="comment">// The `_.property` iteratee shorthand.</span></span><br><span class="line">_.<span class="title function_">uniqBy</span>([&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;], <span class="string">&#x27;x&#x27;</span>) <span class="comment">// [&#123; &#x27;x&#x27;: 1 &#125;, &#123; &#x27;x&#x27;: 2 &#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uniqWith</span></span><br><span class="line"><span class="keyword">var</span> objects = [</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;,</span><br><span class="line">]</span><br><span class="line">_.<span class="title function_">uniqWith</span>(objects, _.<span class="property">isEqual</span>) <span class="comment">// [&#123; &#x27;x&#x27;: 1, &#x27;y&#x27;: 2 &#125;, &#123; &#x27;x&#x27;: 2, &#x27;y&#x27;: 1 &#125;]</span></span><br></pre></td></tr></table></figure><h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><ul><li><code>_.sortBy(collection, [iteratees=[_.identity]])</code>: 创建一个元素数组。 以 <code>iteratee</code> 处理的结果升序排序。 这个方法执行稳定排序，也就是说相同元素会保持原始排序。 <code>iteratees</code> 调用1个参数：(<code>value</code>)。可以使用 <code>Array.prototype.reverse</code> 方法倒序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> users = [</span><br><span class="line">  &#123; <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;fred&#x27;</span> &#125;, <span class="attr">age</span>: <span class="number">48</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;barney&#x27;</span> &#125;, <span class="attr">age</span>: <span class="number">36</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;fred&#x27;</span> &#125;, <span class="attr">age</span>: <span class="number">40</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;barney&#x27;</span> &#125;, <span class="attr">age</span>: <span class="number">34</span> &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// The `_.property` iteratee shorthand.</span></span><br><span class="line">_.<span class="title function_">sortBy</span>(users, <span class="string">&#x27;user.name&#x27;</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> *  &#123;age: 34, user: &quot;barney&quot;&#125;,</span></span><br><span class="line"><span class="comment"> *  &#123;age: 36, user: &quot;barney&quot;&#125;,</span></span><br><span class="line"><span class="comment"> *  &#123;age: 40, user: &quot;fred&quot;&#125;,</span></span><br><span class="line"><span class="comment"> *  &#123;age: 48, user: &quot;fred&quot;&#125;</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="数组降维"><a href="#数组降维" class="headerlink" title="数组降维"></a>数组降维</h2><ul><li><code>_.flatten(array)</code>: 减少一级 <code>array</code> 嵌套深度。</li><li><code>_.flattenDeep(array)</code>: 将 <code>array</code> 递归为一维数组。</li><li><code>_.flattenDepth(array, [depth=1])</code>: 根据 <code>depth</code> 递归减少 <code>array</code> 的嵌套层级</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// flatten</span></span><br><span class="line">_.<span class="title function_">flatten</span>([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]]) <span class="comment">// [1, 2, [3, [4]], 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// flattenDeep</span></span><br><span class="line">_.<span class="title function_">flattenDeep</span>([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]]) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// flattenDepth</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]]</span><br><span class="line">_.<span class="title function_">flattenDepth</span>(array, <span class="number">1</span>) <span class="comment">// [1, 2, [3, [4]], 5]</span></span><br><span class="line">_.<span class="title function_">flattenDepth</span>(array, <span class="number">2</span>) <span class="comment">// [1, 2, 3, [4], 5]</span></span><br><span class="line">_.<span class="title function_">flattenDepth</span>(array, <span class="number">3</span>) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="获取部分元素"><a href="#获取部分元素" class="headerlink" title="获取部分元素"></a>获取部分元素</h2><ul><li><code>_.initial(array)</code>: 获取数组 <code>array</code> 中除了最后一个元素之外的所有元素（去除数组array中的最后一个元素）。</li><li><code>_.tail(array)</code>: 获取除了 <code>array</code> 数组第一个元素以外的全部元素。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ECMAScript 数组的每一项可以保存任何类型的数据；而且大小是可以动态调整的，即可以随着数据的添加自动增长以容纳新增数据。&lt;/p&gt;
&lt;h1 id=&quot;创建数组&quot;&gt;&lt;a href=&quot;#创建数组&quot; class=&quot;headerlink&quot; title=&quot;创建数组&quot;&gt;&lt;/a&gt;创建</summary>
      
    
    
    
    <category term="前端" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://youngjuning.js.org/tags/JavaScript/"/>
    
    <category term="Array" scheme="https://youngjuning.js.org/tags/Array/"/>
    
    <category term="ECMAScript" scheme="https://youngjuning.js.org/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title>react-native-create-library 中文文档</title>
    <link href="https://youngjuning.js.org/201099a9ba42/"/>
    <id>https://youngjuning.js.org/201099a9ba42/</id>
    <published>2023-03-08T08:53:10.000Z</published>
    <updated>2023-03-23T07:00:19.418Z</updated>
    
    <content type="html"><![CDATA[<p>react-native-create-library 使你可以使用一个命令创建 React Native 原生库的工具</p><h3 id="一、你为什么需要这个？"><a href="#一、你为什么需要这个？" class="headerlink" title="一、你为什么需要这个？"></a>一、你为什么需要这个？</h3><p>如果您要为 React Native 创建原生模块，则需要为要支持的每个平台提供一些原生代码，然后和一些 JavaScript 代码绑定在一起。自己设置可能非常耗时。</p><p>这就是这个工具的用武之地。它创建了一个包含所有当前最佳实践的样板。为什么不用 <code>react-native new-library</code>？不幸的是，该命令不会创建一个最新的库，需要一个已经初始化的 React Native 项目，并且只设置 iOS 方面的东西。</p><blockquote><p>警告：这仅创建没有视图组件的原生模块。</p></blockquote><h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g react-native-create-library</span><br></pre></td></tr></table></figure><p>这个命令将会创建一个 <code>MyFancyLibrary</code> 文件夹，现在可以执行 <code>yarn install</code> 来为你新创建的 <code>Library</code> 安装依赖。</p><h3 id="三、命令"><a href="#三、命令" class="headerlink" title="三、命令"></a>三、命令</h3><blockquote><p><code>react-native-create-library [options] &lt;name&gt;</code></p></blockquote><p><strong>选项：</strong></p><ul><li><code>-h</code>、<code>--help</code>: 输入有用的信息</li><li><code>-V</code>、<code>--version</code>: 输出版本号</li><li><code>-p</code>、<code>--prefix &lt;prefix&gt;</code>: 库的前缀（默认：<code>RN</code>）</li><li><code>--module-prefix &lt;modulePrefix&gt;</code>: 库的模块前缀（npm）（默认<code>react-native</code>）</li><li><code>--package-identifier &lt;packageIdentifier&gt;</code>: (Android only!) The package name for the Android module (Default: <code>com.reactlibrary</code>)</li><li><code>--namespace &lt;namespace&gt;</code>: (Windows only!) The namespace for the Windows module(Default: The name as PascalCase)</li><li><code>--platforms &lt;platforms&gt;</code>: 支持的平台（用逗号隔开，默认：<code>ios,android,windows</code>）</li><li><code>--github-account &lt;github_account&gt;</code>: 托管库的 github 账号（默认：<code>github_account</code>）</li><li><code>--author-name &lt;name&gt;</code>: 作者的名字（默认：<code>Your Name</code>）</li><li><code>--author-name &lt;email&gt;</code>: 作者的邮箱（默认：<code>yourname@email.com</code>）</li><li><code>--license &lt;license&gt;</code>: The license type of this library (Default: <code>Apache-2.0</code>)</li><li><code>--generate-example &lt;shouldGenerate&gt;</code>: 会生成一个 RN 例子并且 <code>link</code> 刚生成的库（默认：<code>false</code>）</li></ul><h3 id="四、程序化使用"><a href="#四、程序化使用" class="headerlink" title="四、程序化使用"></a>四、程序化使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createLibrary = <span class="built_in">require</span>(<span class="string">&#x27;react-native-create-library&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">createLibrary</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;MyFancyLibrary&#x27;</span>,</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Oh yay! My library has been created!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="title class_">String</span>, <span class="comment">/* The name of the library (Default: Library) */</span></span><br><span class="line">  <span class="attr">prefix</span>: <span class="title class_">String</span>, <span class="comment">/* The prefix for the library (Default: RN) */</span></span><br><span class="line">  <span class="attr">modulePrefix</span>: <span class="title class_">String</span>, <span class="comment">/* The module prefix for the library (Default: react-native) */</span></span><br><span class="line">  <span class="attr">platforms</span>: <span class="title class_">Array</span>, <span class="comment">/* Platforms the library will be created for. (Default: [&#x27;ios&#x27;, &#x27;android&#x27;, &#x27;windows&#x27;]) */</span></span><br><span class="line">  <span class="attr">packageIdentifier</span>: <span class="title class_">String</span>, <span class="comment">/* (Android only!) The package name for the Android module (Default: com.reactlibrary) */</span></span><br><span class="line">  <span class="attr">namespace</span>: <span class="title class_">String</span>, <span class="comment">/* (Windows only!) The namespace for the Windows module (Default: The package identifier as PascalCase, which is `Com.Reactlibrary`) */</span></span><br><span class="line">  <span class="attr">githubAccount</span>: <span class="title class_">String</span>, <span class="comment">/* The github account where the library is hosted (Default: `github_account`) */</span></span><br><span class="line">  <span class="attr">authorName</span>: <span class="title class_">String</span>, <span class="comment">/* The author&#x27;s name (Default: `Your Name`) */</span></span><br><span class="line">  <span class="attr">authorEmail</span>: <span class="title class_">String</span>, <span class="comment">/* The author&#x27;s email (Default: `yourname@email.com`) */</span></span><br><span class="line">  <span class="attr">license</span>: <span class="title class_">String</span>, <span class="comment">/* The license type of this library (Default: `Apache-2.0`) */</span></span><br><span class="line">  <span class="attr">generateExample</span>: <span class="title class_">Boolean</span>, <span class="comment">/* Will generate a RN example project and link the new library to it (Default: `false`) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;react-native-create-library 使你可以使用一个命令创建 React Native 原生库的工具&lt;/p&gt;
&lt;h3 id=&quot;一、你为什么需要这个？&quot;&gt;&lt;a href=&quot;#一、你为什么需要这个？&quot; class=&quot;headerlink&quot; title=&quot;一、</summary>
      
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="前端" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React Native" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/React-Native/"/>
    
    
    <category term="React Native" scheme="https://youngjuning.js.org/tags/React-Native/"/>
    
    <category term="React Native 原生库" scheme="https://youngjuning.js.org/tags/React-Native-%E5%8E%9F%E7%94%9F%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>React 面试题（React）</title>
    <link href="https://youngjuning.js.org/react-interview/"/>
    <id>https://youngjuning.js.org/react-interview/</id>
    <published>2023-03-06T11:30:00.000Z</published>
    <updated>2023-03-23T07:00:19.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是-React？"><a href="#1-什么是-React？" class="headerlink" title="1. 什么是 React？"></a>1. 什么是 React？</h2><p>React 是一个<strong>开源前端 JavaScript 库</strong>，用于构建用户界面，尤其是单页应用程序。它用于处理 Web 和移动应用程序的视图层。React 是由 Facebook 的软件工程师 <a href="https://github.com/jordwalke">乔丹·沃克</a> 创建的。React 于 2011 年在 Facebook 的 News Feed 上首次发布，2012 年首次在 Instagram 发布。</p><h2 id="2-React-的主要特性是什么？"><a href="#2-React-的主要特性是什么？" class="headerlink" title="2. React 的主要特性是什么？"></a>2. React 的主要特性是什么？</h2><p>React 的主要特性是:</p><ul><li>考虑到 DOM 操作内存开销大，React 使用<strong>虚拟 DOM（VirtualDOM）</strong> 替代了真实 DOM（RealDOM）</li><li>支持<strong>服务端渲染</strong></li><li>遵循<strong>单向</strong>数据流或数据绑定</li><li>使用<strong>可复用&#x2F;可组合</strong>的 UI 组件来进行视图开发</li></ul><h2 id="3-什么是-JSX？"><a href="#3-什么是-JSX？" class="headerlink" title="3. 什么是 JSX？"></a>3. 什么是 JSX？</h2><p>JSX 是 ECMAScript 的类似 XML 的语法扩展（缩写是 JavaScript XML）。实际上，它只是为 <code>React.createElement()</code> 函数提供语法糖，为我们提供了在 JavaScript 中使用类 HTML 模板语法的能力。</p><p>下面的示例中，<code>&lt;h1&gt;</code> 标签内的文本会作为 JavaScript 函数（<code>React.createElement()</code>）的返回值返回给 render 函数：</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#x27;Welcome to React world!&#x27;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-元素（Element）和组件（Component）的区别是什么？"><a href="#4-元素（Element）和组件（Component）的区别是什么？" class="headerlink" title="4. 元素（Element）和组件（Component）的区别是什么？"></a>4. 元素（Element）和组件（Component）的区别是什么？</h2><p>元素是一个普通的对象，它描述了你希望以 DOM 节点或其他组件的形式出现在屏幕上的内容。元素可以在其 props 中包含其他 元素。创建一个 React 元素开销很小。一旦创建了元素，就永远不会对其进行修改。</p><p>React Element 的对象表示如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">id</span>: <span class="string">&#x27;login-btn&#x27;</span> &#125;, <span class="string">&#x27;Login&#x27;</span>);</span><br></pre></td></tr></table></figure><p>上面的 <code>React.createElement()</code> 函数会返回一个如下的对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">children</span>: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;login-btn&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终，它会使用 <code>ReactDOM.render()</code> 将元素渲染到 DOM：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;login-btn&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而<strong>组件</strong>可以用几种不同的方式声明。它可以是带有 <code>render()</code> 方法的类。或者，你可以简单地将其定义为一个函数。无论哪种情况，它都将 props 作为输入，并返回 JSX 树作为输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">&#123; onLogin &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#123;</span>&#x27;<span class="attr">login-btn</span>&#x27;&#125; <span class="attr">onClick</span>=<span class="string">&#123;onLogin&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Login</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后将 JSX 编译成 <code>React.createElement()</code> 函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">&#123; onLogin &#125;</span>) =&gt;</span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">id</span>: <span class="string">&#x27;login-btn&#x27;</span>, <span class="attr">onClick</span>: onLogin &#125;, <span class="string">&#x27;Login&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="5-如何在-React-中创建组件？"><a href="#5-如何在-React-中创建组件？" class="headerlink" title="5. 如何在 React 中创建组件？"></a>5. 如何在 React 中创建组件？</h2><p>这里有两种可以用方式来创建一个组件：</p><ol><li><strong>函数组件：</strong> 这是创建组件最简单的方式。它们是纯 JavaScript 函数，接受 props 对象作为第一个参数并返回 React 元素：</li></ol><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Greeting</span>(<span class="params">&#123; message &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;`Hello, $&#123;message&#125;`&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>类组件：</strong> 你也可以使用 ES6 的 class 语法来定义一个组件。上面的函数组件可以被改写为：</li></ol><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeting</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;`Hello, $&#123;this.props.message&#125;`&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-何时选择类组件或函数组件"><a href="#6-何时选择类组件或函数组件" class="headerlink" title="6. 何时选择类组件或函数组件"></a>6. 何时选择类组件或函数组件</h2><p>如果一个组件需要状态或者生命周期方法，则使用类组件，否则使用函数组件。</p><p>然而，从 React 16.8 引入 Hooks 后，你可以在函数组件中使用之前只在类组件中有的特性，比如状态和生命周期方法。</p><h2 id="7-Pure-Components-是什么？"><a href="#7-Pure-Components-是什么？" class="headerlink" title="7. Pure Components 是什么？"></a>7. Pure Components 是什么？</h2><p><code>React.PureComponent</code> 与 <code>React.Component</code> 几乎完全相同，不同之处在于它为你处理了 <code>shouldComponentUpdate()</code> 方法。当 props 和 state 改变时，PureComponent 将对 props 和 state 进行浅表比较。另一方面，Component 初始不会将当前 props 和 state 与 nextPorps 和 nextState 进行比较。因此，每当调用 <code>shouldComponentUpdate</code> 时，组件将默认重新渲染。</p><h2 id="8-React-中的-state-是什么？"><a href="#8-React-中的-state-是什么？" class="headerlink" title="8. React 中的 state 是什么？"></a>8. React 中的 state 是什么？</h2><p>组件的状态是一个对象，其中包含一些在组件的生命周期中可能会发生变化的信息。我们应该始终尝试使状态尽可能简单，并最大程度减少有状态组件的数量。</p><p>让我们来创建一个带有 message 状态的 user 组件：</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;Welcome to React world&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.message&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8472c6438dfe48068002c5fdf1fbf098~tplv-k3u1fbpfcp-zoom-1.image" alt="state"></p><p>状态类似于 Props，但它是私有的，并由组件完全控制。也就是说除了拥有和设置它的组件之外，其他任何组件都无法访问它。</p><h2 id="9-React-中的-props-是什么"><a href="#9-React-中的-props-是什么" class="headerlink" title="9. React 中的 props 是什么"></a>9. React 中的 props 是什么</h2><p>Props 是组件的输入。它们是单个值或包含一组值的对象，这些对象在创建时会使用类似于 HTML 标签属性的命名约定传递给组件。它们是从父组件传递到子组件的数据。</p><p>React 中 props 的主要目的是提供以下组件功能：</p><ol><li>将自定义数据传递到你的组件。</li><li>触发状态更改。</li><li>通过组件的 <code>render()</code> 方法中的 <code>this.props.reactProp</code> 使用。</li></ol><p>举个例子，让我们创建一个带有 <code>reactProp</code> 属性的元素：</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Element</span> reactProp=&#123;<span class="string">&#x27;1&#x27;</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p>然后，这个 <code>reactProp</code>（或你想出的任何名称）成为附加到 React 的本地 props 对象的属性，该对象最初已经存在于使用 React 库创建的所有组件上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props.<span class="property">reactProp</span>;</span><br></pre></td></tr></table></figure><h2 id="10-state-和-props-的区别是什么？"><a href="#10-state-和-props-的区别是什么？" class="headerlink" title="10. state 和 props 的区别是什么？"></a>10. state 和 props 的区别是什么？</h2><p>props 和 state 都是普通的 JavaScript 对象。尽管它们两者都拥有影响渲染输出的信息，但它们在组件层面的功能却有所不同。将 props 传递给组件类似于传递参数给函数，而 state 则类似于函数中声明的变量一样在组件内进行管理。</p><h2 id="11-为什么我们不能直接更新状态？"><a href="#11-为什么我们不能直接更新状态？" class="headerlink" title="11. 为什么我们不能直接更新状态？"></a>11. 为什么我们不能直接更新状态？</h2><p>如果你尝试直接更新状态，React 组件并不会重新渲染。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误❌</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">message</span> = <span class="string">&#x27;Hello world&#x27;</span>;</span><br></pre></td></tr></table></figure><p>正确的做法是使用 <code>setState()</code> 方法。它会计划一个对组件状态对象的更新。当状态更改时，组件通过重新渲染进行响应。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确✅</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;Hello World&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>你可以使用构造函数或者最新的 javascript class 字段声明语法直接将其分配给状态对象。</p></blockquote><h2 id="12-回调函数作为-setState-的参数的目的是什么？"><a href="#12-回调函数作为-setState-的参数的目的是什么？" class="headerlink" title="12. 回调函数作为 setState() 的参数的目的是什么？"></a>12. 回调函数作为 <code>setState()</code> 的参数的目的是什么？</h2><p>setState 完成并重新渲染组件后，将调用回调函数。由于 setState() 是异步的，因此回调函数可用于任何后续操作。</p><blockquote><p><strong>注意：</strong>我们建议使用生命周期方法而不是这个回调函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setState</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span> &#125;, <span class="function">() =&gt;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The name has updated and component re-rendered&#x27;</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="13-HTML-和-React-的事件处理有什么不同？"><a href="#13-HTML-和-React-的事件处理有什么不同？" class="headerlink" title="13. HTML 和 React 的事件处理有什么不同？"></a>13. HTML 和 React 的事件处理有什么不同？</h2><p>下面是一些 HTML 和 React 的事件处理的主要不同：</p><ol><li>在 HTML 中，事件名应该是全小写的：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;activateLasers()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然而在 React 中事件名遵循小驼峰 格式：</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;activateLasers&#125;&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 HTML 中，你应该返回 <code>false</code> 来阻止默认行为：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&#x27;console.log(&quot;The link was clicked.&quot;); return false;&#x27;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 React 中你必须明确地调用 <code>preventDefault()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The link was clicked.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在 HTML 中，你调用函数时需要加上 <code>()</code>：</li></ol><p>然后在 React 中你不应该在函数名后带上 <code>()</code>。（比如前面示例中的 <code>activateLasers</code> 函数）</p><h2 id="14-如何在-JSX-回调函数中绑定方法或事件处理器"><a href="#14-如何在-JSX-回调函数中绑定方法或事件处理器" class="headerlink" title="14. 如何在 JSX 回调函数中绑定方法或事件处理器"></a>14. 如何在 JSX 回调函数中绑定方法或事件处理器</h2><p>这里有 3 个方法做到这一点：</p><ol><li><strong>在构造器中绑定：</strong> 在 JavaScript 类中，默认情况下不绑定方法。同样的事情也适用于定义为类方法的 React 事件处理器。通常我们将它们绑定在构造函数中。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>类的公共字段语法：</strong> 如果你不喜欢使用绑定的方式，也可以使用类的公共字段语法来正确绑定回调：</li></ol><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is:&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="variable language_">this</span>.<span class="property">handleClick</span>&#125;&gt;&#123;<span class="string">&#x27;Click me&#x27;</span>&#125;&lt;/button&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>箭头函数作为回调：</strong> 你可以直接在回调中使用箭头函数</li></ol><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="function"><span class="params">event</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">handleClick</span>(event)&#125;&gt;&#123;<span class="string">&#x27;Click me&#x27;</span>&#125;&lt;/button&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 如果回调作为 prop 传递给子组件，这些组件可能会触发额外的重渲染。在这些场景中，考虑到性能因素，最佳的选择是使用 <code>.bind()</code> 或类的公共字段语法。</p></blockquote><h2 id="15-如何传递参数给事件处理器或回调？"><a href="#15-如何传递参数给事件处理器或回调？" class="headerlink" title="15. 如何传递参数给事件处理器或回调？"></a>15. 如何传递参数给事件处理器或回调？</h2><p>你可以使用一个箭头函数来包裹一个事件处理器并传递参数：</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">handleClick</span>(id)&#125; /&gt;</span><br></pre></td></tr></table></figure><p>这等价于调用 <code>.bind</code> 函数：</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>, id)&#125; /&gt;</span><br></pre></td></tr></table></figure><p>除了这两种办法，你也可以传递参数给一个箭头函数：</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="variable language_">this</span>.<span class="title function_">handleClick</span>(id)&#125; /&gt;;</span><br><span class="line">handleClick = <span class="function"><span class="params">id</span> =&gt;</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, your ticket number is&#x27;</span>, id);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="16-React-中的合成事件是什么？"><a href="#16-React-中的合成事件是什么？" class="headerlink" title="16. React 中的合成事件是什么？"></a>16. React 中的合成事件是什么？</h2><p><code>SyntheticEvent</code> 是基于浏览器本地事件的跨浏览器包装。它的 API 与浏览器的本地事件相同，包括 <code>stopPropagation()</code> 和 <code>preventDefault()</code>，但事件在所有浏览器中的表现均一致。</p><h2 id="17-什么是内联条件表达式？"><a href="#17-什么是内联条件表达式？" class="headerlink" title="17. 什么是内联条件表达式？"></a>17. 什么是内联条件表达式？</h2><p>你可以使用 JS 可用的 <code>if</code> 语句或三元表达式来有条件地渲染表达式。 除了这些方法之外，还可以通过将所有表达式括在花括号中然后在其后跟 JS 逻辑运算符 <code>&amp;&amp;</code> 来将任何表达式嵌入 JSX。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;<span class="title class_">Hello</span>!&lt;/h1&gt;;</span><br><span class="line">&#123;</span><br><span class="line">  messages.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; !isLogin ? (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>You have &#123;messages.length&#125; unread messages.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  ) : (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>You don&#x27;t have unread messages.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18-什么是-key-prop？在元素数组中使用它的好处是什么？"><a href="#18-什么是-key-prop？在元素数组中使用它的好处是什么？" class="headerlink" title="18. 什么是 key prop？在元素数组中使用它的好处是什么？"></a>18. 什么是 <code>key</code> prop？在元素数组中使用它的好处是什么？</h2><p><code>key</code> 是当你创建一个元素数组时应该包含的一个特殊的字符串属性。<code>key</code> prop 会帮助 React 识别具体哪一项被修改、添加或被移除。</p><p>通常，我们将数据中的 ID 用作 <code>key</code>：</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todoItems = todos.<span class="title function_">map</span>(<span class="function"><span class="params">todo</span> =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>);</span><br></pre></td></tr></table></figure><p>如果呈现的项目没有稳定的 ID，退而求其次，我们可以将 <code>index</code> 作为 <code>key</code>：</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todoItems = todos.<span class="title function_">map</span>(<span class="function">(<span class="params">todo, index</span>) =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index.toString()&#125;</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">));</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>如果列表项可能改变，不建议使用 <code>indexes</code> 作为 <code>keys</code>。这可能会对性能产生负面影响，并可能导致组件状态出现问题。</li><li>如果你将列表项提取为单独的组件，则在列表组件上应用 <code>keys</code> 而不是 <code>li</code> 标签。</li><li>如果列表项中不存在 <code>key</code> prop，则控制台中将出现警告消息。</li></ol><h2 id="19-refs-有什么用？"><a href="#19-refs-有什么用？" class="headerlink" title="19. refs 有什么用？"></a>19. refs 有什么用？</h2><p>refs 用于返回对该元素的引用。在大多数情况下，应避免使用它们，但是，当你需要直接访问 DOM 元素或组件的实例时，它们会很有用。</p><h2 id="20-如何创建-refs？"><a href="#20-如何创建-refs？" class="headerlink" title="20. 如何创建 refs？"></a>20. 如何创建 refs？</h2><p>这里有两种方式</p><p>1.这是最近添加的方法。使用 <code>React.createRef()</code> 方法创建 refs，并通过 ref 属性附加到 React 元素。为了在整个组件中使用 refs，只需将 ref 分配给构造函数中的 instance 属性。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">myRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>无论 React 版本如何，你都可以使用 ref 回调方法。例如，搜索栏组件的输入元素的访问方式如下。</li></ol><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SearchBar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">txtSearch</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">term</span>: <span class="string">&#x27;&#x27;</span> &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">setInputSearchRef</span> = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">txtSearch</span> = e;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">onInputChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">term</span>: <span class="variable language_">this</span>.<span class="property">txtSearch</span>.<span class="property">value</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;this.state.term&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;this.onInputChange.bind(this)&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&#123;this.setInputSearchRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以使用闭包在函数组件中使用 refs。</p><blockquote><p><strong>注意：</strong> 你也可以使用内联 ref 回调，即使这不是推荐的方法</p></blockquote><h2 id="21-refs-转发是什么？"><a href="#21-refs-转发是什么？" class="headerlink" title="21. refs 转发是什么？"></a>21. refs 转发是什么？</h2><p><em>Ref 转发</em> 是让某些组件可以使用它们接收的 <code>ref</code> 的特性，这些组件还可以进一步将其传递给子组件。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ButtonElement</span> = <span class="title class_">React</span>.<span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">className</span>=<span class="string">&quot;CustomButton&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create ref to the DOM button:</span></span><br><span class="line"><span class="keyword">const</span> ref = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ButtonElement</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span>&#123;&#x27;Forward Ref&#x27;&#125;<span class="tag">&lt;/<span class="name">ButtonElement</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><h2 id="22-refs-回调和-findDOMNode-哪个是首选项？"><a href="#22-refs-回调和-findDOMNode-哪个是首选项？" class="headerlink" title="22. refs 回调和 findDOMNode() 哪个是首选项？"></a>22. refs 回调和 <code>findDOMNode()</code> 哪个是首选项？</h2><p>最好使用 refs 回调 而不是 <code>findDOMNode()</code> API。因为 <code>findDOMNode()</code> 将来会阻止对 React 的某些改进。</p><p>使用 <code>findDOMNode</code> 的“传统”方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">findDOMNode</span>(<span class="variable language_">this</span>).<span class="title function_">scrollIntoView</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐的方式是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">node</span> = <span class="title function_">createRef</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">current</span>.<span class="title function_">scrollIntoView</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.node&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="23-为什么-Strings-Refs-被遗弃了？"><a href="#23-为什么-Strings-Refs-被遗弃了？" class="headerlink" title="23. 为什么 Strings Refs 被遗弃了？"></a>23. 为什么 Strings Refs 被遗弃了？</h2><p>如果你以前使用过 React，那么你可能会熟悉一个较旧的 API，其中的<code>ref</code> 属性是一个字符串，例如 <code>ref = &#123;textInput&#39;&#125;</code>，并且 DOM 节点作为<code>this.refs.textInput</code> 访问。我们建议你不要这样做，因为 String 引用有以下问题，并且被认为是旧版的。字符串引用已经在 <strong>React v16 中被删除</strong>。</p><ol><li><p>他们迫使 React 跟踪当前正在执行的组件。这是有问题的，因为它使 React 模块成为有状态的，并因此在打包 React 模块时冲突而引起奇怪的错误。</p></li><li><p>它们是“不可组合的” — 如果库在传递的子项上放置了引用，则用户不能在其上放置其他引用。回调引用完全可以组合。</p></li><li><p>他们不能和静态分析工具配合（比如 Flow）。Flow 无法猜测出框架 <code>this.refs</code> 上出现的字符串引用及其类型（可能不同）。 回调引用对静态分析更友好。</p></li><li><p>它无法像大多数人期望的那样使用“渲染回调”模式（例如）</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  renderRow = <span class="function"><span class="params">index</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// This won&#x27;t work. Ref will get attached to DataTable rather than MyComponent:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;</span>&#x27;<span class="attr">input-</span>&#x27; + <span class="attr">index</span>&#125; /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This would work though! Callback refs are awesome.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;input</span> =&gt;</span> (this[&#x27;input-&#x27; + index] = input)&#125; /&gt;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">DataTable</span> <span class="attr">data</span>=<span class="string">&#123;this.props.data&#125;</span> <span class="attr">renderRow</span>=<span class="string">&#123;this.renderRow&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="24-虚拟-DOM-是什么？"><a href="#24-虚拟-DOM-是什么？" class="headerlink" title="24. 虚拟 DOM 是什么？"></a>24. 虚拟 DOM 是什么？</h2><p>_Virtual DOM_（VDOM）是<em>Real DOM</em>的内存表示形式。 UI 的表示形式保留在内存中，并与“真实” DOM 同步。 这是在调用渲染函数和在屏幕上显示元素之间发生的一步。 这整个过程称为 <a href="https://zh-hans.reactjs.org/docs/reconciliation.html">协调</a>。</p><h2 id="25-虚拟-DOM-原理"><a href="#25-虚拟-DOM-原理" class="headerlink" title="25. 虚拟 DOM 原理"></a>25. 虚拟 DOM 原理</h2><p>虚拟 DOM 工作原理只有三个简单的步骤。</p><ol><li>无论何时任何基础数据发生更改，整个 UI 都将以虚拟 DOM 表现形式重新呈现。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f8a99a43f7049feb7806a1bd54e5929~tplv-k3u1fbpfcp-zoom-1.image" alt="vdom"></p><ol start="2"><li>然后，计算先前的 DOM 表现形式与新的 DOM 表现形式之间的差异。</li></ol><p><img src="https://github.com/sudheerj/reactjs-interview-questions/raw/master/images/vdom2.png" alt="vdom2"></p><ol start="3"><li>一旦完成计算，将只会更新内容真正改变的那部分真是 DOM。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/461ba77627524f96b2bf270c1935b969~tplv-k3u1fbpfcp-zoom-1.image" alt="vdom3"></p><h2 id="26-Shadow-DOM-和-Virtual-DOM-有什么区别？"><a href="#26-Shadow-DOM-和-Virtual-DOM-有什么区别？" class="headerlink" title="26. Shadow DOM 和 Virtual DOM 有什么区别？"></a>26. Shadow DOM 和 Virtual DOM 有什么区别？</h2><p>Shadow DOM 是一种浏览器技术，主要用于确定 web components 中的变量和 CSS。Virtual DOM 是由浏览器 API 之上的 JavaScript 库实现的概念。</p><h2 id="27-React-Fiber-是什么"><a href="#27-React-Fiber-是什么" class="headerlink" title="27. React Fiber 是什么?"></a>27. React Fiber 是什么?</h2><p>Fiber 是 React v16 中新的 <a href="https://zh-hans.reactjs.org/docs/reconciliation.html">协调</a> 引擎或核心算法的重新实现。React Fiber 的目标是提高其在动画、布局、手势、暂停、中止或重用工作的能力，以及为不同类型的更新分配优先级等方面的适用性和新的并发原语。</p><h2 id="28-React-Fiber-的主要设计目的是什么？"><a href="#28-React-Fiber-的主要设计目的是什么？" class="headerlink" title="28. React Fiber 的主要设计目的是什么？"></a>28. React Fiber 的主要设计目的是什么？</h2><p>React Fiber 的目标是提高其对动画、布局和手势等领域的适用性。它的 headline 功能是<strong>增量渲染</strong>：能够将渲染工作拆分为多个块并将其分布到多个帧中。</p><h2 id="29-受控组件是什么？"><a href="#29-受控组件是什么？" class="headerlink" title="29. 受控组件是什么？"></a>29. 受控组件是什么？</h2><p>在用户输入后能够控制表单中输入元素的组件被称为“受控组件”，比如每一个状态概念都将有一个相关的处理函数</p><p>例如下面的例子中，为了将名字转换为全大写，我们使用 <code>handleChange</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">value</span>: event.<span class="property">target</span>.<span class="property">value</span>.<span class="title function_">toUpperCase</span>()&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="30-非受控组件是什么？"><a href="#30-非受控组件是什么？" class="headerlink" title="30. 非受控组件是什么？"></a>30. 非受控组件是什么？</h2><p>非受控组件是那些把状态维护在其内部的组件，当你想要获得当前值时需要使用 ref 查询 DOM。这有一点像传统的 HTML。</p><p>在下面的 <code>UserProfile</code> 组件中，<code>name</code> 输入被使用 <code>ref</code> 获取：</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserProfile</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleSubmit</span> = <span class="variable language_">this</span>.<span class="property">handleSubmit</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">input</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleSubmit</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;A name was submitted: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">input</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;&#x27;Name:&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.input&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="31-createElement-和-cloneElement-的区别是什么？"><a href="#31-createElement-和-cloneElement-的区别是什么？" class="headerlink" title="31. createElement 和 cloneElement 的区别是什么？"></a>31. createElement 和 cloneElement 的区别是什么？</h2><p>JSX 元素将被转换为 <code>React.createElement()</code> 函数以创建 React 元素，这些元素将用于 UI 的对象表示。而 <code>cloneElement</code> 用于克隆元素并将新的 <code>props</code> 传递给它。</p><p><strong>课后扩展：</strong></p><ul><li><a href="https://zh-hans.reactjs.org/docs/react-api.html">React 顶层 API</a></li></ul><h2 id="32-React-中的状态提升是什么？"><a href="#32-React-中的状态提升是什么？" class="headerlink" title="32. React 中的状态提升是什么？"></a>32. React 中的状态提升是什么？</h2><p>当多个组件需要共享相同的变化数据时，建议将共享状态提升到它们最接近的共同祖先。这意味着，如果两个子组件共享来自其父组件的相同数据，则将状态移到父组件，而不是在两个子组件中都保持内部状态。</p><h2 id="33-组件生命周期有哪些不同阶段？"><a href="#33-组件生命周期有哪些不同阶段？" class="headerlink" title="33. 组件生命周期有哪些不同阶段？"></a>33. 组件生命周期有哪些不同阶段？</h2><p>组件生命周期具有三个不同的生命周期阶段。</p><ol><li><strong>Mounting：</strong> 组件已准备好安装在浏览器 DOM 中。这个阶段涵盖了生命周期方法 <code>constructor()</code>、<code>getDerivedStateFromProps()</code>、 <code>render()</code> 和 <code>componentDidMount()</code> 的初始化。</li><li><strong>Updating：</strong> 在此阶段，组件以两种方式进行更新，即发送新 <code>props</code> 和从 <code>setState()</code> 或 <code>forceUpdate()</code> 更新状态。此阶段涵盖了<code>getDerivedStateFromProps()</code>，<code>shouldComponentUpdate()</code>，<code>render()</code> 、<code>getSnapshotBeforeUpdate()</code> 和 <code>componentDidUpdate()</code> 生命周期方法。</li><li><strong>Unmounting：</strong> 在最后一个阶段，不再需要该组件并从浏览器 DOM 上卸载该组件。 这个阶段包括 <code>componentWillUnmount()</code> 生命周期方法。</li></ol><p>值得一提的是，在将更改应用于 DOM 时，React 内部具有阶段性概念。 它们分开如下</p><ol><li><strong>Render：</strong> 该组件将渲染而没有任何副作用。这适用于 Pure 组件，在此阶段，React 可以暂停、中止或重新启动渲染。</li><li><strong>Pre-commit：</strong> 在组件将更改实际应用于 DOM 之前，有一段时间可以让 React 通过 <code>getSnapshotBeforeUpdate()</code> 从 DOM 中读取内容。</li><li><strong>Commit：</strong> React 与 DOM 一起工作并分别执行最终的生命周期：<code>componentDidMount()</code> 用于安装，<code>componentDidUpdate()</code> 用于更新，以及 <code>componentWillUnmount()</code> 用于卸载。</li></ol><p>React 16.3+ (或者 <a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">在线交互版本</a>)</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fac807b8490c4c11a9630a9f29e467d3~tplv-k3u1fbpfcp-zoom-1.image"></p><p>React 16.3 之前的版本：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33a918a89bdd49c08e80732f5f6af367~tplv-k3u1fbpfcp-zoom-1.image" alt="phases 16.2"></p><h2 id="34-React-生命周期有哪些？"><a href="#34-React-生命周期有哪些？" class="headerlink" title="34. React 生命周期有哪些？"></a>34. React 生命周期有哪些？</h2><p>React 16.3 以前的版本：</p><ul><li><strong>componentWillMount：</strong> 在渲染之前执行，用于根组件中的应用程序级别配置。</li><li><strong>componentDidMount：</strong> 在首次渲染之后执行，所有 AJAX 请求，DOM 或状态更新以及设置事件侦听器都应在此执行。</li><li><strong>componentWillReceiveProps：</strong> 在特定属性更新以触发状态转换时执行。</li><li><strong>shouldComponentUpdate：</strong> 确定是否要更新组件。默认情况下，它返回 <code>true</code>。如果你确定在状态或属性更新后不需要渲染组件，则可以返回 <code>false</code> 值。这是提高性能的好地方，因为如果组件收到新的 <code>props</code>，它可以防止重新渲染。</li><li><strong>componentWillUpdate：</strong> 当有属性或状态改变被<code>shouldComponentUpdate()</code> 确认并返回 <code>true</code> 时，在重新渲染组件之前执行。</li><li><strong>componentDidUpdate：</strong> 通常，它用于响应属性或状态更改来更新 DOM。</li><li><strong>componentWillUnmount：</strong> 它将用于取消任何传出的网络请求，或删除与该组件关联的所有事件侦听器。</li></ul><p>React 16.3+ 版本</p><ul><li><strong>getDerivedStateFromProps：</strong> 在调用 <code>render()</code> 之前被调用，并且在每次渲染中都会被调用。对于需要派生状态的罕见用例，这是存在的。<a href="https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html">如果您需要派生状态</a> 值得一读。</li><li><strong>componentDidMount：</strong> 在首次渲染之后执行，并且所有 AJAX 请求、DOM 或状态更新以及设置事件侦听器都应在此发生。</li><li><strong>shouldComponentUpdate：</strong> 确定是否将更新组件。默认情况下，它返回 <code>true</code>。如果你确定在状态或属性更新后不需要渲染组件，则可以返回 <code>false</code>值。这是提高性能的好地方，因为如果组件接收到新的属性，它可以防止重新渲染。</li><li><strong>getSnapshotBeforeUpdate：</strong> 在将呈现的输出提交给 DOM 之前立即执行。此方法返回的任何值都将传递到 <code>componentDidUpdate()</code> 中。 这对于从 DOM（即滚动位置）捕获信息很有用。</li><li><strong>componentDidUpdate：</strong> 通常，它用于响应属性或状态更改来更新 DOM。如果 <code>shouldComponentUpdate()</code> 返回 <code>false</code>，则不会触发。</li><li><strong>componentWillUnmount：</strong> 它将用于取消任何传出的网络请求，或删除与该组件关联的所有事件侦听器。</li></ul><h2 id="35-高阶组件是什么"><a href="#35-高阶组件是什么" class="headerlink" title="35. 高阶组件是什么"></a>35. 高阶组件是什么</h2><p>高阶组件（HOC）是接收组件并返回新组件的函数。基本上，这是从 React 的组成性质衍生出来的一种模式。</p><p>我们称它们为纯组件，因为它们可以接受任何动态提供的子组件，但是它们不会修改或复制其输入组件中的任何行为。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">EnhancedComponent</span> = <span class="title function_">higherOrderComponent</span>(<span class="title class_">WrappedComponent</span>);</span><br></pre></td></tr></table></figure><p>HOC 可以用到很多场景中：</p><ol><li>代码重用，逻辑和引导程序抽象。</li><li>渲染劫持。</li><li>状态抽象和操纵。</li><li>props 操作。</li></ol><h2 id="36-如何为-HOC-组件-创建-props-代理？"><a href="#36-如何为-HOC-组件-创建-props-代理？" class="headerlink" title="36. 如何为 HOC 组件 创建 props 代理？"></a>36. 如何为 HOC 组件 创建 props 代理？</h2><p>您可以使用属性代理模式添加或编辑传递给组件的属性，如下所示：</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">HOC</span>(<span class="params">WrappedComponent</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;New Header&#x27;</span>,</span><br><span class="line">        <span class="attr">footer</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">showFeatureX</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">showFeatureY</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; &#123;<span class="attr">...newProps</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>课后扩展：</strong></p><ul><li><a href="https://juejin.cn/post/6844903641074106381">react 高阶组件的代理模式</a></li></ul><h2 id="37-context-是什么？"><a href="#37-context-是什么？" class="headerlink" title="37. context 是什么？"></a>37. context 是什么？</h2><p><code>Context</code> 提供了一种通过组件树传递数据的方法，而不需要一层一层手动传递属性。</p><p>例如，需要由许多组件在应用程序中访问经过身份验证的用户，本地设置首选项，UI 主题等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Provider</span>, <span class="title class_">Consumer</span> &#125; = <span class="title class_">React</span>.<span class="title function_">createContext</span>(defaultValue);</span><br></pre></td></tr></table></figure><h2 id="38-什么是-children-属性？"><a href="#38-什么是-children-属性？" class="headerlink" title="38. 什么是 children 属性？"></a>38. 什么是 children 属性？</h2><p><code>Children</code> 是一个 prop（<code>this.props.children</code>），允许你将组件作为数据传递给其他组件，就像你使用的任何其他 prop 一样。放置在组件的开始标记和结束标记之间的组件树将作为 <code>children</code> 道具传递给该组件。</p><p>React API 中有许多方法可作为该属性。其中包括 <code>React.Children.map</code>、<code>React.Children.forEach</code>，<code>React.Children.count</code>、<code>React.Children.only</code> 和 <code>React.Children.toArray</code>。</p><p>children 的简单用法如下所示：</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyDiv</span> = <span class="title class_">React</span>.<span class="title function_">createClass</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">MyDiv</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#x27;Hello&#x27;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#x27;World&#x27;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">MyDiv</span>&gt;</span></span>,</span><br><span class="line">  node,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="39-React-中如何写注释？"><a href="#39-React-中如何写注释？" class="headerlink" title="39. React 中如何写注释？"></a>39. React 中如何写注释？</h2><p>React JSX 中的注释和 JavaScript 的多行注释很像，但是用大括号括起来。</p><p><strong>单行注释：</strong></p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;<span class="comment">/* 这里是单行注释 */</span>&#125;</span><br><span class="line">  &#123;<span class="string">`Welcome <span class="subst">$&#123;user&#125;</span>, let&#x27;s play React`</span>&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>多行注释：</strong></p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;<span class="comment">/* Multi-line comments for more than</span></span><br><span class="line"><span class="comment">   one line */</span>&#125;</span><br><span class="line">  &#123;<span class="string">`Welcome <span class="subst">$&#123;user&#125;</span>, let&#x27;s play React`</span>&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="40-在-constructor-中给-super-函数传递-props-的目的是什么？"><a href="#40-在-constructor-中给-super-函数传递-props-的目的是什么？" class="headerlink" title="40. 在 constructor 中给 super 函数传递 props 的目的是什么？"></a>40. 在 constructor 中给 <code>super</code> 函数传递 props 的目的是什么？</h2><p>一个子类构造器在 <code>super()</code> 方法调用之前是无法拿到 <code>this</code> 引用的。这同样也适用于 ES6 中的 sub-classes。调用 <code>super()</code> 时传递 props 的主要是为了在子类的构造器中访问 <code>this.props</code>。</p><p><strong>传递 props：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>); <span class="comment">// 打印 &#123; name: &#x27;John&#x27;, age: 42 &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不传递 props：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>); <span class="comment">// 打印 undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 但是 props 参数依然可以访问</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props); <span class="comment">// 打印 &#123; name: &#x27;John&#x27;, age: 42 &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在 constructor 之外没有影响</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>); <span class="comment">// 打印 &#123; name: &#x27;John&#x27;, age: 42 &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码片段揭示了 <code>this.props</code> 仅在构造函数中有所不同。在构造函数外部表现将是相同的。</p><p>更多信息可以参考 <a href="https://overreacted.io/zh-hans/why-do-we-write-super-props/">为什么我们要写 super(props) ？</a></p><p>大多数场景中，我们建议使用受控组件来代替表单组件。</p><h2 id="41-协调（reconciliation）是什么？"><a href="#41-协调（reconciliation）是什么？" class="headerlink" title="41. 协调（reconciliation）是什么？"></a>41. 协调（reconciliation）是什么？</h2><p>当一个组件的 props 或 state 发生变化时，React 通过比较新返回的元素和之前渲染的元素来决定是否有必要进行实际的 DOM 更新。当它们不相等时，React 将更新 DOM。这个过程被称为 _协调（reconciliation）_。</p><h2 id="42-如何用一个动态键名来设置状态？"><a href="#42-如何用一个动态键名来设置状态？" class="headerlink" title="42. 如何用一个动态键名来设置状态？"></a>42. 如何用一个动态键名来设置状态？</h2><p>如果你使用 ES6 或 Babel 转码器来转换你的 JSX 代码，那么你可以用计算属性命名完成。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleInputChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; [event.<span class="property">target</span>.<span class="property">id</span>]: event.<span class="property">target</span>.<span class="property">value</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="43-每次组件渲染时，函数被调用的常见错误是什么？"><a href="#43-每次组件渲染时，函数被调用的常见错误是什么？" class="headerlink" title="43. 每次组件渲染时，函数被调用的常见错误是什么？"></a>43. 每次组件渲染时，函数被调用的常见错误是什么？</h2><p>你需要确保在传递函数作为参数时，没有调用该函数。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 错误❌： handleClick 被调用而不是作为引用被传入</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick()&#125;</span>&gt;</span>&#123;&#x27;Click Me&#x27;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取而代之的是传递函数本身，不加圆括号。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 正确：handleClick 是作为一个引用传递的!</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>&#123;&#x27;Click Me&#x27;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="44-lazy-函数是否支持命名导出？"><a href="#44-lazy-函数是否支持命名导出？" class="headerlink" title="44. lazy 函数是否支持命名导出？"></a>44. lazy 函数是否支持命名导出？</h2><p>不，目前 <code>React.lazy</code> 函数只支持默认出口。如果你想导入被命名导出的模块，你可以创建一个中间模块，将其作为默认出口。这也保证了摇树的工作，不会拉取未使用的组件。</p><p>让我们来看看一个导出多个命名组件的组件文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MoreComponents.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">SomeComponent</span> = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">UnusedComponent</span> = <span class="comment">/* ... */</span>;</span><br></pre></td></tr></table></figure><p>并在一个中间文件 <code>IntermediateComponent.js</code> 中重新导出 <code>MoreComponents.js</code> 组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IntermediateComponent.js</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">SomeComponent</span> <span class="keyword">as</span> <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./MoreComponents.js&#x27;</span>;</span><br></pre></td></tr></table></figure><p>现在你可以使用下面的 lazy 函数导入该模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; lazy &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">SomeComponent</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./IntermediateComponent.js&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="45-为什么-React-使用-className-而不是-class-属性？"><a href="#45-为什么-React-使用-className-而不是-class-属性？" class="headerlink" title="45. 为什么 React 使用 className 而不是 class 属性？"></a>45. 为什么 React 使用 <code>className</code> 而不是 <code>class</code> 属性？</h2><p><code>class</code> 是 JavaScript 的一个关键字，而 JSX 是 JavaScript 的一个扩展。这就是为什么 React 使用 <code>className</code> 而不是 <code>class</code> 的主要原因。传递一个字符串作为 <code>className</code> prop。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&#123;</span>&#x27;<span class="attr">menu</span> <span class="attr">navigation-menu</span>&#x27;&#125;&gt;</span>&#123;&#x27;Menu&#x27;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="46-片段（fragments）是什么？"><a href="#46-片段（fragments）是什么？" class="headerlink" title="46. 片段（fragments）是什么？"></a>46. 片段（fragments）是什么？</h2><p>这是 React 中常见的模式，用于一个组件返回多个元素。片段让你可以对一个 children 的列表进行分组，而无需在 DOM 中添加额外的节点。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildA</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildB</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildC</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还有一个短语法可以用，但是很多工具不支持：</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildA</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildB</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildC</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="47-为什么片段（fragments）比-div-容器要好？"><a href="#47-为什么片段（fragments）比-div-容器要好？" class="headerlink" title="47. 为什么片段（fragments）比 div 容器要好？"></a>47. 为什么片段（fragments）比 div 容器要好？</h2><ol><li>片段的速度更快一些，并且由于没有创建额外的 DOM 节点而使用更少的内存。这只有在非常大和深的树上才会体现出真正的好处。</li><li>一些 CSS 机制，如 Flexbox 和 CSS Grid 有一个特殊的父子关系，在中间添加 div 会使其难以保持所需的布局。</li><li>DOM 检查器不那么杂乱。</li></ol><h2 id="48-什么是-React-中的传递门（Portal）？"><a href="#48-什么是-React-中的传递门（Portal）？" class="headerlink" title="48. 什么是 React 中的传递门（Portal）？"></a>48. 什么是 React 中的传递门（Portal）？</h2><p>传递门是一种推荐的方式，可以将子节点渲染到父组件的 DOM 层次结构之外的 DOM 节点中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">createPortal</span>(child, container);</span><br></pre></td></tr></table></figure><p>第一个参数是任何可渲染的 React children，比如一个元素、字符串或片段。第二个参数是一个 DOM 元素。</p><h2 id="49-什么是无状态组件"><a href="#49-什么是无状态组件" class="headerlink" title="49. 什么是无状态组件?"></a>49. 什么是无状态组件?</h2><p>如果行为是独立于其状态的，那么它可以是一个无状态组件。你可以使用函数或类来创建无状态组件。但除非你需要在你的组件中使用生命周期钩子，否则你应该选择函数组件。如果你决定在这里使用函数组件，会有很多好处；它们易于编写、理解和测试，速度稍快，而且你可以完全避免使用 <code>this</code> 关键字。</p><h2 id="50-什么是状态组件"><a href="#50-什么是状态组件" class="headerlink" title="50. 什么是状态组件?"></a>50. 什么是状态组件?</h2><p>如果一个组件的行为依赖于该组件的状态（state），那么它可以被称为有状态的组件。这些有状态的组件总是类组件，并且有一个在构造器（<code>constructor</code>）中被初始化的状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="comment">// 也可以使用类字段语法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>React 16.8 更新：</strong></p><p>Hooks 让你在不写类的情况下使用状态和其他 React 功能。</p><p>等效的函数组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// JSX</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="51-如何在-React-中对-props-进行验证？"><a href="#51-如何在-React-中对-props-进行验证？" class="headerlink" title="51. 如何在 React 中对 props 进行验证？"></a>51. 如何在 React 中对 props 进行验证？</h2><p>当应用程序运行在开发模式时，React 会自动检查我们在组件上设置的所有 props，以确保它们具有正确的类型。如果类型不正确，React 会在控制台生成警告信息。由于对性能的影响，它在生产模式中被禁用。必需 props 是用 <code>isRequired</code> 定义的。</p><p>预定义的 props 类型集合。</p><ol><li><code>PropTypes.number</code></li><li><code>PropTypes.string</code></li><li><code>PropTypes.array</code></li><li><code>PropTypes.object</code></li><li><code>PropTypes.func</code></li><li><code>PropTypes.node</code></li><li><code>PropTypes.element</code></li><li><code>PropTypes.bool</code></li><li><code>PropTypes.symbol</code></li><li><code>PropTypes.any</code></li></ol><p>我们可以为 <code>User</code> 组件定义 <code>propTypes</code>，如下所示。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>.<span class="property">isRequired</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;`Welcome, $&#123;this.props.name&#125;`&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;`Age, $&#123;this.props.age&#125;`&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：在 React v15.5 中，<code>PropTypes</code> 被从 <code>React.PropTypes</code> 移到 <code>prop-types</code>库中。</p></blockquote><p>等效的函数式组件：</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;`Welcome, $&#123;this.props.name&#125;`&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;`Age, $&#123;this.props.age&#125;`&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">User</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>.<span class="property">isRequired</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="52-React-的优势是什么？"><a href="#52-React-的优势是什么？" class="headerlink" title="52. React 的优势是什么？"></a>52. React 的优势是什么？</h2><p>以下是 React的 主要优势。</p><ol><li>通过虚拟 DOM 提高应用程序的性能。</li><li>JSX 使代码易于阅读和编写。</li><li>它在客户端和服务器端都能进行渲染（SSR）。</li><li>易于与框架（Angular, Backbone）集成，因为它只是一个视图库。</li><li>使用 Jest 等工具容易编写单元和集成测试。</li></ol><h2 id="53-React-的局限性是什么？"><a href="#53-React-的局限性是什么？" class="headerlink" title="53. React 的局限性是什么？"></a>53. React 的局限性是什么？</h2><p>除了优点之外，React 也有一些限制。</p><ol><li>React 只是一个视图库，不是一个完整的框架。</li><li>对于刚接触网络开发的初学者来说，有一个学习曲线。</li><li>将 React 整合到传统的 MVC 框架中需要一些额外的配置。</li><li>代码的复杂性随着内联模板和 JSX 的增加而增加。</li><li>太多的小组件导致了过度工程化或模板化。</li></ol><h2 id="54-什么是-React-v16-中的错误边界（Error-Boundary）？"><a href="#54-什么是-React-v16-中的错误边界（Error-Boundary）？" class="headerlink" title="54. 什么是 React v16 中的错误边界（Error Boundary）？"></a>54. 什么是 React v16 中的错误边界（Error Boundary）？</h2><p>错误边界是指在其子组件树的任何地方捕获 JavaScript 错误的组件，记录这些错误，并显示一个后备 UI ，而不是崩溃的组件树。</p><p>如果一个类组件定义了一个新的生命周期方法 <code>componentDidCatch(error, info)</code> 或 <code>static getDerivedStateFromError()</code> ，它就成为一个错误边界。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">hasError</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidCatch</span>(<span class="params">error, info</span>) &#123;</span><br><span class="line">    <span class="comment">// 你也可以把错误记录到一个错误报告服务中去</span></span><br><span class="line">    <span class="title function_">logErrorToMyService</span>(error, info)。</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 更新状态，以便下次渲染时显示回退的用户界面。</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">hasError</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">hasError</span>) &#123;</span><br><span class="line">      <span class="comment">// 你可以渲染任何自定义的回退用户界面</span></span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#x27;Something went wrong.&#x27;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">children</span>。</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后把它作为一个普通的组件使用。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">ErrorBoundary</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">MyWidget</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">ErrorBoundary</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="55-React-v15-中是如何处理错误边界的？"><a href="#55-React-v15-中是如何处理错误边界的？" class="headerlink" title="55. React v15 中是如何处理错误边界的？"></a>55. React v15 中是如何处理错误边界的？</h2><p>React v15 使用 <code>unstable_handleError</code> 方法为错误边界提供了非常基本的支持。在 React v16 中，它已经被重新命名为 <code>componentDidCatch</code>。</p><h2 id="56-静态类型检查的推荐方式是什么？"><a href="#56-静态类型检查的推荐方式是什么？" class="headerlink" title="56. 静态类型检查的推荐方式是什么？"></a>56. 静态类型检查的推荐方式是什么？</h2><p>通常我们使用 PropTypes 库（<code>React.PropTypes</code> 从 React v15.5 开始转移到 <code>prop-types</code> 包）来进行 React 应用中的类型检查。对于大型代码库，建议使用静态类型检查器，如 Flow 或 TypeScript，在编译时进行类型检查并提供自动补全功能。</p><h2 id="57-react-dom-包有什么用？"><a href="#57-react-dom-包有什么用？" class="headerlink" title="57. react-dom 包有什么用？"></a>57. <code>react-dom</code> 包有什么用？</h2><p><code>react-dom</code> 包提供了 DOM 特定的方法，可以在你的应用程序的顶层使用。大多数组件不需要使用此模块。这个包的一些方法是：</p><ol><li><code>render()</code></li><li><code>hydrate()</code></li><li><code>unmountComponentAtNode()</code></li><li><code>findDOMNode()</code></li><li><code>createPortal()</code></li></ol><h2 id="58-react-dom-的-render-方法的目的是什么？"><a href="#58-react-dom-的-render-方法的目的是什么？" class="headerlink" title="58. react-dom 的 render 方法的目的是什么？"></a>58. <code>react-dom</code> 的 render 方法的目的是什么？</h2><p>此方法用于将 React 元素渲染到提供的容器中的 DOM 中，并返回对组件的引用。如果 React 元素之前已渲染到容器中，它将对其执行更新，并且仅在必要时更改 DOM 以反映最新更改。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element, container[, callback])</span><br></pre></td></tr></table></figure><p>如果提供了可选的回调，它将在组件渲染或更新后执行。</p><h2 id="59-什么是-ReactDOMServer？"><a href="#59-什么是-ReactDOMServer？" class="headerlink" title="59. 什么是 ReactDOMServer？"></a>59. 什么是 ReactDOMServer？</h2><p><code>ReactDOMServer</code> 对象使你能够将组件呈现为静态标记（通常用于节点服务器）。该对象主要用于服务器端渲染（SSR）。以下方法可用于服务器和浏览器环境：</p><ol><li><code>renderToString()</code></li><li><code>renderToStaticMarkup()</code></li></ol><p>例如，你通常运行基于 Node 的 Web 服务器（如 Express、Hapi 或 Koa），然后调用 <code>renderToString</code> 将根组件渲染为字符串，然后将其作为响应发送。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Express</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderToString &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/server&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyPage</span> <span class="keyword">from</span> <span class="string">&#x27;./MyPage&#x27;</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">write</span>(<span class="string">&#x27;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;My Page&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">write</span>(<span class="string">&#x27;&lt;div id=&quot;content&quot;&gt;&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">write</span>(<span class="title function_">renderToString</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">MyPage</span> /&gt;</span></span>));</span><br><span class="line">  res.<span class="title function_">write</span>(<span class="string">&#x27;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="60-如何在-React-中使用-innerHTML？"><a href="#60-如何在-React-中使用-innerHTML？" class="headerlink" title="60. 如何在 React 中使用 innerHTML？"></a>60. 如何在 React 中使用 innerHTML？</h2><p><code>dangerouslySetInnerHTML</code> 属性是 React 在浏览器 DOM 中使用 <code>innerHTML</code> 的替代品。就像 <code>innerHTML</code> 一样，考虑到跨站点脚本 (XSS) 攻击，使用此属性是有风险的。你只需要传递一个 <code>__html</code> 对象作为键和 HTML 文本作为值。</p><p>在这个例子中，MyComponent 使用 <code>dangerouslySetInnerHTML</code> 属性来设置 HTML 标记：</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createMarkup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">__html</span>: <span class="string">&#x27;First &amp;middot; Second&#x27;</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;createMarkup()&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="61-如何在-React-使用样式？"><a href="#61-如何在-React-使用样式？" class="headerlink" title="61. 如何在 React 使用样式？"></a>61. 如何在 React 使用样式？</h2><p><code>style</code> 属性接受一个小驼峰命名法属性的 JavaScript 对象，而不是一个 CSS 字符串。这与 DOM 风格的 JavaScript 属性一致，更有效率，并能防止 XSS 安全漏洞。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> divStyle = &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">  <span class="attr">backgroundImage</span>: <span class="string">`url(<span class="subst">$&#123;imgUrl&#125;</span>)`</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">HelloWorldComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;divStyle&#125;</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>样式键名是符合驼峰命名法的，以便与在 JavaScript 中访问 DOM 节点的属性相一致（例如 <code>node.style.backgroundImage</code>）。</p><h2 id="62-事件在-React-中有何不同？"><a href="#62-事件在-React-中有何不同？" class="headerlink" title="62. 事件在 React 中有何不同？"></a>62. 事件在 React 中有何不同？</h2><p>Handling events in React elements has some syntactic differences:</p><p>在 React 元素上处理事件有一些语法上的不同：</p><ol><li>React 事件处理程序使用小驼峰命名，而不是小写。</li><li>使用 JSX，你传递一个函数作为事件处理程序，而不是一个字符串。</li></ol><h2 id="63-如果你在构造函数中使用-setState-，会发生什么？"><a href="#63-如果你在构造函数中使用-setState-，会发生什么？" class="headerlink" title="63. 如果你在构造函数中使用 setState()，会发生什么？"></a>63. 如果你在构造函数中使用 <code>setState()</code>，会发生什么？</h2><p>当你使用 <code>setState()</code> 时，除了分配给对象的状态外，React 还重新渲染组件和它的所有子组件。你会得到这样的错误：只能更新一个已挂载或正在挂载的组件。所以我们需要使用 <code>this.state</code> 来初始化构造函数中的变量。</p><h2 id="64-索引作为键的影响是什么？"><a href="#64-索引作为键的影响是什么？" class="headerlink" title="64. 索引作为键的影响是什么？"></a>64. 索引作为键的影响是什么？</h2><p>键应该是稳定的、可预测的和唯一的，这样 React 就可以跟踪元素。</p><p>在下面的代码片段中，每个元素的键都是基于索引的，而不是与被表示的数据相联系。这限制了 React 可以做的优化。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  todos.<span class="title function_">map</span>(<span class="function">(<span class="params">todo, index</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Todo</span> &#123;<span class="attr">...todo</span>&#125; <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> /&gt;</span></span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你使用元素数据作为唯一键，假设 <code>todo.id</code> 在这个列表中是唯一的，并且是稳定的，React 将能够对元素进行重新排序，而不需要像以前那样重新计算它们。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  todos.<span class="title function_">map</span>(<span class="function"><span class="params">todo</span> =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Todo</span> &#123;<span class="attr">...todo</span>&#125; <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span> /&gt;</span></span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="65-在-componentWillMount-方法中使用-setState-真的好吗"><a href="#65-在-componentWillMount-方法中使用-setState-真的好吗" class="headerlink" title="65. 在 componentWillMount() 方法中使用 setState 真的好吗?"></a>65. 在 <code>componentWillMount()</code> 方法中使用 <code>setState</code> 真的好吗?</h2><p>是的，在 <code>componentWillMount()</code> 方法中使用 <code>setState()</code> 是安全的。但同时，建议避免在<code>componentWillMount()</code> 生命周期方法中进行异步初始化。<code>componentWillMount()</code> 在挂载发生前立即被调用。它在 <code>render()</code> 之前被调用，因此在这个方法中设置状态不会触发重新渲染。避免在这个方法中引入任何副作用或订阅。我们需要确保组件初始化的异步调用发生在 <code>componentDidMount()</code> 而不是 <code>componentWillMount()</code>。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  axios.<span class="title function_">get</span>(<span class="string">`api/todos`</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">messages</span>: [...result.<span class="property">data</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="66-如果你在初始状态下使用-props，会发生什么？"><a href="#66-如果你在初始状态下使用-props，会发生什么？" class="headerlink" title="66. 如果你在初始状态下使用 props，会发生什么？"></a>66. 如果你在初始状态下使用 props，会发生什么？</h2><p>如果组件上的 props 被改变而组件没有被刷新，新的 props 值将永远不会被显示，因为构造函数永远不会更新组件的当前状态。来自 props 的状态初始化只在组件第一次被创建时运行。</p><p>下面这个组件就不会显示更新的输入值。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">records</span>: [],</span><br><span class="line">      <span class="attr">inputValue</span>: <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">inputValue</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.inputValue&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 render 方法中使用 props 将更新数值。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">record</span>: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.inputValue&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="67-你如何有条件地渲染组件？"><a href="#67-你如何有条件地渲染组件？" class="headerlink" title="67. 你如何有条件地渲染组件？"></a>67. 你如何有条件地渲染组件？</h2><p>在某些情况下，你想根据一些状态来渲染不同的组件。JSX 不渲染 <code>false</code> 或 <code>undefined</code>，所以你可以使用条件性短路来渲染你的组件的某一部分，只有当某个条件为真时。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">MyComponent</span> = (<span class="params">&#123; name, address &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;address &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;address&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>如果你需要一个 <code>if-else</code> 条件，则使用三元运算符。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">MyComponent</span> = (<span class="params">&#123; name, address &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;address ? <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;address&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> : <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#x27;Address is not available&#x27;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="68-为什么我们在-DOM-元素上传递-props-时需要谨慎？"><a href="#68-为什么我们在-DOM-元素上传递-props-时需要谨慎？" class="headerlink" title="68. 为什么我们在 DOM 元素上传递 props 时需要谨慎？"></a>68. 为什么我们在 DOM 元素上传递 props 时需要谨慎？</h2><p>当我们传递 props 时，我们会遇到添加未知的 HTML 属性的风险，这是一个不好的做法。相反，我们可以使用带有 <code>...rest</code> 操作符的 prop 解构，所以它将只添加需要的 prop。</p><p>比如说。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">ComponentA</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ComponentB</span> <span class="attr">isDisplay</span>=<span class="string">&#123;true&#125;</span> <span class="attr">className</span>=<span class="string">&#123;</span>&#x27;<span class="attr">componentStyle</span>&#x27;&#125; /&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ComponentB</span> = (<span class="params">&#123; isDisplay, ...domProps &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> &#123;<span class="attr">...domProps</span>&#125;&gt;</span>&#123;&#x27;ComponentB&#x27;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="69-如何在-React-中使用装饰器？"><a href="#69-如何在-React-中使用装饰器？" class="headerlink" title="69. 如何在 React 中使用装饰器？"></a>69. 如何在 React 中使用装饰器？</h2><p>你可以对你的类组件进行装饰，这与将组件传入一个函数是一样的。<strong>装饰器</strong>是修改组件功能的灵活和可读的方式。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title function_">setTitle</span>(<span class="string">&#x27;Profile&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Profile</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">//....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">title 是一个字符串，将被设置为文档标题。WrappedComponent 是我们的装饰器在以下情况下会收到的东西直接放在一个组件类上面时，我们的装饰器会收到这样的信息，如上面的例子所示</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setTitle</span> = title =&gt; <span class="function"><span class="params">WrappedComponent</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">React</span>.<span class="property">Component</span> &#123;</span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">title</span> = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 装饰器是一个没有进入 ES7 的功能，但目前是一个第二阶段的建议。</p><h2 id="70-如何-memo-化一个组件？"><a href="#70-如何-memo-化一个组件？" class="headerlink" title="70. 如何 memo 化一个组件？"></a>70. 如何 memo 化一个组件？</h2><p>有一些可用的缓存库，可以用于函数组件。</p><p>例如，<code>moize</code> 库可以在另一个组件中对组件进行 memo 化。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moize <span class="keyword">from</span> <span class="string">&#x27;moize&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Component</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Component&#x27;</span>; <span class="comment">// 本模块导出一个非 memo 组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MemoizedFoo</span> = moize.<span class="title function_">react</span>(<span class="title class_">Component</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Consumer</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#x27;I will memoize the following entry:&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">MemoizedFoo</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>更新：</strong> 从 React v16.6.0 开始，我们有一个 <code>React.memo</code>。它提供了一个更高阶的组件，除非 props 发生变化，否则会将组件缓存。要使用它，只需在使用前用 <code>React.memo</code> 包住组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MemoComponent</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="keyword">function</span> <span class="title function_">MemoComponent</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="comment">/* render using props */</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">MyFunctionComponent</span>);</span><br></pre></td></tr></table></figure><h2 id="71-你如何实现服务器端渲染或SSR？"><a href="#71-你如何实现服务器端渲染或SSR？" class="headerlink" title="71. 你如何实现服务器端渲染或SSR？"></a>71. 你如何实现服务器端渲染或SSR？</h2><p>React 已经具备了在 Nod e服务器上处理渲染的能力。有一个特殊版本的 DOM 渲染器，它与客户端的模式相同。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOMServer</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/server&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOMServer</span>.<span class="title function_">renderToString</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)。</span><br></pre></td></tr></table></figure><p>这个方法将把常规的 HTML 输出为一个字符串，然后可以作为服务器响应的一部分放在页面主体内。在客户端，React 检测到预渲染的内容，并无缝地衔接该内容。</p><h2 id="72-如何在-React-中启用生产模式？"><a href="#72-如何在-React-中启用生产模式？" class="headerlink" title="72. 如何在 React 中启用生产模式？"></a>72. 如何在 React 中启用生产模式？</h2><p>你应该使用 Webpack 的 <code>DefinePlugin</code> 方法来设置 <code>NODE_ENV</code> 为 <code>production</code>，通过它来剥离诸如 propType 验证和额外警告的东西。除此之外，如果你对代码进行最小化处理，例如 Uglify 的无效代码消除法，剥离出只用于开发的代码和注释，这将极大地减少你的包的大小。</p><h2 id="73-什么是-CRA-以及它的好处？"><a href="#73-什么是-CRA-以及它的好处？" class="headerlink" title="73. 什么是 CRA 以及它的好处？"></a>73. 什么是 CRA 以及它的好处？</h2><p><code>create-react-app</code> CLI 工具允许你快速创建和运行React应用程序，无需配置步骤。</p><p>让我们使用 CRA 创建 Todo 应用程序。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install -g create-react-app</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建新项目</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">create-react-app todo-app</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> todo-app</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建、测试、运行</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm run build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm run <span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm start</span></span><br></pre></td></tr></table></figure><p>它包括我们建立一个 React 应用程序所需要的一切。</p><ol><li>支持 React、JSX、ES6 和 Flow 语法。</li><li>超越 ES6 的语言额外功能，如对象传播操作者。</li><li>自动前缀的 CSS，所以你不需要 <code>-webkit-</code> 或其他前缀。</li><li>一个快速的交互式单元测试运行器，内置支持覆盖率报告。</li><li>一个实时的开发服务器，对常见的错误发出警告。</li><li>一个构建脚本，用于捆绑 JS、CSS 和图片，并提供哈希和源码图。</li></ol><h2 id="74-安装中的生命周期方法的顺序是什么？"><a href="#74-安装中的生命周期方法的顺序是什么？" class="headerlink" title="74. 安装中的生命周期方法的顺序是什么？"></a>74. 安装中的生命周期方法的顺序是什么？</h2><p>当一个组件的实例被创建并插入到 DOM 中时，生命周期方法按以下顺序被调用。</p><ol><li><code>constructor()</code></li><li><code>static getDerivedStateFromProps()</code></li><li><code>render()</code></li><li><code>componentDidMount()</code></li></ol><h2 id="75-在-React-v16-中，有哪些生命周期方法将被废弃？"><a href="#75-在-React-v16-中，有哪些生命周期方法将被废弃？" class="headerlink" title="75. 在 React v16 中，有哪些生命周期方法将被废弃？"></a>75. 在 React v16 中，有哪些生命周期方法将被废弃？</h2><p>以下生命周期方法将是不安全的编码做法，在异步渲染中会出现更多问题。</p><ol><li><code>componentWillMount()</code></li><li><code>componentWillReceiveProps()</code></li><li><code>componentWillUpdate()</code></li></ol><p>从 React v16.3 开始，这些方法被别名为 <code>UNSAFE_</code> 前缀，未加前缀的版本将在 React v17 中被移除。</p><h2 id="76-getDerivedStateFromProps-生命周期方法的目的是什么？"><a href="#76-getDerivedStateFromProps-生命周期方法的目的是什么？" class="headerlink" title="76. getDerivedStateFromProps() 生命周期方法的目的是什么？"></a>76. <code>getDerivedStateFromProps()</code> 生命周期方法的目的是什么？</h2><p>新的静态的 <code>getDerivedStateFromProps()</code> 生命周期方法在一个组件实例化后以及重新渲染前被调用。它可以返回一个对象来更新状态，也可以返回 <code>null</code> 来表示新的 props 不需要任何状态更新。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">props, state</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个生命周期方法与 <code>componentDidUpdate()</code> 一起涵盖了 <code>componentWillReceiveProps()</code> 的所有用例。</p><h2 id="77-getSnapshotBeforeUpdate-生命周期方法的目的是什么？"><a href="#77-getSnapshotBeforeUpdate-生命周期方法的目的是什么？" class="headerlink" title="77. getSnapshotBeforeUpdate() 生命周期方法的目的是什么？"></a>77. <code>getSnapshotBeforeUpdate()</code> 生命周期方法的目的是什么？</h2><p>新的 <code>getSnapshotBeforeUpdate()</code> 生命周期方法会在 DOM 更新前被调用。这个方法的返回值将作为第三个参数传递给 <code>componentDidUpdate()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">getSnapshotBeforeUpdate</span>(<span class="params">prevProps, prevState</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个生命周期方法与 <code>componentDidUpdate()</code> 一起涵盖了 <code>componentWillUpdate()</code> 的所有用例。</p><h2 id="78-Hooks-是否取代了渲染-props-和高阶组件？"><a href="#78-Hooks-是否取代了渲染-props-和高阶组件？" class="headerlink" title="78. Hooks 是否取代了渲染 props 和高阶组件？"></a>78. Hooks 是否取代了渲染 props 和高阶组件？</h2><p>渲染 props 和高阶组件都只渲染一个 children，但在大多数情况下，Hooks 是一种更简单的方式，通过减少树中的嵌套来达到这个目的。</p><h2 id="79-推荐用什么方式来命名组件？"><a href="#79-推荐用什么方式来命名组件？" class="headerlink" title="79. 推荐用什么方式来命名组件？"></a>79. 推荐用什么方式来命名组件？</h2><p>建议通过引用来命名组件，而不是使用 <code>displayName</code>。</p><p>使用 <code>displayName</code> 来命名组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">React</span>.<span class="title function_">createClass</span>(&#123;</span><br><span class="line">  <span class="attr">displayName</span>: <span class="string">&#x27;TodoApp&#x27;</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>推荐的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">TodoApp</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="80-建议在组件类中方法的排序是什么？"><a href="#80-建议在组件类中方法的排序是什么？" class="headerlink" title="80. 建议在组件类中方法的排序是什么？"></a>80. 建议在组件类中方法的排序是什么？</h2><p>建议从安装到渲染阶段的方法的排序。</p><ol><li><code>static</code> 方法</li><li><code>constructor()</code></li><li><code>getChildContext()</code></li><li><code>componentWillMount()</code></li><li><code>componentDidMount()</code></li><li><code>componentWillReceiveProps()</code></li><li><code>shouldComponentUpdate()</code></li><li><code>componentWillUpdate()</code></li><li><code>componentDidUpdate()</code></li><li><code>componentWillUnmount()</code></li><li>点击处理程序或事件处理程序，如 <code>onClickSubmit()</code> 或 <code>onChangeDescription()</code></li><li>渲染的 getter 方法，如 <code>getSelectReason()</code> 或 <code>getFooterContent()</code></li><li>可选的渲染方法，如 <code>renderNavigation()</code> 或 <code>renderProfilePicture()</code></li><li>render()</li></ol><h2 id="81-什么是切换组件？"><a href="#81-什么是切换组件？" class="headerlink" title="81. 什么是切换组件？"></a>81. 什么是切换组件？</h2><p>切换组件是一个渲染许多组件中的一个组件。我们需要使用对象来将 props 值映射到组件。</p><p>例如，一个切换组件可以根据 <code>page</code> props 显示不同的页面。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">HomePage</span> <span class="keyword">from</span> <span class="string">&#x27;./HomePage&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AboutPage</span> <span class="keyword">from</span> <span class="string">&#x27;./AboutPage&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ServicesPage</span> <span class="keyword">from</span> <span class="string">&#x27;./ServicesPage&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ContactPage</span> <span class="keyword">from</span> <span class="string">&#x27;./ContactPage&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PAGES</span> = &#123;</span><br><span class="line">  <span class="attr">home</span>: <span class="title class_">HomePage</span>,</span><br><span class="line">  <span class="attr">about</span>: <span class="title class_">AboutPage</span>,</span><br><span class="line">  <span class="attr">services</span>: <span class="title class_">ServicesPage</span>,</span><br><span class="line">  <span class="attr">contact</span>: <span class="title class_">ContactPage</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Page</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Handler</span> = <span class="variable constant_">PAGES</span>[props.<span class="property">page</span>] || <span class="title class_">ContactPage</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Handler</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PAGES 对象的键可以在 props 类型中使用，以捕捉开发时间错误。</span></span><br><span class="line"><span class="title class_">Page</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">page</span>: <span class="title class_">PropTypes</span>.<span class="title function_">oneOf</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable constant_">PAGES</span>)).<span class="property">isRequired</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="82-为什么我们需要向-setState-传递一个函数？"><a href="#82-为什么我们需要向-setState-传递一个函数？" class="headerlink" title="82. 为什么我们需要向 setState() 传递一个函数？"></a>82. 为什么我们需要向 <code>setState()</code> 传递一个函数？</h2><p>这背后的原因是，<code>setState()</code> 是一个异步操作。出于性能的考虑，React 会对状态变化进行批处理，所以在调用 <code>setState()</code> 后，状态可能不会立即发生变化。这意味着你在调用 <code>setState()</code> 时不应该依赖当前的状态，因为你不能确定这个状态会是什么。解决办法是将一个函数传递给 <code>setState()</code>，并将之前的状态作为参数。通过这样做，你可以避免由于 <code>setState()</code> 的异步性而导致用户在访问时获得旧的状态值的问题。</p><p>假设初始计数值为 0。在连续三次递增操作后，该值将只递增一个。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 this.state.count === 0</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line"><span class="comment">// this.state.count === 1，而不是 3</span></span><br></pre></td></tr></table></figure><p>如果我们给 <code>setState()</code> 传递一个函数，计数就会被正确地递增。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">count</span>: prevState.<span class="property">count</span> + props.<span class="property">increment</span>,</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">// this.state.count === 3</span></span><br></pre></td></tr></table></figure><h2 id="83-为什么在-setState-中首选函数而不是对象？"><a href="#83-为什么在-setState-中首选函数而不是对象？" class="headerlink" title="83. 为什么在 setState() 中首选函数而不是对象？"></a>83. 为什么在 <code>setState()</code> 中首选函数而不是对象？</h2><p>React 可以将多个 <code>setState()</code> 的调用批量化为一次更新，以提高性能。因为 <code>this.props</code> 和 <code>this.state</code> 可能被异步更新，你不应该依赖它们的值来计算下一个状态。</p><p>这个计数器的例子将无法按预期更新。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误❌</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">  <span class="attr">counter</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">counter</span> + <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">increment</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>首选的方法是用函数而不是对象调用 <code>setState()</code>。该函数将接收先前的状态作为第一个参数，并将应用更新时的 props 作为第二个参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确✅</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">counter</span>: prevState.<span class="property">counter</span> + props.<span class="property">increment</span>,</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h2 id="84-React-中的严格模式是什么？"><a href="#84-React-中的严格模式是什么？" class="headerlink" title="84. React 中的严格模式是什么？"></a>84. React 中的严格模式是什么？</h2><p><code>React.StrictMode</code> 是一个有用的组件，用于暴露应用程序中的潜在问题。就像 <code>&lt;Fragment&gt;</code>，<code>&lt;StrictMode&gt;</code>不会渲染任何额外的 DOM 元素。它为其后代激活了额外的检查和警告。这些检查只适用于开发模式。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ExampleApplication</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ComponentOne</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ComponentTwo</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，严格模式检查只适用于 <code>&lt;ComponentOne&gt;</code> 和 <code>&lt;ComponentTwo&gt;</code> 组件。</p><h2 id="85-为什么-isMounted-是一个反模式，正确的解决方案是什么？"><a href="#85-为什么-isMounted-是一个反模式，正确的解决方案是什么？" class="headerlink" title="85. 为什么 isMounted() 是一个反模式，正确的解决方案是什么？"></a>85. 为什么 <code>isMounted()</code> 是一个反模式，正确的解决方案是什么？</h2><p><code>isMounted()</code> 的主要用例是避免在组件被卸载后调用 <code>setState()</code>，因为它会发出警告。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isMounted</span>()) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;...&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用 <code>setState()</code> 之前检查 <code>isMounted()</code> 确实可以消除警告，但这也违背了警告的目的。使用 <code>isMounted()</code> 是一种代码异味，因为你检查的唯一原因是你认为你可能在组件卸载后还持有一个引用。</p><p>一个最佳的解决方案是找到在组件卸载后可能调用 <code>setState()</code> 的地方，并修复它们。这种情况通常是由于回调引起的，当一个组件在等待一些数据时，在数据到达之前被卸载。理想情况下，任何回调都应该在 <code>componentWillUnmount()</code> 中取消（在解除挂载之前）。</p><blockquote><p>代码异味 (Code smell)：程序开发领域，代码中的任何可能导致深层次问题的症状都可以叫做代码异味。 通常，在对代码做简短的反馈迭代时，代码异味会暴露出一些深层次的问题，这里的反馈迭代，是指以一种小范围的、可控的方式重构代码。</p></blockquote><h2 id="86-React-中支持哪些指针事件？"><a href="#86-React-中支持哪些指针事件？" class="headerlink" title="86. React 中支持哪些指针事件？"></a>86. React 中支持哪些指针事件？</h2><p>指针事件提供了一个处理所有输入事件的统一方法。在过去，我们有一个鼠标和各自的事件监听器来处理它们，但现在我们有许多设备与拥有鼠标不相关，如带有触摸表面的手机或笔。我们需要记住，这些事件只能在支持 Pointer Events 规范的浏览器中工作。</p><p>以下事件类型现在在 React DOM 中可用。</p><ol><li><code>onPointerDown</code></li><li><code>onPointerMove</code></li><li><code>onPointerUp</code></li><li><code>onPointerCancel</code></li><li><code>onGotPointerCapture</code></li><li><code>onLostPointerCapture</code></li><li><code>onPointerEnter</code></li><li><code>onPointerLeave</code></li><li><code>onPointerOver</code></li><li><code>onPointerOut</code></li></ol><h2 id="87-为什么组件名称要以大写字母开头？"><a href="#87-为什么组件名称要以大写字母开头？" class="headerlink" title="87. 为什么组件名称要以大写字母开头？"></a>87. 为什么组件名称要以大写字母开头？</h2><p>如果你使用 JSX 渲染你的组件，该组件的名称必须以大写字母开头，否则 React 将抛出一个错误，即未识别的标签。这个惯例是因为只有 HTML 元素和 SVG 标签可以以小写字母开头。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SomeComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="comment">// 掘金不止，代码不停</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以定义名称以小写字母开头的组件类，但当它被导入时，它应该是大写字母。在这里，小写就可以了。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> myComponent;</span><br></pre></td></tr></table></figure><p>而当导入另一个文件时，它应该以大写字母开始。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./MyComponent&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="关于-React-组件的命名，有哪些例外情况？"><a href="#关于-React-组件的命名，有哪些例外情况？" class="headerlink" title="关于 React 组件的命名，有哪些例外情况？"></a>关于 React 组件的命名，有哪些例外情况？</h3><p>组件名称应以大写字母开头，但这一惯例也有少数例外。带点的小写标签名（属性访问器）仍被认为是有效的组件名。</p><p>例如，下面的标签可以被编译成一个有效的组件。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">obj.component</span> /&gt;</span></span> <span class="comment">// `React.createElement(obj.component)`</span></span><br><span class="line">   )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="88-React-v16-中支持自定义-DOM-属性吗？"><a href="#88-React-v16-中支持自定义-DOM-属性吗？" class="headerlink" title="88. React v16 中支持自定义 DOM 属性吗？"></a>88. React v16 中支持自定义 DOM 属性吗？</h2><p>是的，在过去，React 习惯于忽略未知的 DOM 属性。如果你写的 JSX 有一个 React 不认识的属性，React 会直接跳过它。</p><p>例如，让我们看一下下面的属性。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div mycustomattribute=&#123;<span class="string">&#x27;something&#x27;</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p>用 React v15 渲染一个空的 div 到 DOM 上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>在 React v16 中，任何未知的属性最终都会出现在 DOM 中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">mycustomattribute</span>=<span class="string">&quot;something&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这对于提供浏览器特定的非标准属性，尝试新的 DOM API，以及与有主见的第三方库集成是非常有用的。</p><h2 id="89-constructor-和-getInitialState-的区别是什么？"><a href="#89-constructor-和-getInitialState-的区别是什么？" class="headerlink" title="89. constructor 和 getInitialState 的区别是什么？"></a>89. constructor 和 getInitialState 的区别是什么？</h2><p>当使用 ES6 类时，你应该在构造函数中初始化状态，而当使用 <code>React.createClass()</code> 时，应该在 <code>getInitialState()</code> 方法中初始化状态。</p><p><strong>使用 ES6 类：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="comment">/* 初始化状态 */</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用 <code>React.createClass()</code>：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyComponent</span> = <span class="title class_">React</span>.<span class="title function_">createClass</span>(&#123;</span><br><span class="line">  <span class="title function_">getInitialState</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">/* 初始化状态 */</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <code>React.createClass()</code> 在 React v16 中已被废弃并删除。请使用普通的 JavaScript 类来代替。</p><h2 id="90-你能在不调用-setState-的情况下强制一个组件重新渲染吗？"><a href="#90-你能在不调用-setState-的情况下强制一个组件重新渲染吗？" class="headerlink" title="90. 你能在不调用 setState 的情况下强制一个组件重新渲染吗？"></a>90. 你能在不调用 setState 的情况下强制一个组件重新渲染吗？</h2><p>默认情况下，当你的组件的状态或 props 改变时，你的组件会重新渲染。如果你的 <code>render()</code> 方法依赖于其他数据，你可以通过调用 <code>forceUpdate()</code> 告诉 React 该组件需要重新渲染。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">component.<span class="title function_">forceUpdate</span>(callback);</span><br></pre></td></tr></table></figure><p>建议避免使用 <code>forceUpdate()</code>，只在 <code>render()</code> 中读取<code>this.props</code> 和 <code>this.state</code>。</p><h2 id="91-在-React-中使用-ES6-类的，super-和-super-props-之间有什么区别？"><a href="#91-在-React-中使用-ES6-类的，super-和-super-props-之间有什么区别？" class="headerlink" title="91. 在  React 中使用 ES6 类的，super() 和 super(props) 之间有什么区别？"></a>91. 在  React 中使用 ES6 类的，<code>super()</code> 和 <code>super(props)</code> 之间有什么区别？</h2><p>当你想在 <code>constructor()</code> 中访问 <code>this.props</code> 时，你应该把 props 传给 <code>super()</code> 方法。</p><p><strong>使用 <code>super(props)</code>：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>); <span class="comment">// &#123; name: &#x27;John&#x27;, ... &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用 <code>super()</code>：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>); <span class="comment">// undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>constructor()</code> 之外，两者都会显示相同的 <code>this.props</code> 的值。</p><h2 id="92-如何在-JSX-内循环？"><a href="#92-如何在-JSX-内循环？" class="headerlink" title="92. 如何在 JSX 内循环？"></a>92. 如何在 JSX 内循环？</h2><p>你可以简单地使用 <code>Array.prototype.map</code> 与 ES6 箭头函数语法。</p><p>例如，对象的 <code>items</code> 数组被映射成组件的数组。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;tbody&gt;</span><br><span class="line">  &#123;items.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">SomeComponent</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span> <span class="attr">name</span>=<span class="string">&#123;item.name&#125;</span> /&gt;</span></span></span><br><span class="line">  ))&#125;</span><br><span class="line">&lt;/tbody&gt;</span><br></pre></td></tr></table></figure><p>但你不能用 <code>for</code> 循环来迭代。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;tbody&gt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">SomeComponent</span> <span class="attr">key</span>=<span class="string">&#123;items[i].id&#125;</span> <span class="attr">name</span>=<span class="string">&#123;items[i].name&#125;</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/tbody&gt;</span><br></pre></td></tr></table></figure><p>这是因为 JSX 标签被转换为函数调用，而且你不能在表达式中使用语句。这可能会改变，因为 <code>do</code> 表达式是第一阶段的建议。</p><h2 id="93-你如何在属性引号中访问-props？"><a href="#93-你如何在属性引号中访问-props？" class="headerlink" title="93. 你如何在属性引号中访问 props？"></a>93. 你如何在属性引号中访问 props？</h2><p>React（或 JSX）不支持属性值内的变量插值。下面的表示方法就不能用了。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img className=<span class="string">&quot;image&quot;</span> src=<span class="string">&quot;images/&#123;this.props.image&#125;&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>但你可以把任何 JS 表达式放在大括号内作为整个属性值。所以下面的表达式是有效的。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img className=<span class="string">&quot;image&quot;</span> src=&#123;<span class="string">&#x27;images/&#x27;</span> + <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">image</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p>使用模板字符串也可以。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img className=<span class="string">&quot;image&quot;</span> src=&#123;<span class="string">`images/<span class="subst">$&#123;<span class="variable language_">this</span>.props.image&#125;</span>`</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><h2 id="94-什么是带-shape-的-React-原型数组？"><a href="#94-什么是带-shape-的-React-原型数组？" class="headerlink" title="94. 什么是带 shape 的 React 原型数组？"></a>94. 什么是带 shape 的 React 原型数组？</h2><p>如果你想把一个对象数组传递给一个具有特定 shape 的组件，那么使用 <code>React.PropTypes.shape()</code> 作为 <code>React.PropTypes.arrayOf()</code> 的一个参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactComponent</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">arrayWithShape</span>: <span class="title class_">React</span>.<span class="property">PropTypes</span>.<span class="title function_">arrayOf</span>(</span><br><span class="line">    <span class="title class_">React</span>.<span class="property">PropTypes</span>.<span class="title function_">shape</span>(&#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="title class_">React</span>.<span class="property">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,</span><br><span class="line">      <span class="attr">fontSize</span>: <span class="title class_">React</span>.<span class="property">PropTypes</span>.<span class="property">number</span>.<span class="property">isRequired</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ).<span class="property">isRequired</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="95-如何有条件地应用类属性？"><a href="#95-如何有条件地应用类属性？" class="headerlink" title="95. 如何有条件地应用类属性？"></a>95. 如何有条件地应用类属性？</h2><p>你不应该在引号内使用大括号，因为它将被计算为一个字符串。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;btn-panel &#123;this.props.visible ? &#x27;show&#x27; : &#x27;hidden&#x27;&#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>相反，你需要把大括号移到外面（别忘了在类名之间包括空格）。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&#123;<span class="string">&#x27;btn-panel &#x27;</span> + (<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">visible</span> ? <span class="string">&#x27;show&#x27;</span> : <span class="string">&#x27;hidden&#x27;</span>)&#125;&gt;</span><br></pre></td></tr></table></figure><p>模板字符串也可以使用。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&#123;<span class="string">`btn-panel <span class="subst">$&#123;<span class="variable language_">this</span>.props.visible ? <span class="string">&#x27;show&#x27;</span> : <span class="string">&#x27;hidden&#x27;</span>&#125;</span>`</span>&#125;&gt;</span><br></pre></td></tr></table></figure><h2 id="96-React-和-ReactDOM-之间有什么区别？"><a href="#96-React-和-ReactDOM-之间有什么区别？" class="headerlink" title="96. React 和 ReactDOM 之间有什么区别？"></a>96. React 和 ReactDOM 之间有什么区别？</h2><p><code>react</code> 包包含 <code>React.createElement()</code>、<code>React.Component</code>、<code>React.Children</code>, 以及其他与元素和组件类相关的帮助函数。你可以把这些看作是你构建组件所需要的同构或通用助手。<code>react-dom</code> 包包含 <code>ReactDOM.render()</code>，在 <code>react-dom/server</code> 中，我们有 <code>ReactDOMServer.renderToString()</code> 和 <code>ReactDOMServer.renderToStaticMarkup()</code> 的服务器端渲染支持。</p><h2 id="97-为什么-ReactDOM-要从-React-中分离出来？"><a href="#97-为什么-ReactDOM-要从-React-中分离出来？" class="headerlink" title="97. 为什么 ReactDOM 要从 React 中分离出来？"></a>97. 为什么 ReactDOM 要从 React 中分离出来？</h2><p>React 团队致力于将所有与 DOM 相关的功能提取到一个单独的库中，称为 ReactDOM。React v0.14 是第一个分割库的版本。通过查看一些包，<code>react-native</code>、<code>react-art</code>、<code>react-canvas</code>和 <code>react-three</code>，已经很清楚，React 的优秀和本质与浏览器或 DOM 无关。</p><p>为了建立更多 React 可以渲染的环境，React 团队计划将主 React 包分成两个：<code>react</code> 和 <code>react-dom</code>。这就为编写可以在网络版 React 和 React Native 之间共享的组件铺平了道路。</p><h2 id="98-如何使用-React-label-元素？"><a href="#98-如何使用-React-label-元素？" class="headerlink" title="98. 如何使用 React label 元素？"></a>98. 如何使用 React label 元素？</h2><p>如果你试图用标准的 <code>for</code> 属性渲染一个绑定在文本输入上的 <code>&lt;label&gt;</code> 元素，那么它产生的 HTML 会缺少该属性，并在控制台打印出警告。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;label <span class="keyword">for</span>=&#123;<span class="string">&#x27;user&#x27;</span>&#125;&gt;&#123;<span class="string">&#x27;User&#x27;</span>&#125;&lt;/label&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#123;</span>&#x27;<span class="attr">text</span>&#x27;&#125; <span class="attr">id</span>=<span class="string">&#123;</span>&#x27;<span class="attr">user</span>&#x27;&#125; /&gt;</span></span></span><br></pre></td></tr></table></figure><p>由于 <code>for</code> 在 JavaScript 中是一个保留关键字，我们可以使用 <code>htmlFor</code> 代替。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;label htmlFor=&#123;<span class="string">&#x27;user&#x27;</span>&#125;&gt;&#123;<span class="string">&#x27;User&#x27;</span>&#125;&lt;/label&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#123;</span>&#x27;<span class="attr">text</span>&#x27;&#125; <span class="attr">id</span>=<span class="string">&#123;</span>&#x27;<span class="attr">user</span>&#x27;&#125; /&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="99-如何组合多个内联样式对象？"><a href="#99-如何组合多个内联样式对象？" class="headerlink" title="99. 如何组合多个内联样式对象？"></a>99. 如何组合多个内联样式对象？</h2><p>你可以在常规 React 中使用展开语法。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button style=&#123;&#123; ...styles.<span class="property">panel</span>.<span class="property">button</span>, ...styles.<span class="property">panel</span>.<span class="property">submitButton</span> &#125;&#125;&gt;</span><br><span class="line">  &#123;<span class="string">&#x27;Submit&#x27;</span>&#125;</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>如果你使用的是 React Native，那么你可以使用数组符号。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button style=&#123;[styles.<span class="property">panel</span>.<span class="property">button</span>, styles.<span class="property">panel</span>.<span class="property">submitButton</span>]&#125;&gt;</span><br><span class="line">  &#123;<span class="string">&#x27;Submit&#x27;</span>&#125;</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><h2 id="100-如何在浏览器调整大小时重新渲染视图？"><a href="#100-如何在浏览器调整大小时重新渲染视图？" class="headerlink" title="100. 如何在浏览器调整大小时重新渲染视图？"></a>100. 如何在浏览器调整大小时重新渲染视图？</h2><p>你可以在 <code>componentDidMount()</code> 中监听 <code>resize</code> 事件，然后更新尺寸（<code>width</code> 和 <code>height</code>）。你应该在 <code>componentWillUnmount()</code> 方法中移除监听器。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WindowDimensions</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">updateDimensions</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="variable language_">this</span>.<span class="property">updateDimensions</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="variable language_">this</span>.<span class="property">updateDimensions</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  updateDimensions = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">width</span>: <span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="attr">height</span>: <span class="variable language_">window</span>.<span class="property">innerHeight</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.state.width&#125; x &#123;this.state.height&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="101-setState-和-replaceState-方法之间的区别是什么？"><a href="#101-setState-和-replaceState-方法之间的区别是什么？" class="headerlink" title="101. setState() 和 replaceState() 方法之间的区别是什么？"></a>101. <code>setState()</code> 和 <code>replaceState()</code> 方法之间的区别是什么？</h2><p>当你使用 <code>setState()</code> 时，当前和之前的状态被合并。 <code>replaceState()</code> 抛出当前的状态，只用你提供的内容来替换它。通常 <code>setState()</code> 会被使用，除非你真的因为某些原因需要删除所有之前的键。你也可以在 <code>setState()</code> 中把状态设置为 <code>false</code>&#x2F;<code>null</code>，而不是使用 <code>replaceState()</code>。</p><h2 id="102-如何监听状态变化？"><a href="#102-如何监听状态变化？" class="headerlink" title="102. 如何监听状态变化？"></a>102. 如何监听状态变化？</h2><p>当状态发生变化时，<code>componentDidUpdate</code> 生命周期方法将被调用。你可以将提供的状态和 props 值与当前的状态和 props 进行比较，以确定是否有意义的变化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate(object prevProps, object prevState)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 以前的 ReactJS 版本也使用 <code>componentWillUpdate(object nextProps, object nextState)</code> 监听状态改变。在最新的版本中，它已被弃用。</p><h2 id="103-在-React-状态下，删除数组元素的推荐方法是什么？"><a href="#103-在-React-状态下，删除数组元素的推荐方法是什么？" class="headerlink" title="103. 在 React 状态下，删除数组元素的推荐方法是什么？"></a>103. 在 React 状态下，删除数组元素的推荐方法是什么？</h2><p>更好的方法是使用 <code>Array.prototype.filter()</code> 方法。</p><p>例如，让我们创建一个 <code>removeItem()</code> 方法来更新状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">removeItem</span>(<span class="params">index</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">data</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, i</span>) =&gt;</span> i !== index)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="104-有没有可能在不渲染-HTML-的情况下使用-React-呢？"><a href="#104-有没有可能在不渲染-HTML-的情况下使用-React-呢？" class="headerlink" title="104. 有没有可能在不渲染 HTML 的情况下使用 React 呢？"></a>104. 有没有可能在不渲染 HTML 的情况下使用 React 呢？</h2><p>在最新版本（&gt;&#x3D;16.2）中可以实现。以下是可用选项。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span><span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span><span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回 <code>undefined</code> 是不行的。</p><h2 id="105-如何用-React-打印漂亮的-JSON？"><a href="#105-如何用-React-打印漂亮的-JSON？" class="headerlink" title="105. 如何用 React 打印漂亮的 JSON？"></a>105. 如何用 React 打印漂亮的 JSON？</h2><p>我们可以使用 <code>&lt;pre&gt;</code> 标签，这样可以保留 <code>JSON.stringify()</code> 的格式。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">42</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;JSON.stringify(data, null, 2)&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">React</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">User</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;container&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="106-为什么你不能在-React-中更新-props？"><a href="#106-为什么你不能在-React-中更新-props？" class="headerlink" title="106. 为什么你不能在 React 中更新 props？"></a>106. 为什么你不能在 React 中更新 props？</h2><p>React 的理念是，props 应该是<strong>不可变的</strong>和<strong>自上而下</strong>的。这意味着父组件可以向子组件发送任何 props 值，但子组件不能修改收到的 props。</p><h2 id="107-如何在页面加载时聚焦一个输入框？"><a href="#107-如何在页面加载时聚焦一个输入框？" class="headerlink" title="107. 如何在页面加载时聚焦一个输入框？"></a>107. 如何在页面加载时聚焦一个输入框？</h2><p>你可以通过为 <code>input</code> 元素创建 ref 并在 <code>componentDidMount()</code> 中使用它。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">nameInput</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">nameInput</span>.<span class="title function_">focus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">defaultValue</span>=<span class="string">&#123;</span>&quot;<span class="attr">Won</span>&#x27;<span class="attr">t</span> <span class="attr">focus</span>&quot;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">&#123;input</span> =&gt;</span> (this.nameInput = input)&#125;</span></span><br><span class="line"><span class="language-xml">          defaultValue=&#123;&#x27;Will focus&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="108-更新状态中的对象的方式有哪些？"><a href="#108-更新状态中的对象的方式有哪些？" class="headerlink" title="108. 更新状态中的对象的方式有哪些？"></a>108. 更新状态中的对象的方式有哪些？</h2><ol><li><strong>合并状态和对象后调用 <code>setState()</code>：</strong></li></ol><ul><li>使用 <code>Object.assign()</code> 创建对象的拷贝：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">user</span>, &#123; <span class="attr">age</span>: <span class="number">42</span> &#125;);</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; user &#125;);</span><br></pre></td></tr></table></figure><ul><li>使用展开操作符：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; ...<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">user</span>, <span class="attr">age</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; user &#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>调用 <code>setState()</code> 时传入函数：</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">user</span>: &#123;</span><br><span class="line">    ...prevState.<span class="property">user</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">42</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h2 id="109-我们如何在浏览器中查看运行时的-React-的版本？"><a href="#109-我们如何在浏览器中查看运行时的-React-的版本？" class="headerlink" title="109. 我们如何在浏览器中查看运行时的 React 的版本？"></a>109. 我们如何在浏览器中查看运行时的 React 的版本？</h2><p>你可以使用 <code>React.version</code> 来获取版本。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">REACT_VERSION</span> = <span class="title class_">React</span>.<span class="property">version</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;`React version: $&#123;REACT_VERSION&#125;`&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="110-在-create-react-app-中包含-polyfills-的方法是什么？"><a href="#110-在-create-react-app-中包含-polyfills-的方法是什么？" class="headerlink" title="110. 在 create-react-app 中包含 polyfills 的方法是什么？"></a>110. 在 <code>create-react-app</code> 中包含 polyfills 的方法是什么？</h2><p>有一些方法可以在 create-react-app 中包含 polyfills。</p><ol><li><strong>手动从 <code>core-js</code> 引入：</strong></li></ol><p>创建一个名为（类似）<code>polyfills.js</code> 的文件并将其导入根 <code>index.js</code> 文件。运行 <code>npm install core-js</code> 或 <code>yarn add core-js</code> 并导入你所需要的特定功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/fn/array/find&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/fn/array/includes&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/fn/number/is-nan&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用 Polyfill 服务：</strong></li></ol><p>使用 polyfill.io CDN，通过在 <code>index.html</code> 中添加这一行来检索自定义的、针对浏览器的 polyfills。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.polyfill.io/v2/polyfill.min.js?features=default,Array.prototype.includes&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的脚本中，我们必须明确请求 <code>Array.prototype.includes</code> 功能，因为它不包括在默认功能集中。</p><h2 id="111-如何在-create-react-app-中使用-https-而不是-http？"><a href="#111-如何在-create-react-app-中使用-https-而不是-http？" class="headerlink" title="111. 如何在 create-react-app 中使用 https 而不是 http？"></a>111. 如何在 create-react-app 中使用 https 而不是 http？</h2><p>你只需要是用 <code>HTTPS=true</code> 配置。你可以编辑 <code>package.json</code> scripts 部分：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;set HTTPS=true &amp;&amp; react-scripts start&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>或者运行 <code>set HTTPS=true &amp;&amp; npm start</code></p><h2 id="112-如何避免在-create-react-app-中使用相对路径导入？"><a href="#112-如何避免在-create-react-app-中使用相对路径导入？" class="headerlink" title="112. 如何避免在 create-react-app 中使用相对路径导入？"></a>112. 如何避免在 create-react-app 中使用相对路径导入？</h2><p>在项目里根目录创建一个叫 <code>.env</code> 的文件并写入导入的路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NODE_PATH=src/app</span><br></pre></td></tr></table></figure><p>然后重启调试服务器。现在你应该能够在 <code>src/app</code> 目录下不使用相对路径导入任何东西。</p><h2 id="113-如何在-React-Router-中添加-Google-Analytics？"><a href="#113-如何在-React-Router-中添加-Google-Analytics？" class="headerlink" title="113. 如何在 React Router 中添加 Google Analytics？"></a>113. 如何在 React Router 中添加 Google Analytics？</h2><p>在 <code>history</code> 对象上添加一个监听器，以记录每个页面的浏览。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">history.<span class="title function_">listen</span>(<span class="keyword">function</span>(<span class="params">location</span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">ga</span>(<span class="string">&#x27;set&#x27;</span>, <span class="string">&#x27;page&#x27;</span>, location.<span class="property">pathname</span> + location.<span class="property">search</span>);</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">ga</span>(<span class="string">&#x27;send&#x27;</span>, <span class="string">&#x27;pageview&#x27;</span>, location.<span class="property">pathname</span> + location.<span class="property">search</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="114-如何每秒更新一次组件？"><a href="#114-如何每秒更新一次组件？" class="headerlink" title="114. 如何每秒更新一次组件？"></a>114. 如何每秒更新一次组件？</h2><p>你需要使用 <code>setInterval()</code> 来触发变化，但你也需要在组件卸载时清除计时器以防止错误和内存泄漏。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">interval</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">time</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() &#125;), <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">interval</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="115-如何在-React-中对内联样式使用-CSS-厂商前缀？"><a href="#115-如何在-React-中对内联样式使用-CSS-厂商前缀？" class="headerlink" title="115. 如何在 React 中对内联样式使用 CSS 厂商前缀？"></a>115. 如何在 React 中对内联样式使用 CSS 厂商前缀？</h2><p>React 不会自动应用 CSS 厂商前缀。你需要手动添加 CSS 厂商前缀。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  style=&#123;&#123;</span><br><span class="line">    <span class="attr">transform</span>: <span class="string">&#x27;rotate(90deg)&#x27;</span>,</span><br><span class="line">    <span class="title class_">WebkitTransform</span>: <span class="string">&#x27;rotate(90deg)&#x27;</span>, <span class="comment">// 注意大写 &#x27;W&#x27;</span></span><br><span class="line">    <span class="attr">msTransform</span>: <span class="string">&#x27;rotate(90deg)&#x27;</span>, <span class="comment">// &#x27;ms&#x27; 是全小写</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="116-如何使用-React-和-ES6-导入和导出组件？"><a href="#116-如何使用-React-和-ES6-导入和导出组件？" class="headerlink" title="116. 如何使用 React 和 ES6 导入和导出组件？"></a>116. 如何使用 React 和 ES6 导入和导出组件？</h2><p>你应该使用默认值来导出组件</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&#x27;user&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyProfile</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">User</span> <span class="attr">type</span>=<span class="string">&quot;customer&quot;</span>&gt;</span>//...<span class="tag">&lt;/<span class="name">User</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了导出指定符，MyProfile 将成为成员并导出到这个模块，同样可以在其他组件中导入而不提及名称。</p><h2 id="117-为什么组件构造器只会被调用一次？"><a href="#117-为什么组件构造器只会被调用一次？" class="headerlink" title="117. 为什么组件构造器只会被调用一次？"></a>117. 为什么组件构造器只会被调用一次？</h2><p>React 的 reconciliation（协调） 算法假定，在没有任何相反信息的情况下，如果一个自定义组件在随后的渲染中出现在相同的地方，它就是之前的那个组件，所以 React 重用之前的实例而不是创建一个新的。</p><h2 id="118-如何在-React-中定义常量？"><a href="#118-如何在-React-中定义常量？" class="headerlink" title="118. 如何在 React 中定义常量？"></a>118. 如何在 React 中定义常量？</h2><p>你可以使用 ES7 的 <code>静态</code> 字段来定义常量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="variable constant_">DEFAULT_PAGINATION</span> = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态字段是类字段第三阶段提案的一部分。</p><h2 id="119-如何在-React-中以编程方式触发点击事件？"><a href="#119-如何在-React-中以编程方式触发点击事件？" class="headerlink" title="119. 如何在 React 中以编程方式触发点击事件？"></a>119. 如何在 React 中以编程方式触发点击事件？</h2><p>你可以使用 ref props 通过回调获得对底层 <code>HTMLInputElement</code> 对象的引用，将该引用存储为类属性，然后使用该引用从事件处理程序中使用 <code>HTMLElement.click</code> 方法触发点击。</p><p>这可以分两步进行。</p><ol><li>在 render 方法中创建 ref：</li></ol><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input ref=&#123;<span class="function"><span class="params">input</span> =&gt;</span> (<span class="variable language_">this</span>.<span class="property">inputElement</span> = input)&#125; /&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>在你的事件处理程序中应用点击事件。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">inputElement</span>.<span class="title function_">click</span>();</span><br></pre></td></tr></table></figure><h2 id="120-有可能在纯-React-中使用-async-x2F-await-吗？"><a href="#120-有可能在纯-React-中使用-async-x2F-await-吗？" class="headerlink" title="120. 有可能在纯 React 中使用 async&#x2F;await 吗？"></a>120. 有可能在纯 React 中使用 async&#x2F;await 吗？</h2><p>如果你想在 React 中使用 <code>async</code>&#x2F;<code>await</code>，你将需要 Babel 和 <a href="https://babeljs.io/docs/en/babel-plugin-transform-async-to-generator">transform-async-to-generator</a> 插件。React Native 已经包含了 Babel 和一系列的转换功能。</p><h2 id="121-React-的常见文件夹结构是什么？"><a href="#121-React-的常见文件夹结构是什么？" class="headerlink" title="121. React 的常见文件夹结构是什么？"></a>121. React 的常见文件夹结构是什么？</h2><p>React 项目文件结构有两种常见做法。</p><ol><li><strong>按特性或路由分组：</strong>*</li></ol><p>一种常见的项目结构方式是将 CSS、JS 和测试放在一起，按特性或路由分组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">common/</span><br><span class="line">├─ Avatar.js</span><br><span class="line">├─ Avatar.css</span><br><span class="line">├─ APIUtils.js</span><br><span class="line">└─ APIUtils.test.js</span><br><span class="line">feed/</span><br><span class="line">├─ index.js</span><br><span class="line">├─ Feed.js</span><br><span class="line">├─ Feed.css</span><br><span class="line">├─ FeedStory.js</span><br><span class="line">├─ FeedStory.test.js</span><br><span class="line">└─ FeedAPI.js</span><br><span class="line">profile/</span><br><span class="line">├─ index.js</span><br><span class="line">├─ Profile.js</span><br><span class="line">├─ ProfileHeader.js</span><br><span class="line">├─ ProfileHeader.css</span><br><span class="line">└─ ProfileAPI.js</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>按文件类型分组：</strong></li></ol><p>另一种流行的项目结构方式是将类似的文件分组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">api/</span><br><span class="line">├─ APIUtils.js</span><br><span class="line">├─ APIUtils.test.js</span><br><span class="line">├─ ProfileAPI.js</span><br><span class="line">└─ UserAPI.js</span><br><span class="line">components/</span><br><span class="line">├─ Avatar.js</span><br><span class="line">├─ Avatar.css</span><br><span class="line">├─ Feed.js</span><br><span class="line">├─ Feed.css</span><br><span class="line">├─ FeedStory.js</span><br><span class="line">├─ FeedStory.test.js</span><br><span class="line">├─ Profile.js</span><br><span class="line">├─ ProfileHeader.js</span><br><span class="line">└─ ProfileHeader.css</span><br></pre></td></tr></table></figure><h2 id="122-有哪些流行的动画包？"><a href="#122-有哪些流行的动画包？" class="headerlink" title="122. 有哪些流行的动画包？"></a>122. 有哪些流行的动画包？</h2><p>React Transition Group 和 React Motion 是 React 生态系统中流行的动画包。</p><h2 id="123-样式模块的好处是什么？"><a href="#123-样式模块的好处是什么？" class="headerlink" title="123. 样式模块的好处是什么？"></a>123. 样式模块的好处是什么？</h2><p>我们建议避免在组件中硬编码样式值。任何可能在不同的 UI 组件中使用的值都应该被提取到它们自己的模块中。</p><p>例如，这些样式可以被提取到一个单独的组件中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> colors = &#123;</span><br><span class="line">  white,</span><br><span class="line">  black,</span><br><span class="line">  blue,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> space = [<span class="number">0</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>];</span><br></pre></td></tr></table></figure><p>然后在其他组件中单独导入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; space, colors &#125; <span class="keyword">from</span> <span class="string">&#x27;./styles&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="124-有哪些流行的-React-专用-linter？"><a href="#124-有哪些流行的-React-专用-linter？" class="headerlink" title="124. 有哪些流行的 React 专用 linter？"></a>124. 有哪些流行的 React 专用 linter？</h2><p>ESLint 是一个很流行的 JavaScript linter。有一些插件可以用来分析特定的代码风格。其中最常见的 React 插件是一个名为 <code>eslint-plugin-react</code> 的 npm 包。默认情况下，它将检查一些最佳实践，其规则是检查从迭代器中的键到一整套道具类型的东西。</p><p>另一个流行的插件是 <code>eslint-plugin-jsx-a11y</code>，它将帮助修复可访问性方面的常见问题。由于 JSX 提供了与常规 HTML 稍有不同的语法，例如 <code>alt</code> 文本和 <code>tabindex</code> 的问题将不会被常规插件发现。</p><h2 id="125-如何进行-AJAX-调用，应该在哪个组件的生命周期方法中进行-AJAX-调用？"><a href="#125-如何进行-AJAX-调用，应该在哪个组件的生命周期方法中进行-AJAX-调用？" class="headerlink" title="125. 如何进行 AJAX 调用，应该在哪个组件的生命周期方法中进行 AJAX 调用？"></a>125. 如何进行 AJAX 调用，应该在哪个组件的生命周期方法中进行 AJAX 调用？</h2><p>你可以使用 AJAX 库，如 Axios、jQuery AJAX，以及浏览器内置的 <code>fetch</code>。你应该在 <code>componentDidMount()</code> 生命周期方法中获取数据。这样你就可以在获取数据时使用 <code>setState()</code> 来更新你的组件。</p><p>例如，从 API 获取的雇员名单并设置本地状态。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">employees</span>: [],</span><br><span class="line">      <span class="attr">error</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/items&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(</span><br><span class="line">        <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">employees</span>: result.<span class="property">employees</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; error &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; error, employees &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Error: &#123;error.message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;employees.map(employee =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;employee.name&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;employee.name&#125;-&#123;employee.experience&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="126-什么是渲染-props？"><a href="#126-什么是渲染-props？" class="headerlink" title="126. 什么是渲染 props？"></a>126. 什么是渲染 props？</h2><p><strong>渲染 props</strong>是一种简单的技术，使用一个 props 在组件之间共享代码，其值是一个函数。下面的组件使用渲染 props，它返回一个 React 元素。</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">DataProvider</span> render=&#123;<span class="function"><span class="params">data</span> =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;`Hello $&#123;data.target&#125;`&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p>React Router 和 DownShift 等库正在使用这种模式。</p>]]></content>
    
    
    <summary type="html">前 500 个 ReactJS 面试必知必会问题与答案，是洛竹诚意翻译的前端 React 面试必备系列。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="前端" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React 面试题" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/React-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="swiper" scheme="https://youngjuning.js.org/tags/swiper/"/>
    
    <category term="React 面试题" scheme="https://youngjuning.js.org/tags/React-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="React 面试" scheme="https://youngjuning.js.org/tags/React-%E9%9D%A2%E8%AF%95/"/>
    
    <category term="React 面试题与答案" scheme="https://youngjuning.js.org/tags/React-%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8E%E7%AD%94%E6%A1%88/"/>
    
    <category term="前端面试题" scheme="https://youngjuning.js.org/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>React 面试题（React Router）</title>
    <link href="https://youngjuning.js.org/react-router-interview/"/>
    <id>https://youngjuning.js.org/react-router-interview/</id>
    <published>2023-03-06T11:30:00.000Z</published>
    <updated>2023-03-23T07:00:19.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-React-Router-是什么？"><a href="#1-React-Router-是什么？" class="headerlink" title="1. React Router 是什么？"></a>1. React Router 是什么？</h1><p>React Router 是一个建立在 React 之上的强大的路由库，它可以帮助你快速添加新的屏幕和流程到你的应用程序，同时保持 URL 与页面上显示的内容同步。</p><h1 id="2-React-Router-与-history-库有什么不同？"><a href="#2-React-Router-与-history-库有什么不同？" class="headerlink" title="2. React Router 与 history 库有什么不同？"></a>2. React Router 与 history 库有什么不同？</h1><p>React Router 是一个围绕 <code>history</code> 库的包装器，它处理与浏览器的 <code>window.history</code> 和哈希历史记录的交互。 它还提供了内存历史，这对没有全局历史的环境很有用，如移动应用开发（React Native）和 Node 的单元测试。</p><h1 id="3-React-Router-v4-的-lt-Router-gt-组件是什么？"><a href="#3-React-Router-v4-的-lt-Router-gt-组件是什么？" class="headerlink" title="3. React Router v4 的 &lt;Router&gt; 组件是什么？"></a>3. React Router v4 的 <code>&lt;Router&gt;</code> 组件是什么？</h1><p>React Router v4 提供以下 3 个 <code>&lt;Router&gt;</code> 组件。</p><ol><li><code>&lt;BrowserRouter&gt;</code></li><li><code>&lt;HashRouter&gt;</code></li><li><code>&lt;MemoryRouter&gt;</code></li></ol><p>上述组件将创建<em>browser</em>、<em>hash</em>和<em>memory</em>历史实例。React Router v4 使与你的路由相关的 <code>history</code> 实例的属性和方法通过 <code>router</code> 对象中的上下文可用。</p><h1 id="4-history-的-push-和-replace-方法的用处是什么？"><a href="#4-history-的-push-和-replace-方法的用处是什么？" class="headerlink" title="4. history 的 push() 和 replace() 方法的用处是什么？"></a>4. <code>history</code> 的 <code>push()</code> 和 <code>replace()</code> 方法的用处是什么？</h1><p>一个 history 实例有两个方法用于导航。</p><ol><li><code>push()</code></li><li><code>replace()</code></li></ol><p>如果你把 history 看作是一个访问过的位置的数组， <code>push()</code> 将在数组中添加一个新的位置，<code>replace()</code> 将用新的位置替换数组中的当前位置。</p><h1 id="5-如何用-React-Router-v4-进行程序化导航？"><a href="#5-如何用-React-Router-v4-进行程序化导航？" class="headerlink" title="5. 如何用 React Router v4 进行程序化导航？"></a>5. 如何用 React Router v4 进行程序化导航？</h1><p>There are three different ways to achieve programmatic routing&#x2F;navigation within components.</p><ol><li><strong>Using the <code>withRouter()</code> higher-order function:</strong></li></ol><p>The <code>withRouter()</code> higher-order function will inject the history object as a prop of the component. This object provides <code>push()</code> and <code>replace()</code> methods to avoid the usage of context.</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>; <span class="comment">// this also works with &#x27;react-router-native&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Button</span> = <span class="title function_">withRouter</span>(<span class="function">(<span class="params">&#123; history &#125;</span>) =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">      history.push(&#x27;/new-location&#x27;);</span></span><br><span class="line"><span class="language-xml">    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  &gt;</span></span><br><span class="line"><span class="language-xml">    &#123;&#x27;Click Me!&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">));</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>Using <code>&lt;Route&gt;</code> component and render props pattern:</strong></li></ol><p>The <code>&lt;Route&gt;</code> component passes the same props as <code>withRouter()</code>, so you will be able to access the history methods through the history prop.</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">render</span>=<span class="string">&#123;(&#123;</span> <span class="attr">history</span> &#125;) =&gt;</span> (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          history.push(&#x27;/new-location&#x27;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        &#123;&#x27;Click Me!&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    )&#125;</span></span><br><span class="line"><span class="language-xml">  /&gt;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>Using context:</strong></li></ol><p>This option is not recommended and treated as unstable API.</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">props, context</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">      context.history.push(&#x27;/new-location&#x27;);</span></span><br><span class="line"><span class="language-xml">    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  &gt;</span></span><br><span class="line"><span class="language-xml">    &#123;&#x27;Click Me!&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Button</span>.<span class="property">contextTypes</span> = &#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title class_">React</span>.<span class="property">PropTypes</span>.<span class="title function_">shape</span>(&#123;</span><br><span class="line">    <span class="attr">push</span>: <span class="title class_">React</span>.<span class="property">PropTypes</span>.<span class="property">func</span>.<span class="property">isRequired</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="6-如何在-React-Router-v4-中获取查询参数？"><a href="#6-如何在-React-Router-v4-中获取查询参数？" class="headerlink" title="6. 如何在 React Router v4 中获取查询参数？"></a>6. 如何在 React Router v4 中获取查询参数？</h1><p>The ability to parse query strings was taken out of React Router v4 because there have been user requests over the years to support different implementation. So the decision has been given to users to choose the implementation they like. The recommended approach is to use query strings library.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queryString = <span class="built_in">require</span>(<span class="string">&#x27;query-string&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> parsed = queryString.<span class="title function_">parse</span>(props.<span class="property">location</span>.<span class="property">search</span>);</span><br></pre></td></tr></table></figure><p>You can also use <code>URLSearchParams</code> if you want something native:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(props.<span class="property">location</span>.<span class="property">search</span>);</span><br><span class="line"><span class="keyword">const</span> foo = params.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>);</span><br></pre></td></tr></table></figure><p>You should use a <em>polyfill</em> for IE11.</p><h1 id="7-为什么你得到-Router-may-have-only-one-child-element-的警告？"><a href="#7-为什么你得到-Router-may-have-only-one-child-element-的警告？" class="headerlink" title="7. 为什么你得到 Router may have only one child element 的警告？"></a>7. 为什么你得到 <code>Router may have only one child element</code> 的警告？</h1><p>You have to wrap your Route’s in a <code>&lt;Switch&gt;</code> block because <code>&lt;Switch&gt;</code> is unique in that it renders a route exclusively.</p><p>At first you need to add <code>Switch</code> to your imports:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Switch</span>, <span class="title class_">Router</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router&#x27;</span>;</span><br></pre></td></tr></table></figure><p>Then define the routes within <code>&lt;Switch&gt;</code> block:</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Router</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> &#123;/* <span class="attr">...</span> */&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> &#123;/* <span class="attr">...</span> */&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Router</span>&gt;</span><br></pre></td></tr></table></figure><h1 id="8-如何在-React-Router-v4-中向-history-push-方法传递参数？"><a href="#8-如何在-React-Router-v4-中向-history-push-方法传递参数？" class="headerlink" title="8. 如何在 React Router v4 中向 history.push 方法传递参数？"></a>8. 如何在 React Router v4 中向 <code>history.push</code> 方法传递参数？</h1><p>While navigating you can pass props to the <code>history</code> object:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">pathname</span>: <span class="string">&#x27;/template&#x27;</span>,</span><br><span class="line">  <span class="attr">search</span>: <span class="string">&#x27;?name=sudheer&#x27;</span>,</span><br><span class="line">  <span class="attr">state</span>: &#123; <span class="attr">detail</span>: response.<span class="property">data</span> &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The <code>search</code> property is used to pass query params in <code>push()</code> method.</p><h1 id="9-如何实现-default-或-NotFound-页面？"><a href="#9-如何实现-default-或-NotFound-页面？" class="headerlink" title="9. 如何实现 default 或 NotFound 页面？"></a>9. 如何实现 <em>default</em> 或 <em>NotFound</em> 页面？</h1><p>A <code>&lt;Switch&gt;</code> renders the first child <code>&lt;Route&gt;</code> that matches. A <code>&lt;Route&gt;</code> with no path always matches. So you just need to simply drop path attribute as below</p><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">component</span>=<span class="string">&#123;User&#125;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">component</span>=<span class="string">&#123;NotFound&#125;</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Switch</span>&gt;</span><br></pre></td></tr></table></figure><h1 id="10-如何在-React-Router-v4-上获得历史记录？"><a href="#10-如何在-React-Router-v4-上获得历史记录？" class="headerlink" title="10. 如何在 React Router v4 上获得历史记录？"></a>10. 如何在 React Router v4 上获得历史记录？</h1><p>Below are the list of steps to get history object on React Router v4,</p><ol><li>Create a module that exports a <code>history</code> object and import this module across the project.</li></ol><p>For example, create <code>history.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createBrowserHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;history&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createBrowserHistory</span>(&#123;</span><br><span class="line">  <span class="comment">/* pass a configuration object here if needed */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>You should use the <code>&lt;Router&gt;</code> component instead of built-in routers. Imported the above <code>history.js</code> inside <code>index.js</code> file:</li></ol><figure class="highlight jsx"><figcaption><span>| pure</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> history <span class="keyword">from</span> <span class="string">&#x27;./history&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;history&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span>,</span><br><span class="line">  holder,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="3"><li>You can also use push method of <code>history</code> object similar to built-in history object:</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// some-other-file.js</span></span><br><span class="line"><span class="keyword">import</span> history <span class="keyword">from</span> <span class="string">&#x27;./history&#x27;</span>;</span><br><span class="line"></span><br><span class="line">history.<span class="title function_">push</span>(<span class="string">&#x27;/go-here&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="11-如何在登录后执行自动重定向？"><a href="#11-如何在登录后执行自动重定向？" class="headerlink" title="11. 如何在登录后执行自动重定向？"></a>11. 如何在登录后执行自动重定向？</h1><p>The <code>react-router</code> package provides <code>&lt;Redirect&gt;</code> component in React Router. Rendering a <code>&lt;Redirect&gt;</code> will navigate to a new location. Like server-side redirects, the new location will override the current location in the history stack.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Redirect</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">LoginComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isLoggedIn</span> === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/your/redirect/page&quot;</span> /&gt;</span></span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#x27;Login Please&#x27;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">前 500 个 ReactJS 面试必知必会问题与答案，这是洛竹诚意翻译的前端 React 面试必备系列的 React Router 面试篇。</summary>
    
    
    
    <category term="洛竹翻译计划" scheme="https://youngjuning.js.org/categories/%E6%B4%9B%E7%AB%B9%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92/"/>
    
    <category term="前端" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React 面试题" scheme="https://youngjuning.js.org/categories/%E5%89%8D%E7%AB%AF/React-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="React Router" scheme="https://youngjuning.js.org/tags/React-Router/"/>
    
    <category term="React 面试题" scheme="https://youngjuning.js.org/tags/React-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="React 面试" scheme="https://youngjuning.js.org/tags/React-%E9%9D%A2%E8%AF%95/"/>
    
    <category term="React 面试题与答案" scheme="https://youngjuning.js.org/tags/React-%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%8E%E7%AD%94%E6%A1%88/"/>
    
    <category term="前端面试题" scheme="https://youngjuning.js.org/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="React Router 面试题" scheme="https://youngjuning.js.org/tags/React-Router-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
